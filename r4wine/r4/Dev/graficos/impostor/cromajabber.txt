| pointcloud
| PHREDA 2012
|-----------------------------
^r4/lib/gui.txt
^r4/lib/trace.txt
^r4/lib/sort.txt
^r4/lib/morton.txt

#LOADFILE
|	"../r4dataextern/ply/small_rock.ply"
	"../r4dataextern/ply/blender_monkey.ply"

|	"../r4dataextern/obj/ducky.obj"
|	"../r4dataextern/obj/m60.obj"
|	"../r4dataextern/obj/armadillo.obj"
|	"../r4dataextern/obj/horse.obj"
|	"../r4dataextern/obj/teapot.obj"
|	"../r4dataextern/obj/blob.obj"

#SAVEFILE "media/3dm/bunny.3dm"

#iniply
#iniver | inicio de vertices  x y z nx ny nz
#inisor | inicio de lista ordenada  xyz nxyz color

#nodoa 0

#xcam 0 #ycam 0 #zcam 2048

|------------ carga y parseo
#vertices
#faces
#bin

:>>10
	( c@+ 1? )(
		$a =? ( drop ; )
		drop ) drop 1- ;

:parseheader | adr -- adr
	( dup c@ 1? )( drop
		dup "element vertex" =pre 1? ( drop 15 + trim str>nro 'vertices ! dup ) drop
		dup "element face" =pre 1? ( drop 12 + trim str>nro 'faces ! dup ) drop
		dup "binary_big_endian" =pre 1? ( drop 17 + dup 1 'bin ! ) drop
		dup "end_header" =pre 1? ( drop 10 + ; ) drop
		1+ ) drop
	1- ;


|----------- read sigle 32bit float (not work)
:bswap | v - v
	dup $ff and 24 << >r
	dup $ff00 and 8 << r+
	dup $ff0000 and 8 >> r+
	24 >> $ff and r> or ;

:float2fix | r -- f
	bswap
	dup $7fffff and $800000 or |fraction
	over 23 >> $ff and  | s frac exp
|	0? ( denormalized ; )
	$ff =? ( 3drop 0 ; ) | special value
	127 - -? ( neg << )( >> )
	swap -? ( drop neg )( drop )
|	8 >>
	;

| binary big endian
:parsebinb
	iniver >r
	vertices ( 1? )( 1- swap
		@+ float2fix r!+
		@+ float2fix r!+
		@+ float2fix r!+
		swap ) drop
	r> dup 'inisor !
|	vertices 3 << 2* + dup 'ininor !
	drop
	;

:parseply | adr --
	0 'bin !
	parseheader
	>>10
	bin 1? ( drop parsebinb ; ) drop
	| ascii only
	iniver >r
	vertices ( 1? )( 1- swap

		trim str>fix r!+
		trim str>fix r!+
		trim str>fix r!+
		trim dup c@ $a <>? ( drop
			trim str>fix r!+	| nx
			trim str>fix r!+	| ny
			trim str>fix r!+	| nz
			)( drop 0 dup dup r!+ r!+ r!+ )
		>>10

		swap ) drop
	r> dup 'inisor !
|	vertices 3 << 2* + dup 'ininor !
	drop
	;

:loadply
	mark
	here dup 'iniply !
	'LOADFILE
	load
	0 swap !+ 'iniver !
	iniply parseply ;

|----- load obj

:esvert | adr c v -- adr x v
	>r drop
	trim str>fix r!+
	trim str>fix r!+
	trim str>fix r!+
	1 'vertices +!
	dup r> ;

:parseobj | adr --
	0 'vertices !
	iniver >r
	( c@+ 1? )(
		$76 =? ( drop c@+ 32 =? ( r> esvert >r ) )
		drop
		>>10 trim
		) drop
	r> dup 'inisor !
|	vertices 3 << 2* + dup 'ininor !
	drop ;

:loadobj
	mark
	here dup 'iniply !
	'LOADFILE
	load
	0 swap !+ 'iniver !
	iniply parseobj
	;

|----------- graficacion
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx
	mroty ;

:drawp | x y z ---
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

:drawp4 | x y z ---
	project3d
	2dup op
	over 1+ over line
	over 1+ over 1+ line
	1+ line
	;

:drawpc
	iniver >r
	blanco
	vertices ( 1? )( 1-
		r@+ r@+ r@+ drawp
		r@+ r@+ r@+ 3drop
		) drop
	rdrop
	;


:3dop project3d op ;
:3dline project3d line ;

#dir 0 0 -1

:drawpcn
	mpush

	xymouse
	sh 2/ - 7 << 	mrotxi

	sw 2/ - neg 7 << neg mrotyi


	0 0 1.0 transform
	swap rot 'dir !+ !+ !
	mpop

	iniver >r
	vertices ( 1? )( 1- swap
		r@+ r@+ r@+

		'dir @+ r@+ *.
		swap @+ r@+ *.
		swap @+ r@+ *.
		nip
		+ + 
		+? ( ink drawp )( 4drop )
		swap ) 2drop
	rdrop
	;



|----------- ajuste
#xmin #ymin #zmin #xmax #ymax #zmax

:statvert
	iniver >r
	r@+ dup 'xmin ! 'xmax !
	r@+ dup 'ymin ! 'ymax !
	r@+ dup 'zmin ! 'zmax !
	r@+ r@+ r@+ 3drop
	vertices 1-
	( 1? )( 1-
		r@+ xmin <? ( dup 'xmin ! ) xmax >? ( dup 'xmax ! ) drop
		r@+ ymin <? ( dup 'ymin ! ) ymax >? ( dup 'ymax ! ) drop
		r@+ zmin <? ( dup 'zmin ! ) zmax >? ( dup 'zmax ! ) drop
		r@+ r@+ r@+ 3drop
		) drop
	rdrop ;

:movevert | dx dy dz --
	iniver >r
	vertices ( 1? )( 1-
		r @ pick4 + r!+
		r @ pick3 + r!+
		r @ pick2 + r!+
		r@+ r@+ r@+ 3drop
		) drop
	rdrop
	3drop ;

:3max | a b c -- a
	over <? ( drop )( nip )
	over <? ( drop )( nip )
	;

:normalizovertices
	$1ff	| a 10bits por coordenada
	xmax ymax zmax 3max 0? ( 1 nip )
	iniver >r
	vertices ( 1? )( 1- 		| m dv nro --
		r @ pick3 pick3 */ r!+
		r @ pick3 pick3 */ r!+
		r @ pick3 pick3 */ r!+
		r@+ r@+ r@+ 3drop
		) 3drop
	rdrop
	;

|----- calcula normales
#p0 #p0d
#p1 #p1d

:dist | p p1 -- p p1 dist2
	over @ over @ - dup *. >r
	over 4+ @ over 4+ @ - dup *. r+
	over 8 + @ over 8 + @ - dup *. r> + ; | x^2+y^2+z^2

:dista | p p1 -- p p1 dist2 ; sin *.
	over @ over @ - abs  >r
	over 4+ @ over 4+ @ - abs r+
	over 8 + @ over 8 + @ - abs r> + ; | x^2+y^2+z^2

:compmax | p pn dist - p
	0? ( 2drop ; )
	p0d <? ( p0d 'p1d ! 'p0d ! p0 'p1 ! 'p0 ! ; )
	p1d <? ( 'p1d ! 'p1 ! ; )
	2drop ;

:busco2mascerca | p -- p p0 p1
	iniver >r
	$7fffffff 'p0d !
	$7fffffff 'p1d !
	vertices ( 1? )( 1- swap
		r dista compmax
		12 r+ swap ) drop rdrop
	p0 p1 ;

|		Vector3f v0 = (p0-p).Unit();
|		Vector3f v1 = (p1-p).Unit();
|		point.normal = v1.Cross(v0);
|		if(p.Dot(point.normal) < 0) point.normal = -point.normal;

#v0 0 0 0
#v1 0 0 0

:calculonormal | p p0 p1 -- p zn yn xn
	'v1 swap v3=
	'v0 swap v3=
	'v0 over v3- 'v0 v3nor
	'v1 over v3- 'v0 v3nor
	'v1 'v0 v3vec
	dup 'v1 v3ddot -? ( 'v1 -1.0 v3* ) drop
	|'v1 v3nor
	'v1 @+ swap @+ swap @ swap rot
	;

:calcnormales
	iniver >r
	vertices ( 1? )( 1- swap
		busco2mascerca	| p p0 p1
		calculonormal	| p xn yn zn
		r!+ r!+ r!+ 	| guardo normal
		12 + swap ) drop
	rdrop
	;

|----------------
:ordenapormorton
	mark
	inisor 'here ! | lista para ordenar
	iniver >r
	vertices ( 1? )( 1-
		r r@+ r@+ r@+
		morton3d , , | no funciona si usa >10bits por eje
		) drop
	rdrop
	empty
	vertices 1+ inisor shellsort

	;

|----------- imprime con color
#xa #ya #za
:chosecolor | x y z ---
	blanco
	za <>? ( ; )
	rot xa <>? ( rot rot ; )
	rot ya <>? ( rot ; ) | z x y
	azul
	rot ;

:drawl | x y z ---
|	chosecolor
	pick2 'xa !
	over 'ya !
	dup 'za !
	project3d |2dup op line ;
	-? ( 2drop ; ) sh >=? ( 2drop ; )
	swap -? ( 2drop ; ) sw >=? ( 2drop ; ) swap
	setxy
	ink@ px!+
	;

|-------------------------------
#cntdup

:ck
	dup
	@+ xa <>? ( 2drop ; ) drop
	@+ ya <>? ( 2drop ; ) drop
	@+ za <>? ( 2drop ; ) drop
	drop
	| donde lo quita?
	1 'cntdup +! ;

:checkm | m --
	ck 'xa swap 3 move ;

:removedups
	inisor >r
	r @ 1+ 'xa !
	0 'cntdup !
	vertices ( 1? )( 1- 4 r+ r@+ checkm ) drop
	rdrop ;

|-------------------------------
#anterior
:savemodel | "" --
	mark
	inisor >r
	r @ 1+ 'anterior !
	vertices ( 1? )( 1-
		r@+
		anterior <>? ( dup 'anterior ! , r@+ , )( drop 4 r+ )
		) drop
	rdrop
	'SAVEFILE savemem
	empty
	;


|---- procesa pc
:procply
	"load 3D point cloud" print cr redraw

	loadply
|	loadobj

	vertices "%d vertices" print cr redraw
    "centra" print cr redraw
	statvert
	xmin xmax + 2/ neg ymin ymax + 2/ neg zmin zmax + 2/ neg movevert | centra
    "normaliza" print cr redraw
	statvert
	normalizovertices
    "normales" print cr redraw
	statvert

|	calcnormales
|	"sortmorton" print cr redraw
|	ordenapormorton
|	"removedups" print cr redraw
|	removedups

	;

|---- caja en contenido
:drawboxz | z --
	xmin ymin pick2 3dop
	xmax ymin pick2 3dline
	xmax ymax pick2 3dline
	xmin ymax pick2 3dline
	xmin ymin rot 3dline ;

:drawlinez | x1 x2 --
	2dup zmin 3dop zmax 3dline ;

:draw3dbox
	zmin drawboxz
	zmax drawboxz
	xmin ymin drawlinez
	xmax ymin drawlinez
	xmax ymax drawlinez
	xmin ymax drawlinez
	;

|---- caja en normalizado
:drawboxz | z --
	-$1ff -$1ff pick2 3dop
	$1ff -$1ff pick2 3dline
	$1ff $1ff pick2 3dline
	-$1ff $1ff pick2 3dline
	-$1ff -$1ff rot 3dline ;

:drawlinez | x1 x2 --
	2dup -$1ff 3dop $1ff 3dline ;

:draw3dnorm
	-$1ff drawboxz
	$1ff drawboxz
	-$1ff -$1ff drawlinez
	$1ff -$1ff drawlinez
	$1ff $1ff drawlinez
	-$1ff $1ff drawlinez ;

|--------------------------
:main
	here 'iniply !
	here 'iniver !
	4
	show clrscr verde
		dup ":r%d " print
		faces vertices "v:%d f:%d" print cr
|		$1ff xmin "x:%f X:%f" print $1ff -$1ff "y:%f Y:%f" print $1ff -$1ff "z:%f Z:%f" print cr
		$1ff xmin "x:%d X:%d" print $1ff -$1ff "y:%d Y:%d" print $1ff -$1ff "z:%d Z:%d" print cr

|		xmin $1ff + 2/ neg -$1ff $1ff + 2/ neg -$1ff $1ff + 2/ neg "zm:%f ym:%f xm:%f" print cr

		cntdup "unicos:%d" print cr
		nodoa dup 1? ( @ ) "%h %h" print cr
		azul
|		printcodes
		rojo chome!

		cflecha

		omode
		freelook
		xcam ycam zcam mtrans

		drawpcn
|		verde drawpc


		'procply <f1>
		'savemodel <f3>
		[ nodoa 0? ( inisor nip )( 8 + ) 'nodoa ! ; ] <le>
		[ nodoa 0? ( inisor nip )( 8 + ) 'nodoa ! ; ] <ri>

		[ -0.01 'zcam +! ; ] <up>
		[ 0.01 'zcam +! ; ] <dn>

		'exit >esc< ;

: mark main ;
