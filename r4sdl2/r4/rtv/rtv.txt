| rTV
| 2016 PHREDA
|-----------------------------------------
^r4/lib/gui.txt
^r4/lib/img.txt

^r4/lib/loadjpg.txt
^r4/lib/loadpng.txt
^r4/lib/loadbmp.txt

^r4/lib/trace.txt

^r4/lib/plqlib.txt

^r4/lib/part16.txt
^r4/rtv/dib.spr

#remem
|---------------------------- scr
#bmodo 1
#bcolor $ffffff

#box )( $ffff
#box> 'box
#box< 0
#mbox )( $ffff
#mbox> 'mbox

#palcnt 0
#palimg )( $1ff
#boxfn )( $fff
#boxfn> 'boxfn

#tnow
#tdelta

#ti
#tw
#to

|----------- particulas animadas
#parts 0 0
#anims 0 0

|---------------------------- img
:loadimg | filename -- img
	".jpg" =pos 1? ( drop loadjpg ; ) drop
	".png" =pos 1? ( drop loadpng ; ) drop
	".bmp" =pos 1? ( drop loadbmp ; )
	2drop 0 ;

:getimg | nro -- img
	3 << 'palimg + 4+ @ ;

|--------------------------
:2color dup $f0f0f0 and dup 4 >> or swap $f0f0f and dup 4 << or ;
:bfill tx1 ty1 tx2 ty2 cajaf ;
#pad

:f0	dup 28 >> $f and 0? ( 2drop ; ) 'pad ! ink
	tx1 ty1 2dup op tx2 ty1 pline tx2 ty2 pline tx1 ty2 pline pline
	tx1 pad + ty1 pad + 2dup op tx2 pad - ty1 pad + pline tx2 pad - ty2 pad - pline tx1 pad + ty2 pad - pline pline
	poli ;
:f1	ink bfill ;			| solido

:f2	$ff and getimg >r
	tx1 ty1 tx2 ty2
	pick2 - swap pick3 - swap
	r> img.drawsize ;

:f3 2color fcol tx1 ty2 fcen 1.0 tx2 tx1 - 1 max / 0 fmat lfill bfill sfill ;
:f4 2color fcol tx1 ty2 fcen 0 1.0 ty2 ty1 - 1 max / fmat lfill bfill sfill ;
:f5 2color fcol tx1 ty1 fcen 0.5 tx2 tx1 - 1 max / 0.5 ty2 ty1 - 1 max / neg fmat lfill bfill sfill ;
:f6 2color fcol tx1 ty2 fcen 0.5 tx2 tx1 - 1 max / 0.5 ty2 ty1 - 1 max / fmat lfill bfill sfill ;
:f7 drop ;	| auxiliar

#lbfill f0 f1 f2 f3 f4 f5 f6 f7

:fillbox | nro --
	dup 28 >> 7 and 2 << 'lbfill + @ exec ;

|------------------------------------------------
#amem
#alerta

:alertamem
	here dup 'amem !
	$fff + 'here !
	0 'alerta !
	;

:eventocheck
	amem "abeltv/alerta.mem" load
	amem =? ( 0 swap ! ; ) 0 swap !
	1 'alerta !

|    0 0 "abeltv/alerta.mem" save
	;

|-----------------------------------------------
#videos
#videonow

:playffm | "" --
	"abeltv/ffplay -fs -autoexit -loglevel quiet ""abeltv/videos/%s""" mprint
	system drop ;

:waitvideo
	( -1 system -1 <>? )( drop
		eventocheck
		100 update drop ) drop ;

:waitvideo
	show
		'exit >esc<
		-1 system -1 =? ( exit 0 system drop ) drop ;

:playvideo
	videonow playffm
	videonow >>0 dup c@ 0? ( 2drop videos )( drop ) 'videonow !
 	;

:player
	-1 system -1 <>? ( drop ; ) drop
	playvideo ;


|------------------------------------------------
#last
:plqload | "" --
	here swap load here =? ( drop ; ) 'last !
	here >r
	r@+ dup
	24 >> $ff and 'bmodo !
	$ffffff and 'bcolor !
	'box r@+ ( 1? )( r@+ rot !+ swap 1- ) drop 'box> !
	0 'box< !
	'mbox r@+ ( 1? )( r@+ rot !+ swap 1- ) drop 'mbox> !

	r@+ 'palcnt !
	r> 'boxfn swap last over - cmove
    remem 'here !
    'palimg >r
	'boxfn dup 'boxfn> !
	0 ( palcnt <? )( swap
		dup 'boxfn - r!+
		dup >>0 swap loadimg r!+
    	swap 1+ ) 2drop
    rdrop
	;



|------------------------------------
| in	- seg - type
| wait	- seg - type
| out	- seg - type

#seq )( $7fff
#seq> 'seq
#seqnow
#seqm )( $fff
#seqm> 'seqm

:,seq
	seq> !+ 'seq> ! ;
:,seqm
	seqm> strcpyl 'seqm> ! ;

:newseq
	0 16 << seqm> 'seqm - or ,seq
	"atv/bb.plq" ,seqm
|	4.0 ,seq | solo duracion total
	5.5 ,seq
	2.8 ,seq
	5.3 ,seq

	1 16 << seqm> 'seqm - or ,seq
	"atv/aa.plq" ,seqm
	0.2 ,seq
	1.8 ,seq
	0.5 ,seq

	'seq 'seqnow !
	;




:dumpseq
	home fonti negro
	ti msec - "%f" print
	cr
	msec "%d " print
	ti "%d " print
	tw "%d " print
	to "%d " print
	cr
	'seq ( seq> <? )(
		@+ dup $ffff and 'seqm + print
		20 col
		16 >> "%h" print
		@+ "%f " print
		@+ "%f " print
		@+ "%f " print
		cr
		) drop
	;

|----------- interpolacion -----------
#dx #dy
#t0

:posdelta | nro --
	0 dup 'dx ! 'dy !
	%1 and? ( sw 'dx +! )
	%10 and? ( sw neg 'dx +! )
	%100 and? ( sh 'dy +! )
	%1000 and? ( sh neg 'dy +! )
	drop ;

:posmov | adr --
	@+ posdelta
	@+ msec swap -
	1.0 8.0 1000 *. /.
	*. 't0 !
	drop
	;

:llerp | a b -- r | a + t * (b - a) | t 0.0 .. 1.0
	over - t0 16 *>> + ;
:clerp | a b -- r | a + t * (b - a) | t 0.0 .. 1.0
	over - t0 cos abs 16 *>> + ;
:slerp | a b -- r | a + t * (b - a) | t 0.0 .. 1.0
	over - t0 sin abs 16 *>> + ;

:dx+ | x -- dx
	dup dx + llerp ;

:dy+ | y -- ny
	dup dy + llerp ;

:tbox | adr --
	>r
	r 9 2 << + posmov
	r@+ dx+ 'tx1 ! r@+ dy+ 'ty1 !
	r@+ dx+ 'tx2 ! r@+ dy+ 'ty2 !
	r@+ fillbox
	r@+ dup $ffff and swap 16 >> $ffff and boxpad
	r@+ dup 12 >> $f and swap $fff and setfont
	r@+ r@+ dup ink 24 >> boxprintn
	rdrop ;


:convboxp | adr --
	'tbox 'parts p!+ >r
	@+ grid2po
	tx1 r!+ ty1 r!+	tx2 r!+ ty2 r!+

	@+ r!+ | fondo

	@+
	dup 24 >> $ff and w2grid $ffff and 16 <<
	over 16 >> $ff and h2grid $ffff and
	or r!+ | pad

	dup 8 >> $f and 12 <<
	over $ff and 1+ h2grid $fff and
	or r!+ | font

	12 >> $f and 24 <<	| align
	swap @+ $ffffff and	| color
	rot or
	swap @+ 'mbox +	r!+	| text
	swap r!+

	%0010 r!+	| delta x y
	msec r!+
	rdrop	;

:convert2part
	'box ( box> <? )( convboxp ) drop ;


:loadscr | "" --
	plqload
	fullgrid
	'parts p.clear
	'anims p.clear
	convert2part
	;

:nextseq
	seqnow
	@+ dup $ffff and 'seqm + mprint loadscr
	16 >> $3 and 2 << drop |'tlist + @ exec

	0 'tnow !
	@+ 1000 *. 'ti !
	@+ 1000 *. ti + 'tw !
	@+ 1000 *. tw + 'to !
	seq> =? ( 'seq nip ) | inicio otra vez
	'seqnow !
	;

:backsis
	0 'tx1 ! 0 'ty1 ! sw 'tx2 ! sh 'ty2 !
	bmodo 28 << bcolor or fillbox
	| scr>xfb
	0 'tnow !
	msec 'tdelta !
	;

:partsis
	| xfbscr
	msec dup tdelta - 'tnow +! 'tdelta !
	'parts p.draw
	;


:main
	newseq
	nextseq
	show clrscr

		backsis
		partsis

		dumpseq

		'nextseq <f1>
		'exit >esc<
		;

:ini
	rerand
	mark
	alertamem
	512 'parts p.ini
	512 'anims p.ini
	here 'remem !	| memoria libre
	;

: ini main ;