| Convierte SVG font a spr
| PHREDA 2014
|---------------------------------------------
^r4/lib/gui.txt
^r4/lib/parse.txt
^r4/lib/trace.txt
^r4/lib/dlgfile.txt

#$start
#$end

|------------------ PARSE
:=p | s1 s2 -- 1/0
	( c@+ 1? )( rot c@+ rot - 1? ( 3drop 0 ; ) drop swap ) 3drop 1 ;

:findl | adr "texto" -- adr'/0
	( 2dup =p 0? )( drop swap 1+ dup c@ 32 <? ( 3drop 0 ; ) drop swap ) 2drop ;

:findc | 13 adr -- adr'
	( c@+ 1? )( pick2 =? ( drop nip ; ) drop ) nip nip ;

:find | adr "texto" -- adr'
	( 2dup =p 0? )( drop swap 1+ dup c@ 0? ( 3drop 0 ; ) drop swap ) 2drop ;

:nextline | adr -- adr'
	( c@+ 32 >=? )( drop ) 0? ( nip ; ) drop ;

|-------------------------
#colsvg
#svgx #svgy

#$spr

:,spr | nro --
	 $spr !+ '$spr ! ;

:getcolor | adr --
	$23 swap findc 0? ( drop ; ) | #
	str$>nro 'colsvg !
	;

|--------buffer----------
#yend #xend
#buffer )( $ffff
#buffer> 'buffer

:buff.ini
	'buffer 'buffer> ! ;

:,buff | x y t --
	>r swap r> buffer> !+ !+ !+ 'buffer> ! ;

:,line | x y --
	3 ,buff ;

:,op | x y --
	2dup 'yend ! 'xend !
	1 ,buff ;

:,cp | x y --
	2 ,buff ;

:,curve | x y --
	4 ,buff ;

:,cp2 | x y --
	9 ,buff ;

:,curve2 | x y --
	10 ,buff ;

:,last | --
	xend yend 3 ,buff ;

:,poly
	colsvg 4 << 0 $d ,buff ;

#xmax #ymax #xmin #ymin

#scale
#sx #sy

| a 14 bits
:buff.redim
	'buffer
	4+
	@+ dup 'xmax ! 'xmin !
	@+ dup 'ymax ! 'ymin !
	( buffer> <? )(
		@+ $a <=? ( drop
			@+ xmax >? ( dup 'xmax ! ) xmin <? ( dup 'xmin ! ) drop
			@+ ymax >? ( dup 'ymax ! ) ymin <? ( dup 'ymin ! ) drop
			)( drop 8 + )
		) drop

	xmax xmin - ymax ymin - max 1.0 swap /. 'scale !
	xmin xmax + 2/ neg 'sx !
	ymin ymax + 2/ neg 'sy !

	'buffer
	( buffer> <? )(
		@+ $a <=? ( drop
			dup @ sx + scale *. swap !+
			dup @ sy + scale *. swap !+
			)( drop 8 + )
		) drop
	;

:xy>o | x y -- d
	2* $3fff0 and swap
	15 << $fffc0000 and or ;

:buff.emit
	'buffer ( buffer> <? )( >r
		r@+
		$a <=? (
			r@+ r@+ xy>o swap or ,spr
		)(
			r@+ r@+ or or ,spr )
		r> ) drop
	0 ,spr ;

|----------
:getpoly | adr --
	$22 swap findc 0? ( drop ; ) | "
	getfnro 'svgx ! 1+ getfnro 'svgy ! trim
	svgx svgy ,op
	( dup c@ $22 <>? )( drop
		getfnro 'svgx ! 1+ getfnro 'svgy ! trim
		svgx svgy ,line
		) drop
	,last
	,poly
	;


|------------------------
#x1 #y1 #x2 #y2
:getvb | adr --
	getfnro 'x1 !
	getfnro 'y1 !
	getfnro 'x2 !
	getfnro 'y2 !
	x2 x1 - y2 y1 - dim
	x1 x2 + 2/ y1 y2 + 2/ pos
	;

|----------------------SVG path-----------------------
#sx $100 #sy $100
#x1 #y1
#x2 #y2
#x3 #y3

:moveto | adr -- adr' ; XY
	getfnro 'x1 !
	getfnro 'y1 !
	x1 y1 ,op ;
:movetor | adr -- adr' ; xy
	getfnro 'x1 +!
	getfnro 'y1 +!
	x1 y1 ,op ;

:lineto | adr -- adr' ; XY
	x1 y1 'y2 ! 'x2 !
	getfnro 'x1 !
	getfnro 'y1 !
	x1 y1 ,line ;
:linetor | adr -- adr' ; xy
	x1 y1 'y2 ! 'x2 !
	getfnro 'x1 +!
	getfnro 'y1 +!
	x1 y1 ,line ;
:hori | adr -- adr' ; X
	x1 y1 'y2 ! 'x2 !
	getfnro 'x1 !
	x1 y1 ,line ;
:horir | adr -- adr' ; X
	x1 y1 'y2 ! 'x2 !
	getfnro 'x1 +!
	x1 y1 ,line ;
:vert | adr -- adr' ; Y
	x1 y1 'y2 ! 'x2 !
	getfnro 'y1 !
	x1 y1 ,line ;
:vertr | adr -- adr' ; Y
	x1 y1 'y2 ! 'x2 !
	getfnro 'y1 +!
	x1 y1 ,line ;
:ccurve | adr -- adr' ; XYXYXY
	getfnro 'x3 !
	getfnro 'y3 !
	getfnro 'x2 !
	getfnro 'y2 !
	getfnro 'x1 !
	getfnro 'y1 !
	x3 y3 ,cp
	x2 y2 ,cp2
	x1 y1 ,curve2 ;
:ccurver | adr -- adr' ; XYXYXY
	getfnro x1 + 'x3 !
	getfnro y1 + 'y3 !
	getfnro x1 + 'x2 !
	getfnro y1 + 'y2 !
	getfnro x1 + 'x1 !
	getfnro y1 + 'y1 !
	x3 y3 ,cp
	x2 y2 ,cp2
	x1 y1 ,curve2
	dup c@ $40 <? ( drop ccurver ; ) drop
	;
:surve | adr -- adr' ; XYXY
	x1 2* x2 - 'x3 !
	y1 2* y2 - 'y3 !
	getfnro 'x2 !
	getfnro 'y2 !
	getfnro 'x1 !
	getfnro 'y1 !
	x3 y3 ,cp
	x2 y2 ,cp2
	x1 y1 ,curve2 ;
:surver | adr -- adr' ; XYXY
	x1 2* x2 - 'x3 !
	y1 2* y2 - 'y3 !
	getfnro x1 + 'x2 !
	getfnro y1 + 'y2 !
	getfnro x1 + 'x1 !
	getfnro y1 + 'y1 !
	x3 y3 ,cp
	x2 y2 ,cp2
	x1 y1 ,curve2 ;
:qurve | adr -- adr' ; XYXY
	getfnro 'x2 !
	getfnro 'y2 !
	getfnro 'x1 !
	getfnro 'y1 !
	x2 y2 ,cp
	x1 y1 ,curve ;
:qurver | adr -- adr' ; XYXY
	getfnro x1 + 'x2 !
	getfnro y1 + 'y2 !
	getfnro x1 + 'x1 !
	getfnro y1 + 'y1 !
	x2 y2 ,cp
	x1 y1 ,curve ;
:turve | adr -- adr' ; XY
	x1 2* x2 - 'x2 !
	y1 2* y2 - 'y2 !
	getfnro 'x1 !
	getfnro 'y1 !
	x2 y2 ,cp
	x1 y1 ,curve ;
:turver | adr -- adr' ; XY
	x1 2* x2 - 'x2 !
	y1 2* y2 - 'y2 !
	getfnro x1 + 'x1 !
	getfnro y1 + 'y1 !
	x2 y2 ,cp
	x1 y1 ,curve ;

:ellip | adr -- adr' ; XY
:ellipr
	getfnro 'x1 !
	getfnro 'y1 !
	getfnro 'x1 !
	getfnro 'y1 !
	getfnro 'x1 !
	getfnro 'y1 !
	;
:close | adr -- adr'
	,poly ;

:resolve | adr char -- adr'
	$4d =? ( drop moveto ; )	| M move
	$6d =? ( drop movetor ; )	| m move rel
	$4c =? ( drop lineto ; )	| L lineto
	$6c =? ( drop linetor ; )	| l lineto rel
	$48 =? ( drop hori ; )		| H
	$68 =? ( drop horir ; )		| h
	$56 =? ( drop vert ; )		| V
	$76 =? ( drop vertr ; )		| v
	$43 =? ( drop ccurve ; )	| C
	$63 =? ( drop ccurver ; )	| c
	$53 =? ( drop surve ; )		| S
	$73 =? ( drop surver ; )	| s
	$51 =? ( drop qurve ; ) 	| Q curve
	$71 =? ( drop qurver ; )	| q curve rel
	$54 =? ( drop turve ; )		| T
	$74 =? ( drop turver ; )	| t
	$41 =? ( drop ellip ; )		| A
	$61 =? ( drop ellipr ; )	| a
	$5a =? ( drop close ; )		| Z
	$7a =? ( drop close ; )		| z
	drop ;

:getpath | adr --
	3 +
	( trim
		c@+ 0? ( drop 1- ; )
		$22 <>? )( resolve ) drop  ;

|------------------------
:decodelimits | adr adrpoly -- adr
	dup "viewbox=" findl 1? ( getvb ) drop
	drop
	;

:decodepoly | adr adrpoly -- adr
	dup "fill=" findl 1? ( getcolor ) drop
	dup "points=" findl 1? ( getpoly ) drop
	drop
	;

:decodepath | adr adrpoly -- adr
	dup "fill=" findl 1? ( getcolor ) drop
	dup "d=" findl 1? ( getpath ) drop
	drop
	">" find
	;

:findline | adr -- adr
	dup "<svg " findl 1? ( decodelimits ; ) drop
	dup "<polygon " findl 1? ( decodepoly ; ) drop
	dup "<path " findl 1? ( decodepath ; ) drop
	;

:convertsvg | adr --
	buff.ini

	$end '$spr !
	( 1? )(
		findline
		nextline
		) drop

	buff.redim
	buff.emit
	;

|------------- carga
:cargasvg
	"media/svg/" dlgfileload 0? ( drop ; )
	$start swap load 0 swap !+ '$end !
	$start convertsvg
	;

|------------- muestra
:muestraspr
	0.8 %s dup dim 0 dup fpos
	$c0c0c0 ink gc.fbox
	gris 8 rgrilla
	$end nsprite
	;

:main
|	33
	show clrscr
|		dup "%d " print cr cr2

		cyan cr
		'cargasvg dup <f1> "F1-Load SVG" sp btnt
|		'savespr "SAVE" sp btnt

		muestraspr

		'exit >esc<
		cminiflecha ;

:me mark here dup '$start ! dup '$end ! '$spr ! 0 $spr ! ;

: me main
$end $spr over - "mem/notepad.spr" save
;
