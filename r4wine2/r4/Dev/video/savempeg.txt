| saveMPEG
| from http:\\jonolick.com
| traslate PHREDA 2017
|------------------------------------

:,32 dup 24 >> ,c dup 16 >> ,c
:,16 dup 8 >> ,c ,c ;

#buf
#cnt

:writeBits | count<<16|value --
	dup 16 >> cnt +				| tval cnt
	swap $ffff and 24 over - << buf or	| cnt buf
	( swap 8 >=? )(
		over 16 >> ,c
		8 - swap 8 << )
	'cnt ! 'buf ! ;

| Huffman tables
#HTDC_Y $30004 $20000 $20001 $30005 $30006 $4000e $5001e $6003e $7007e
#HTDC_C $20000 $20001 $20002 $30006 $4000e $5001e $6003e $7007e $800fe
#HTAC
$30006 $50008 $6000a $8000c $9004c $90042 $b0014 $d003a $d0030 $d0026 $d0020 $e0034 $e0032 $e0030 $e002e $f003e $f003e $f003a $f0038 $f0036 $f0034 $f0032 $f0030 $f002e $f002c $f002a $f0028 $f0026 $f0024 $f0022 $f0020 $100030 $10002e $10002c $10002a $100028 $100026 $100024 $100022 $100020
$40006 $7000c $9004a $b0018 $d0036 $e002c $e002a $10003e $10003c $10003a $100038 $100036 $100034 $100032 $110026 $110024 $110022 $110020 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$5000a $80008 $b0016 $d0028 $e0028 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$6000e $90048 $d0038 $e0026 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$6000c $b001e $d0024 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$7000e $b0012 $e0024 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$7000a $d003c $110028 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$70008 $d002a 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$8000e $d0022 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$8000a $e0022 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$9004e $e0020 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$90046 $110034 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$90044 $110032 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$90040 $110030 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$b001c $11002e 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$b001a $11002c 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$b0010 $11002a 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$d003e 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$d0034 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$d0032 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$d002e 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$d002c 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$e003e 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$e003c 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$e003a 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$e0038 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$e0036 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$11003e 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$11003c 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$11003a 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$110038 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
$110036 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

#s_quantTbl
0.0156 0.0056 0.0050 0.0048 0.0048 0.0059 0.0080 0.0133
0.0056 0.0041 0.0031 0.0032 0.0033 0.0040 0.0049 0.0088
0.0050 0.0031 0.0028 0.0030 0.0033 0.0036 0.0052 0.0091
0.0048 0.0035 0.0031 0.0033 0.0037 0.0040 0.0053 0.0096
0.0057 0.0035 0.0035 0.0037 0.0039 0.0045 0.0058 0.0094
0.0061 0.0042 0.0042 0.0042 0.0045 0.0051 0.0061 0.0099
0.0089 0.0062 0.0061 0.0058 0.0061 0.0064 0.0076 0.0121
0.0168 0.0113 0.0099 0.0101 0.0098 0.0103 0.0121 0.0198

#s_ZigZag
 0  1  5  6 14 15 27 28
 2  4  7 13 16 26 29 42
 3  8 12 17 25 30 41 43
 9 11 18 24 31 40 44 53
10 19 23 32 39 45 52 54
20 22 33 38 46 51 55 60
21 34 37 47 50 56 59 61
35 36 48 49 57 58 62 63

| DCT & quantization core
#d0 #d1 #d2 #d3 #d4 #d5 #d6 #d7
#t0 #t1 #t2 #t3 #t4 #t5 #t6 #t7
#t10 #t11 #t12 #t13

:@datacol | adrdata --
	'd0 >r @+ r!+ @+ r!+ @+ r!+ @+ r!+ @+ r!+ @+ r!+ @+ r!+ @ r> ! ;
:!datacol | adrdata --
	>r 'd0 @+ r!+ @+ r!+ @+ r!+ @+ r!+ @+ r!+ @+ r!+ @+ r!+ @ r> ! ;
:@datarow | adrdata --
	'd0 >r @+ r!+ 28 + @+ r!+ 28 + @+ r!+ 28 + @+ r!+ 28 + @+ r!+ 28 + @+ r!+ 28 + @+ r!+ 28 + @ r> ! ;
:!datarow | adrdata --
	>r 'd0 @+ r!+ 28 r+ @+ r!+ 28 r+ @+ r!+ 28 r+ @+ r!+ 28 r+ @+ r!+ 28 r+ @+ r!+ 28 r+ @+ r!+ 28 r+ @ r> ! ;

:dtc
	d0 d7 2dup + 't0 ! - 't7 !
	d1 d6 2dup + 't1 ! - 't6 !
	d2 d5 2dup + 't2 ! - 't5 !
	d3 d4 2dup + 't3 ! - 't4 !
	t0 t3 2dup + 't10 ! - 't13 !
	t1 t2 2dup + 't11 ! - 't12 !
	t10 t11 2dup + 'd0 ! - 'd4 !
	t13 t12 over + 0.7071 *.
	2dup + 'd2 ! - 'd6 !
	t5 t6 t7
	over + 't12 ! over + 't11 ! t4 + 't10 !
	t10 t12 - 0.3827 *.		| z5
	t10 0.5412 *. over +	| z5 z2
	t12 1.3066 *. rot +		| z2 z4
	t11 0.7071 *.			| z2 z4 z3
	t7 over + rot			| z2 z3 z11 z4
	2dup + 'd1 ! - 'd7 !	| z2 z3
	t7 swap - swap			| z2 z13
	2dup + 'd5 ! - 'd3 !
	;

:fDCTQuant | out data dbtbl -- |(data:Vector.<Number>, fdtbl:Vector.<Number>):Vector.<int>
	over 0 ( 8 <? )( swap
		dup @datacol dtc dup !datacol
		32 + swap 1+ ) 2drop
	over 0 ( 8 <? )( swap
		dup @datarow dtc dup !datarow
		4+ swap 1+ ) 2drop
	64 ( 1? )( 1- >r >r		| Quantize/descale the coefficients
		@+ r@+ * +? ( 0.5 + )( 0.5 - ) 16 >>
		rot !+ swap r> r> ) 4drop  ;


:processDU |  float A[64], const unsigned char htdc[9][2], int DC

	for(int dataOff=0; dataOff<64; dataOff+=8) {
		jo_DCT(A[dataOff], A[dataOff+1], A[dataOff+2], A[dataOff+3], A[dataOff+4], A[dataOff+5], A[dataOff+6], A[dataOff+7]);
	}
	for(int dataOff=0; dataOff<8; ++dataOff) {
		jo_DCT(A[dataOff], A[dataOff+8], A[dataOff+16], A[dataOff+24], A[dataOff+32], A[dataOff+40], A[dataOff+48], A[dataOff+56]);
	}
	int Q[64];
	for(int i=0; i<64; ++i) {
		float v = A[i]*s_jo_quantTbl[i];
		Q[s_jo_ZigZag[i]] = (int)(v < 0 ? ceilf(v - 0.5f) : floorf(v + 0.5f));
	}

	DC = Q[0] - DC;
	int aDC = DC < 0 ? -DC : DC;
	int size = 0;
	int tempval = aDC;
	while(tempval) {
		size++;
		tempval >>= 1;
	}
	writeBits(bits, htdc[size][0], htdc[size][1]);
	if(DC < 0) aDC ^= (1 << size) - 1;
	writeBits(bits, aDC, size);

	int endpos = 63;
	for(; (endpos>0)&&(Q[endpos]==0); --endpos) { /* do nothing */ }
	for(int i = 1; i <= endpos;) {
		int run = 0;
		while (Q[i]==0 && i<endpos) {
			++run;
			++i;
		}
		int AC = Q[i++];
		int aAC = AC < 0 ? -AC : AC;
		int code = 0, size = 0;
		if (run<32 && aAC<=40) {
			code = HTAC[run][aAC-1][0];
			size = HTAC[run][aAC-1][1];
			if (AC < 0) code += 1;
		}
		if(!size) {
			writeBits(bits, 1, 6);
			writeBits(bits, run, 6);
			if (AC < -127) {
				writeBits(bits, 128, 8);
			} else if(AC > 127) {
				writeBits(bits, 0, 8);
			}
			code = AC&255;
			size = 8;
		}
		writeBits(bits, code, size);
	}
	$20002 writeBits
	return Q[0];
}

#wf
#hf
#fps

#lastDCY 128
#lastDCCR 128
#lastDCCB 128

:setfps | fps -- code
    24 <=? ( $12 nip ; )
	25 <=? ( $13 nip ; )
	30 <=? ( $15 nip ; )
	50 <=? ( $16 nip ; )
	$18 nip ;

::mpegset | w h fps --
	setfps 'fps ! 'hf ! 'wf ! ;

::write_mpeg | --
	128 'lastDCY ! 128 'lastDCCR ! 128 'lastDCCB !
	| Sequence Header
	$000001B3 ,32
	| 12 bits for width, height
	hf wf
	dup 4 >> ,c $f and 4 << over 8 >> $f and or ,c ,c
	| aspect ratio, framerate
	fps ,c
	$FFFFE0A0 ,32
	$000001B8 ,32 $80080040 ,32 | GOP header
	$00000100 ,32 $000C0000 ,32 | PIC header
	$00000101 ,32 | Slice header
	$60010 writeBits

	for (int vblock=0; vblock<(height+15)/16; vblock++) {
		for (int hblock=0; hblock<(width+15)/16; hblock++) {
			$20003 writeBits

			float Y[256], CBx[256], CRx[256];
			for (int i=0; i<256; ++i) {
				int y = vblock*16+(i/16);
				int x = hblock*16+(i&15);
				x = x >= width ? width-1 : x;
				y = y >= height ? height-1 : y;
				const unsigned char *c = rgbx + y*width*4+x*4;
				float r = c[0], g = c[1], b = c[2];
                Y[i] = (0.299f*r + 0.587f*g + 0.114f*b) * (219.f/255) + 16;
                CBx[i] = (-0.299f*r - 0.587f*g + 0.886f*b) * (224.f/255) + 128;
                CRx[i] = (0.701f*r - 0.587f*g - 0.114f*b) * (224.f/255) + 128;
			}

			| Downsample Cb,Cr (420 format)
			float CB[64], CR[64];
			for (int i=0; i<64; ++i) {
				int j =(i&7)*2 + (i&56)*4;
				CB[i] = (CBx[j] + CBx[j+1] + CBx[j+16] + CBx[j+17]) * 0.25f;
				CR[i] = (CRx[j] + CRx[j+1] + CRx[j+16] + CRx[j+17]) * 0.25f;
			}

			for (int k1=0; k1<2; ++k1) {
				for (int k2=0; k2<2; ++k2) {
					float block[64];
					for (int i=0; i<64; i+=8) {
						int j = (i&7)+(i&56)*2 + k1*8*16 + k2*8;
						memcpy(block+i, Y+j, 8*sizeof(Y[0]));
					}
					lastDCY = jo_processDU(&bits, block, HTDC_Y, lastDCY);
				}
			}
			lastDCCB = jo_processDU(&bits, CB, HTDC_C, lastDCCB);
			lastDCCR = jo_processDU(&bits, CR, HTDC_C, lastDCCR);
		}
	}
	$70000 writeBits
	$000001b7 ,32
	;

|------------------