u64b gcd3(u64b u, u64b v)
{
	int shift;

	if (!u || !v) return u | v;

	shift = ffsq(u | v);
	u >>= ffsq(u);
		
	
	while (v)
	{
		v >>= ffsq(v);

		if (u < v)
		{
			v -= u;
		}
		else
		{
			u64b t = u - v;
			u = v;
			v = t;
		}
	}

	return u << shift;
}

:gcdbin | u v -- gcd
	0? ( drop ; ) swap 0? ( drop ; )
	2dup or clz		| v u shift
	swap dup clz >>	| v shift u
	rot				| shift u v
	( 1? )(
		dup clz >>		| shift u v
		over >? ( over - )( swap over - swap )
		) drop
	swap << ;