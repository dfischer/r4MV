| new frame buffer
| PHREDA 2010
|-------------
^r4/lib/math.txt
^r4/lib/rand.txt

#:paper 0

::cls paper framev sw sh * fill ;

::setxy	sw * + 2 << framev + >a ;
|::px!+	a!+ ;
|::px@	a@ ;
|::px+!	a+ ;

#rc #gc #bc
#sr #sg #sb

#copiadeg )( 24

::degrade! |  cant $000FFF --
    dup  $f00000 and dup 4 >> or
	over $000f00 and 8 << dup 4 << or
	dup 'rc ! - pick2 / 'sr !
	dup  $0f0000 and dup 4 << or
	over $0000f0 and 12 << dup 4 << or
	dup 'gc ! - pick2 / 'sg !
	dup  $00f000 and 4 << dup 4 << or
	swap $00000f and 16 << dup 4 << or
	dup 'bc ! - swap / 'sb ! ;

::degrade32! |  $ff $ff00 --
    over $ff0000 and
	over $ff0000 and
	dup 'rc ! - 8 >> 'sr !
    over $ff00 and 8 <<
	over $ff00 and 8 <<
	dup 'gc ! - 8 >> 'sg !
    $ff and 16 << swap
	$ff and 16 << swap
	dup 'bc ! - 8 >> 'sb ! ;


::deg@+ | -- color
	rc dup sr + 'rc ! $ff0000 and
	gc dup sg + 'gc ! 8 >> $ff00 and or
	bc dup sb + 'bc ! 16 >> $ff and or ;

::deg+!
	sr 'rc +!
	sg 'gc +!
	sb 'bc +! ;

::*deg | guarda
	'copiadeg 'rc 6 move ;

::deg* | restaura
	'rc 'copiadeg 6 move ;

::degnow | -- $fff000
	rc $ff0000 and
	gc 8 >> $ff00 and or
	bc 16 >> $ff and or ;

#xa #ya

::.at | x y --
	'ya ! 'xa ! ;

:.fline | w --
	xa ya setxy dup 'xa +!
	( 1? )( 1- ink@ a!+ ) drop ;

:.fdeg | w --
	xa ya setxy dup 'xa +!
	( 1? )( 1- deg@+ a!+ ) drop ;

::.fbox | w h --
	( 1? )( 1-
		xa ya setxy
		over ( 1? )( 1-
			ink@ a!+
			) drop
		1 'ya +!
		) 2drop ;

::.fboxdh | w h --
	( 1? )( 1-
		xa ya setxy
		deg@+ pick2
		( 1? )( 1-
			over a!+
			) 2drop
		1 'ya +!
		) 2drop ;

::.fboxdv | w h --
	*deg
	( 1? )( 1-
		deg*
		xa ya setxy
		over
		( 1? )( 1-
			deg@+ a!+
			) drop
		1 'ya +!
		) 2drop ;


::getpixel | x y -- c
	setxy a@ ;	|	vmem @ ;

::setpixel | c x y --
	setxy a!+ ;    |	vmem ! ;

::pix! | x y --
	setxy ink@ a!+ ;

|---- bitmap
::oscurecetodo
	0 0 setxy
	0 ( sh <? )( 1+
		0 ( sw <? )( 1+
			a@ 2/ $7f7f7f and | oscurece
			a!+
			) drop
		) drop
|	framev sw sh *  ( 1? )( 1- swap dup @ 2/ $7f7f7f and swap !+ swap )	2drop
	;

::bmnoise | ancho alto x y --
	( 2swap 1? )( 1-
		2over setxy
		over ( 1? )( 1- rand a!+ ) drop
		2swap 1+ )
	4drop ;

::bmnoiseb | ancho alto x y --
	setxy
	sw pick2 - rot rot | paso ancho alto
	( 1? )( 1-
		over ( 1? )( 1- rand8 a!+ ) drop
		pick2 a+
		)
	3drop ;

::rect | ancho alto x y --
	setxy
	sw pick2 - rot rot | paso ancho alto
	( 1? )( 1-
		over ( 1? )( 1- ink@ a!+ ) drop
		pick2 a+
		) 3drop ;


|--- mem video
|:vmem | x y -- addr
|	sw * +  2 << framev + ;
|	sw sh * <? ( +? ( 2 << framev + ; ) ) drop rdrop ;

::color50% | c1 c2 -- c
	$fefefe and swap $fefefe and + 2/ ;

::color25% | c1 c2 -- c
	$fefefe and swap $fefefe and over + 2/ + 2/ ;

::color33%  | c1 c2 -- c
	$555555 and swap $aaaaaa and or ;

::mix50 | ancho alto x y --
	setxy
	sw pick2 - rot rot | paso ancho alto
	( 1? )( 1-
		over ( 1? )( 1- a@ ink@ color50% a!+ ) drop
		pick2 a+
		) 3drop ;

#xi #yi
#hi #wi

:clip | w h x y -- x y
	pick2 over + sh >=? ( sh pick2 - 1- )( pick3 ) 'hi !
	drop rot drop
	-? ( dup 'hi +! neg 'yi ! 0 )( 0 'yi ! )
	swap | w y x
	pick2 over + sw >=? ( sw pick2 - 1- )( pick3 ) 'wi !
	drop rot drop
	-? ( dup 'wi +! neg 'xi ! 0 )( 0 'xi ! )
	swap ;

#colores $ffffff $cfcfcf

::drawalphagrid | w h x y --
	clip
	hi wi or -? ( 3drop ; ) drop
	setxy
	sw wi -
	hi ( 1? )( 1-
		wi ( 1? )( 1- |2dup xor dup 8 << or dup 8 << or
			2dup xor %100 and 'colores + @
			a!+ ) drop
		over a+
		) 2drop ;

|-------------------------------
:fpbox | color x2 y2 x1 y1 --
	2dup setxy
	rot swap - 1+ >r - 1+
	sw over - r> | cntx sum cnty
	( 1? )(
		pick2 ( 1? )( 1- pick4 a!+ ) drop
		over a+ 1- ) 4drop ;

:fpx | color xmin ymin xmax --
	pick2 - 1+ >r
	setxy r>
	( 1? )( over a!+ 1- ) 2drop ;

:fpy | color xmin ymin ymax --
	over - 1+ >r
	setxy sw 1- r>
	( 1? )( pick2 a!+ over a+ 1- ) 3drop ;

|--------------------------------
:2sort | x y -- max min
	over >? ( swap ) ;

:dot
	%10 and? ( 1 a+ ; )
	a@ not a!+ ;

:dotvline | x y1 y2 --
	2sort
	sh >=? ( 3drop ; ) 0 max
	swap -? ( 3drop ; ) sh 1- min
	over - 1+
	>r setxy r>
	( 1? )( 1- dot sw 1- a+ ) drop ;

:dothline | x1 x2 y --
	-? ( 3drop ; ) sh >=? ( 3drop ; )
	rot	rot 2sort
	sw >=? ( 3drop ; ) 0 max
	swap -? ( 3drop ; ) sw 1- min
	over - 1+
	swap rot setxy
	( 1? )( 1- dot	) drop ;

::dotbox | x1 y1 x2 y2
	pick3 pick3 pick2 dotvline
	over pick3 pick2 dotvline
	pick3 pick2 rot dothline
	swap dothline ;
