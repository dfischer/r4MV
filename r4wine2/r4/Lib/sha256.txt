| SHA256
| from sha256.c, Brad Conte
| 2017 PHREDA
|-------------
^r4/lib/gui.txt
^r4/lib/trace.txt

| need implementation for ROR  R>>
:ROTR2	dup 2 >> $3fffffff and swap 30 << or ;
:ROTR6	dup 6 >> $03ffffff and swap 26 << or ;
:ROTR7	dup 7 >> $01ffffff and swap 25 << or ;
:ROTR11	dup 11 >> $001fffff and swap 21 << or ;
:ROTR13 dup 13 >> $0007ffff and swap 19 << or ;
:ROTR17 dup 17 >> $00007fff and swap 15 << or ;
:ROTR18 dup 18 >> $00003fff and swap 14 << or ;
:ROTR19 dup 19 >> $00001fff and swap 13 << or ;
:ROTR22 dup 22 >> $000003ff and swap 10 << or ;
:ROTR25 dup 25 >> $0000007f and swap 7 << or ;

:CH |(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
	pick2 not and rot rot and xor ;
:MAJ |(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
	2dup and >r pick2 and rot rot and xor r> xor ;
:EP0 |(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
	dup ROTR2 over ROTR13 xor swap ROTR22 xor ;
:EP1 |(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
	dup ROTR6 over ROTR11 xor swap ROTR25 xor ;
:SIG0 |(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
	dup ROTR7 over ROTR18 xor swap 3 >> $1fffffff and xor ;
:SIG1 |(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))
	dup ROTR17 over ROTR19 xor swap 10 >> $003fffff and xor ;

#k
$428a2f98 $71374491 $b5c0fbcf $e9b5dba5 $3956c25b $59f111f1 $923f82a4 $ab1c5ed5
$d807aa98 $12835b01 $243185be $550c7dc3 $72be5d74 $80deb1fe $9bdc06a7 $c19bf174
$e49b69c1 $efbe4786 $0fc19dc6 $240ca1cc $2de92c6f $4a7484aa $5cb0a9dc $76f988da
$983e5152 $a831c66d $b00327c8 $bf597fc7 $c6e00bf3 $d5a79147 $06ca6351 $14292967
$27b70a85 $2e1b2138 $4d2c6dfc $53380d13 $650a7354 $766a0abb $81c2c92e $92722c85
$a2bfe8a1 $a81a664b $c24b8b70 $c76c51a3 $d192e819 $d6990624 $f40e3585 $106aa070
$19a4c116 $1e376c08 $2748774c $34b0bcb5 $391c0cb3 $4ed8aa4a $5b9cca4f $682e6ff3
$748f82ee $78a5636f $84c87814 $8cc70208 $90befffa $a4506ceb $bef9a3f7 $c67178f2

#data )( 64
#datalen
#bitlen
#state )( 32
#m )( 256

:sha256_init
	0 'datalen !
	0 'bitlen !
	'state >r
	$6a09e667 r!+
	$bb67ae85 r!+
	$3c6ef372 r!+
	$a54ff53a r!+
	$510e527f r!+
	$9b05688c r!+
	$1f83d9ab r!+
	$5be0cd19 r> ! ;

:]m 2 << 'm + @ ;
:]k 2 << 'k + @ ;

#a #b #c #d #e #f #g #h #t1 #t2

:bswap
	dup $ff and 24 << over $ff00 and 8 << or over $ff0000 and 8 >> or swap 24 >> $ff and or ;

:ct
	dup ]m over ]k + e f g CH + e EP1 + h + 't1 !
	a b c MAJ a EP0 + 't2 ! ;

:sha256_transform | --
	'm >r
	'data
	0 ( 16 <? )( swap
		@+ bswap
		r!+ swap 1+ ) nip
	( 64 <? )(
		dup 2 - ]m SIG1 over 7 - ]m + over 15 - ]m SIG0 + over 16 - ]m +
		r!+ 1+ ) drop
	rdrop

	'state >r
	r@+ 'a ! r@+ 'b ! r@+ 'c ! r@+ 'd !
	r@+ 'e ! r@+ 'f ! r@+ 'g ! r> @ 'h !
	0 ( 64 <? )(
		ct
		g 'h ! f 'g ! e 'f !
		t1 d over + 'e !
		c 'd ! b 'c ! a 'b !
		t2 + 'a !
		1+ ) drop
	'state a over +!
	4+ b over +! 4+ c over +! 4+ d over +!
	4+ e over +! 4+ f over +! 4+ g over +!
	4+ h swap +!
	;

:sha256_update | data len --
	( 64 >? )(
		'data pick2 64 cmove
		sha256_transform
		1 'bitlen +!
		64 - swap 64 + swap )
	'data rot pick2 cmove
	'datalen !
	;

:sha256_final
	datalen
	'data over +
	$80 swap c!+
	swap 1+
	56 <? (
		( 56 <? )( 0 rot c!+ swap 1+ ) drop
	)(
		( 64 <? )( 0 rot c!+ swap 1+ ) 2drop
		sha256_transform
		'data 14 ( 1? )( 1- 0 rot !+ swap ) drop
	)
	| bitlen 9 << + datalen 3 << $1f8
	bitlen	| adr bitlen
	dup 47 >> rot c!+	| bitlen adr
	over 39 >> swap c!+	| 0
	over 31 >> 1 and swap c!+
	over 23 >> swap c!+
	over 15 >> swap c!+
	over 7 >> swap c!+
	swap 1 << datalen 4 >> 1 and or swap c!+
	datalen 3 << swap c!

	sha256_transform
	'state >r
	8 ( 1? )( 1- r @ bswap r!+ ) drop rdrop
	;


:sha256
	sha256_init
	count sha256_update
	sha256_final
	;

:sha256test | adr -- 0/1
	>r 'state
	8 ( 1? )( 1- swap @+ r@+
		<>? ( 3drop rdrop 0 ; )
		drop swap )
	2drop rdrop 1 ;

|---- test
#r1 ( $ba $78 $16 $bf $8f $01 $cf $ea $41 $41 $40 $de $5d $ae $22 $23
	$b0 $03 $61 $a3 $96 $17 $7a $9c $b4 $10 $ff $61 $f2 $00 $15 $ad )
#r2	( $24 $8d $6a $61 $d2 $06 $38 $b8 $e5 $c0 $26 $93 $0c $3e $60 $39
	$a3 $3c $e4 $59 $64 $ff $21 $67 $f6 $ec $ed $d4 $19 $db $06 $c1 )

:test | dir str --
	dup print cr
	sha256
	sha256test
	" %d " print cr
	;

:testsha
	'r1 "abc" test
	'r2 "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" test
	;

:main
	show clrscr
		testsha
		'exit >esc<
		;

: main ;