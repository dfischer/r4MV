| r4-com4.txt  Compiler V4
| PHREDA 2017
|---------------------------------------
| 2da idea en compilador..
| 1ro: transforma codigo en plain.txt
| + Sin includes
| + Sin exportadas ::->:  ##->#
| + Sin Anonimas
| + Reemplaza Ctes
| + Copia Inlines
| + Calcula Ctes

^r4/lib/gui.txt
^r4/lib/trace.txt

^r4/system/mem-ed.txt

^r4/Compiler/r4-token.txt

^r4/Compiler/r4-asmdata.txt
^r4/Compiler/r4-asmcode.txt

|-- nombre a nro
|:nro>dicn   8 >> "w%h" mprint ;		| w<nro palabra>
:nro>dicn   8 >> 4 << 'indicepal + @ "%w" mprint ; | nombre

|----------------
:cpycad | adr --
	( c@+ 1? )( 34 =? ( dup ,c ) ,c ) 2drop ;

:coldefw ":" ,s nro>dicn ,s ;
:coldefv "#" ,s nro>dicn ,s ;
:colit	tok>cte "$%h" ,print ;
:colits	34 ,c tok>mem cpycad 34 ,c ;

:colwor
:colvar
	nro>dicn ,s ;
:coldwo
:coldva
	"'" ,s nro>dicn ,s ;

#codei 0 coldefw coldefw coldefv coldefv 0 0 colit colit colit colit colits colwor colvar coldwo coldva

::nro>macro | n -- s
	16 - macroname ;

:,token | a -- a.
	@+ dup $ff and
:,tokenp | n t --
	16 <? ( 2 << 'codei + @ exec ; ) nip
	nro>macro ,s ;

|--- Variables
:esvariable | nro --
	dup dic>inf @
	$4 nand? ( drop ; ) drop | constante
	dup dic>str @ "#%w" ,print
	dup dic>tok @ 4+
	( @+ dup $ff and
		5 <? ( 0 nip ) | corta con defv
		1? )( 	 | dirv n c
		,sp
		16 <? ( 2 << 'codei + @ exec )( nip nro>macro ,s )
		)
	3drop ,cr ;

|--- Accion
#nroanon 0

#totoken
#niva	| nivel de anonimas

#niv )( 1024
#niv> 'niv
:+niv	niv> c!+ 'niv> ! ;
:-niv   'niv 'niv> ! ;

#anonind )( 256
#anonind> 'anonind
:+ind 	anonind> !+ 'anonind> ! ;
:-ind	'anonind 'anonind> ! ;

#anons )( 128
#anons> 'anons
:>aa anons> !+ 'anons> ! ;
:aa> -4 'anons> +! anons> @ ;
:-aa 'anons 'anons> ! ;
:aa# anons> 'anons - 2 >> ;

#buffaux )( 8192
#buffaux> 'buffaux
:+buff	buffaux> !+ 'buffaux> ! ;
:-buff	'buffaux 'buffaux> ! ;

:es[
	1 'niva +!
	niv> +ind
	nroanon dup >aa
	8 << 20 or pick2 4 - ! | graba en token
	1 'nroanon +!
	;
:es]
	-1 'niva +!
	aa> 8 << 21 or pick2 4 - ! | graba en token
	;

:everyword | adr rtoken -- adr
	20 =? ( es[ )
	21 =? ( es] )
	drop
	niva +niv
	;

:marcaniveles | nro --
	-aa -niv -ind
	0 'niva !
	dup dic>tok @ dup 'totoken  !
	swap dic>len@
	( 1? )( 1-
		swap @+ $ff and
		everyword
		swap ) 2drop
	-1 niv> c! ;

:genCTE
	,cte 8 << 7 or ;

|------------------------
:buscacte
	dup 8 >> dic>inf @
	$4 and? ( drop +buff ; ) drop
	8 >> dic>tok @  | token de variable

	4+ @ dup $ff and
	5 <? ( 2drop 0 genCTE +buff ; ) | caso #cte #var
	| 11 =? () | #v "hola"
	12 =? ( 14 nip ) 14 =? ( drop $fffffff0 and 14 or +buff ; ) | caso #cte 'word
	13 =? ( 15 nip ) 15 =? ( drop $fffffff0 and 15 or +buff ; ) | caso #cte 'var
	drop

	tok>cte genCTE	| caso #cte 4
	+buff ;

|------------------------
:buscainline
	dup 8 >> dic>inf @
	$100 nand? ( drop +buff ; ) drop
	8 >>
	dup dic>tok @
	swap dic>len@ 1-
	( 1? )( 1- swap @+
		dup $ff and
		12 =? ( drop buscainline )(
			13 =? ( drop buscacte )(
				drop +buff ) )
		swap ) 2drop ;


|--- optimiza
:aa1@ | adr+ -- adr- a
	4 - dup dup 4+ buffaux> over - 2 >> move | d s c
	-4 'buffaux> +!
	aa> ;

:aa2@ | adr+ -- adr- a b
	8 - dup dup 8 + buffaux> over - 2 >> move | d s c
	-8 'buffaux> +!
	aa> aa> swap ;

:aa3@ | adr+ -- adr- a b c
	12 - dup dup 12 + buffaux> over - 2 >> move | d s c
	-12 'buffaux> +!
	aa> aa> aa> rot rot swap ;

:aa1! | adr- v -- adr-
	dup >aa genCTE over 4 - ! ;

:aa2@! | adr+ -- adr- a b
	4 - dup dup 4 + buffaux> over - 2 >> move | d s c
	-4 'buffaux> +!
	aa> aa> swap ;

:aa2! | adr- a b -- adr-
	swap dup >aa genCTE pick2 8 - !
	dup >aa genCTE over 4 - ! ;

| adr+ val -- adr+
:oAND	| ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ AND aa1! ;
:oOR    | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ OR aa1! ;
:oXOR   | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ XOR aa1! ;
:oNOT   | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ NOT aa1! ;
:o+		| ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ + aa1! ;
:o-     | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ - aa1! ;
:o*     | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ * aa1! ;
:o/     | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ / aa1! ;
:o*/    | abc -- d
	aa# 3 <? ( 2drop -aa ; ) 2drop aa3@ */ aa1! ;
:o*>>   | abc -- d
	aa# 3 <? ( 2drop -aa ; ) 2drop aa3@ *>> aa1! ;
:o/MOD  | ab -- cd
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@! /MOD aa2! ;
:oMOD   | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ MOD aa1! ;
:oABS   | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ ABS aa1! ;
:oSQRT	| a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ SQRT aa1! ;
:oCLZ	| a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ CLZ aa1! ;
:o<</	| abc -- d
	aa# 3 <? ( 2drop -aa ; ) 2drop aa3@ <</ aa1! ;
:oNEG   | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ NEG aa1! ;
:o1+    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 1+ aa1! ;
:o4+    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 4+ aa1! ;
:o1-    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 1- aa1! ;
:o2/    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 2/ aa1! ;
:o2*    | a -- b
	aa# 1 <? ( 2drop -aa ; ) 2drop aa1@ 2* aa1! ;
:o<<    | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ << aa1! ;
:o>>    | ab -- c
	aa# 2 <? ( 2drop -aa ; ) 2drop aa2@ >> aa1! ;

#optim oAND	oOR oXOR oNOT o+ o- o* o/ o*/ o*>> o/MOD oMOD oABS oSQRT oCLZ o<</ oNEG o1+ o4+ o1- o2/ o2* o<< o>>

:optN | adr+ val tok -- adr+
	$39 - 2 << 'optim + @ exec ;

:addN | adr+ val tok -- adr+
	drop tok>cte >aa ;

:untoken | adr+ val tok -- adr+
	7 >=? ( 10 <=? ( addN ; ) )		| numero
	$39 >=? ( $50 <=? ( optN ; ) )	| operacion
	2drop -aa
	;

|--- imprime de buffer
:buffp
	5 <? ( 2drop ; )
	20 =? ( drop 8 >> ":_aa%h" ,print ; )
	21 =? ( drop 8 >> " '_aa%h" ,print ; )
	,sp ,tokenp
	;

:+buffer | adr -- adr++
	@+ dup $ff and

	5 <? ( 2drop ; )	| quita :def

	12 =? ( drop buscainline ; )
	13 =? ( drop buscacte ; )
	drop +buff ;

|--- copy y genera
:copynivl | lugarniv --
	dup 'niv - 2 << totoken + | niv tok
	over c@
:copynivr | lugarniv tok v
	-buff
	swap rot | niv@ tok niv
	( c@+ pick3 >=? )( | mismo nivel o mayor
		pick3 >? ( drop swap 4+ )( drop swap +buffer )
		swap ) 4drop
	|--- optimiza buffer
	'buffaux ( buffaux> <? )(
		@+ dup $ff and untoken
		) drop

	|--- descarga buffer
	'buffaux ( buffaux> <? )(
		@+ dup $ff and
|		1 =? ( 3drop ,cr ; ) |------ palabra sin ;
		buffp
		) drop
	,cr
	;

|-------------------
:,ndef
	dup dic>str @
	dup c@ $3A =? ( drop "%w" ,print ; ) drop
	":%w" ,print ;

:escodigo | nro --
	dup dic>inf @
	$100 and? ( drop ; )
	drop | inline

	dup marcaniveles
	|-- generar anonimos
	anonind> ( 'anonind >? )( 4 -
		dup @ copynivl
		) drop
	|-- genera principal
	dup ,ndef
	'niv totoken 0 copynivr
	;

:gencodigo | nro --
	dup dic>call@ 0? ( drop ; ) drop
	dup dic>inf @
	1 and? ( drop esvariable ; )
	drop escodigo ;

|------------------------------------
:makeplain
	0 'nroanon !
	mark
	"| r4com4 :" ,s 'ed.nombre ,s ,cr
	cntwords "| all w:%d " ,print
	cntuwords cntuvars " used v:%d w:%d " ,print ,cr
	cnttokens "| tokens:%d" ,print ,cr
	"|-------" ,s ,cr
	0 ( cntwords <? )( gencodigo 1+ ) drop
	"r4/compiler/plain.txt" savemem
	empty
	;

|------------------------------------
:compileData
	mark
	";---:r4 compiler data.asm" ,ln
	,generateDATA
    0 ,c
|	"r4asm/data.asm"
	"r4/compiler/data.asm"
	savemem
	empty ;

:compileCode
	mark
	iniCODE
	mark
	";---:r4 compiler code.asm" ,ln
	,generateCODE
	0 ,c
|	"r4asm/code.asm"
	"r4/compiler/code.asm"
	savemem
	empty 
	empty ;

:error
	show clrscr
		"R4 Error" print cr cr
		errormsg print cr
		poserror "%l" print cr
		'exit >esc<
		;
|------------------------------------
:main
	ed.load

|..... generate plain
	mark
	'ed.nombre tokenasm
	1? ( error )
	drop

	tokenpostusa
	makeplain
	empty

|..... generate real code
	mark
	"r4/compiler/plain.txt" tokenfile
	1? ( error )
	drop

	tokenpostusa
	compileData
	compileCode
	empty
	;

: mark main ;