| 2017 PHEDA
|-----------------
^r4/lib/gui.txt
^r4/lib/part16.txt
^r4/lib/plqlib.txt
^r4/lib/loadjpg.txt
^r4/lib/loadpng.txt
^r4/lib/loadbmp.txt
^r4/rtv/fx.spr

^r4/rtv/placa.txt


#fileini "atv/urgente.txt"
#filecon "atv/consultorios.txt"
#foldspo "atv/videos/"
#fileate "rtv/template/medicos.txt"
#folppla "atv/placas/"
#foldcli "atv/videos/clip"

#pturnos "atv/placas/turnos.txt"

#grilla
1 'pturnos 0 0
|1 'fileini 0 0
|1 'filecon 0 0
|2 'foldspo 0 0
|1 'fileate 0 0
|3 'folppla 0 0
|2 'foldcli 0 0
0

#grilla> 'grilla
#finclip 0	| 1 cuando termina placa
#timeev		| vector de actualizacion

#rehere
#rerehere

|--------------------------
#xcam #ycam #zcam 2.0
#rxcam #rycam #rzcam
#objs 0 0
#fx 0 0

|------------------- OS DEp ---------------------
:FNAME | adr -- adrname
|WIN|	44 +
|AND|	19 +
	;

:FDIR? | adr -- 1/0
|WIN|	@ $10
|AND|	18 + c@ 4
	=? ( 1 )( 0 ) nip ;

|------------------------------------------------
:addfile | adr --
	dup FDIR? 1? ( 2drop ; ) drop
	FNAME here strcpyl 'here ! ;

:getfilenames | path -- files
	here swap
	ffirst drop fnext drop | quita . y ..
	( fnext 1? )( addfile ) drop
	0 ,c ;

|------------------------------------------------
#checkstr

:atencion
	mark
	"C|115484|20170506|ALFARO, YAMIL ADRIAN|ARIAS, NELSON LEOPOLDO|OFTALMOLOGO" ,s
	,cr
	0 ,c
	"c:/rtv/interface/turnero.txt" savemem
	empty
	;

:eventocheck | -- 0/dir
	here dup "c:/rtv/interface/turnero.txt" load
	over =? ( 2drop 0 ; )
    0 0 "c:/rtv/interface/turnero.txt" save
    0 swap c! dup 'checkstr ! ;

|:turnocheck
|	eventocheck 0? ( drop ; )
|	'checkstr !
|	;

|-----------------------------------------------
#fnvideo
#phvideo

:playvideo
	fnvideo phvideo
	"atv/ffplay -fs -autoexit -loglevel quiet ""%s%s""" mprint
	system drop ;

:timevideo
	-1 system -1 =? ( 1 'finclip ! ) drop
|	checkstr 1? ( 0 system drop ; ) drop
	;

:prevideo
|	resetplaca
	0 paper cls >XFB redraw
	playvideo
	'timevideo 'timeev !
	;

|-------------------------------------------
:2color dup $f0f0f0 and dup 4 >> or swap $f0f0f and dup 4 << or ;
:to3d 0 project3d ;
:bfill
	tx1 ty1 to3d 2dup op
	tx2 ty1 to3d pline
	tx2 ty2 to3d pline
	tx1 ty2 to3d pline pline
	poli ;

:f1	ink bfill ;			| solido
:f2	ink bfill ;			| imagen?
:f3 2color fcol tx1 ty2 to3d fcen 1.0 tx2 tx1 to3d - 1 max / 0 fmat lfill bfill sfill ;
:f4 2color fcol tx1 ty2 to3d fcen 0 1.0 ty2 ty1 to3d - 1 max / fmat lfill bfill sfill ;
:f5 2color fcol tx1 ty1 to3d fcen 0.5 tx2 tx1 to3d - 1 max / 0.5 ty2 ty1 to3d - 1 max / neg fmat lfill bfill sfill ;
:f6 2color fcol tx1 ty2 to3d fcen 0.5 tx2 tx1 to3d - 1 max / 0.5 ty2 ty1 to3d - 1 max / fmat lfill bfill sfill ;
:f0 drop ;	| auxiliar

#lbfill f0 f1 f2 f3 f4 f5 f6 f0

:3dfillbox | nro --
	dup 28 >> 7 and 2 << 'lbfill + @ exec ;

:fillbox3d | x y x2 y2 --
	2over to3d op
	pick3 over to3d pline
	2dup to3d pline
	drop over to3d pline
	to3d pline
	poli ;

|-------------------------------------------
:stsprite
	>r
	mpush
	r@+ r@+ 0 mtransi
	r@+ 1? ( mrotxi )( drop )
	r@+ 1? ( mrotyi )( drop )
	r@+ 1? ( mrotzi )( drop )
	r@+ dup dup mscalei
	r@+ 3dnsprite
	rdrop
	mpop
	;

:+sprite | 'spr size x y --
	'stsprite 'objs p!+ >r
	swap r!+ r!+		| x y
	0 0 0 r!+ r!+ r!+	| rx ry rz
	r!+					| s
	r!+					| sprite
	rdrop ;

:sprite.n | nro -- spr
	6 << 'objs 4+ @ + ;

:nxy.sprite | x y nro --
	sprite.n 4+ >r swap r!+ r!+ rdrop ;

:xy.sprite | x y obj --
	4+ >r swap r!+ r!+ rdrop ;

|---------- animadores
#deltat
#prevt
#t0

:itime
	msec 'prevt ! 0 'deltat ! ;

:dtime
	msec dup prevt - 'deltat ! 'prevt ! ;

:llerp | a b -- r | a + t * (b - a) | t 0.0 .. 1.0
	over - t0 16 *>> + ;
:clerp | a b -- r | a + t * (b - a) | t 0.0 .. 1.0
	over - t0 cos abs 16 *>> + ;
:slerp | a b -- r | a + t * (b - a) | t 0.0 .. 1.0
	over - t0 sin abs 16 *>> + ;


:movlinea
	>r
	r@+ deltat + dup r 4 - !
	16 << r@+ / 1.0 min 't0 !
	r@+
	4+ r@+ r@+ llerp over !	| x
	4+ r@+ r@+ llerp swap !	| y
	rdrop
	t0 1.0 - 1? ( drop ; )
	;

:+linea | xf yf obj time --
	'movlinea 'objs p!+ >r
	0 r!+ r!+	| 0 tmax
	dup r!+		| obj
	| xf yf obj
	4+ dup @ r!+ rot r!+
	4+ @ r!+ r!+
	rdrop
	;

|-------------------------------------------
:stlogo
	>r
	mpush
	r@+ r@+ r@+ mtransi
|	0.0008 r +!
	r@+ 1? ( mrotxi )( drop )
|	0.01 r +!
	r@+ 1? ( mrotyi )( drop )
	r@+ 1? ( mrotzi )( drop )
	'logoatv 3dnsprite
	rdrop
	mpop ;

:+logo
	'stlogo 'objs p!+ >r
 	2.8 r!+ -1.5 r!+ 2.8 r!+
 	0 0 0 r!+ r!+ r!+
 	rdrop
	;

|-------------------------------------------
:timex
	>r
	r@+ deltat + dup r 4 - !
	r@+ >=? ( drop r> @ exec 0 ; )
	drop
	rdrop ;

:+time | 'exec tiempo --
	'timex 'fx p!+ >r
	0 r!+ r!+ r!+
	rdrop ;

|-------------------------------------------
:xprints | "" --
	ccx ccy ink@
	0 ink
	0.005 dup +atxy
	pick3 ( c@+ 1? )( emitf ) 2drop
	ink atxy
	( c@+ 1? )( emitf ) 2drop
	;

:xprintn | "" --
	( c@+ 1? )( emitf ) 2drop ;

:xbox | x1 y1 x2 y2 --
	2over to3d 2dup >r >r op
	pick3 over to3d pline
	over swap to3d pline
	swap to3d pline drop
	r> r> pline
	gris poli ;

:xprintb | "" --
	ink@ >r
	sizeprint
	ccx ccy rot pick2 + cch pick2 + xbox
	r> ink
	( c@+ 1? )( emitf ) 2drop ;

|-------- dibuja objetos estaticos
| texto -- color x y fnt size "texto"
:t0	8 >> ink
	>r
	r@+ r@+ atxy
	r@+ r@+ setfont3d
	r> @ xprintn ;

| caja -- color x y x y
:t1 8 >> ink
	>r
	r@+ r@+ r@+ r@+ fillbox3d
	rdrop ;

:t2
:t3
:t4
:t5
:t6
:t7
:t8 2drop ;

| imagen
| sprite
| video
| fx

#ldraw t0 t1 t2 t3 t4 t5 t6 t7 t8 t8 t8 t8 t8 t8 t8 t8

:drawbox
	@+ dup $f and 2 << 'ldraw + @ exec ;

:drawpant | adr --
	0 0 pos 4.0 2.0 dim home
	@+ swap @ swap
	( over <? )(
		dup drawbox
		32 + ) 2drop ;

|-----------------------------
:otexto
	>r r@+
	mpush
	r@+ r@+ setfont3d
	r@+ r@+ r@+ mtransi
|	0.02 r +!
	r@+ 1? ( mrotxi )( drop )
	r@+ 1? ( mrotyi )( drop )
	r@+ 1? ( mrotzi )( drop )
	r@+ ink
	r@+ r@+ atxy
	xprintn
	rdrop
	mpop ;

#pw
:+texto | color x y font size "" --
	'otexto 'objs p!+ >r
	pick2 pick2 swap setfont3d
	sizeprint 'pw !
	r!+				| ""
	r!+	r!+			| font size
	pw 2/ + r!+ r!+ 0 r!+	| x y z
	0 r!+ 0 r!+ 0 r!+		| rx ry rz
	r!+						| ink
	pw 2/ neg r!+
	cch neg 2/ r!+          | atxy
	rdrop ;


|--- caja
:obox
	>r r@+ r@+ r@+ r@+
	r@+ ink
    fillbox3d
    rdrop ;

:+box	| color x1 y1 x2 y3 --
	'obox 'objs p!+ >r
	r!+ r!+ r!+ r!+ r!+
	rdrop ;

|------ inicia objetos de animacion
| texto -- color x y fnt size "texto"
:t0	8 >>
	swap >r
	r@+ r@+ swap
	r@+ r@+ swap
	r> @ +texto ;

| caja -- color x y x y
:t1 8 >>
	swap >r
	r@+ r@+ swap
	r@+ r@+ swap
	+box
	rdrop ;

:t2
:t3
:t4
:t5
:t6
:t7
:t8 2drop ;

#lidraw t0 t1 t2 t3 t4 t5 t6 t7 t8 t8 t8 t8 t8 t8 t8 t8

:inidrawbox
	@+ dup $f and 2 << 'lidraw + @ exec ;

:inidrawpant | adr --
	'objs p.clear
|	+logo
	@+ swap @ swap
	( over <? )(
		dup inidrawbox
		32 + ) 2drop ;

|---------------------------------------
:freelook
	xymouse
	sh 2/ - 7 << swap
	sw 2/ - neg 7 << swap
	neg mrotx
	mroty ;

:nextdraw
|	4 'nplaca +!
|	4 'placanow +!

|	nplaca inidrawpant

|	placanow @ 0? ( 1 'finclip ! drop ; )
    'nextdraw over $ffffff and
	+time
	drop
	;

:timeplaca
	omode
	rxcam 1? ( mrotxi )( drop )
	rycam 1? ( mrotyi )( drop )
	rzcam 1? ( mrotzi )( drop )
	xcam ycam zcam mtrans
|	nplaca drawpant
	dtime
	'fx p.draw
	'objs p.draw
	;

:preplaca
|	cfondo paper
|	fondo 1? ( 0 0 sw sh fondo img.drawsize )( cls )
|	drop
	>xfb
	itime

|	'placas 'nplaca !
|	'placast 'placanow !

|	nplaca inidrawpant
|
|	placanow @
|    'nextdraw over $ffffff and
|	+time
|	drop
	'timeplaca 'timeev !
	;


|----- recarga carpetas
:m1	;
:m2 dup @+ getfilenames here rot !+ ! ;
:m3 dup @+ getfilenames here rot !+ ! ;

#modocarga 0 m1 m2 m3

:cargagrilla
	rehere 'here !
	'grilla 'grilla> !
	0 'finclip !
	'grilla ( @+ 1? )(
		$f and 2 << 'modocarga + @ exec
		12 + ) 2drop
	here 'rerehere !
	0 'checkstr !
	;

|----- prepara clip
:m1	| template
|	resetplaca
|	@ loadparse
|	preplaca
	;
:m2	| videos
	dup 4 - >r
	@+ 'phvideo !
	@+ swap @ r @ 8 >> n>>0 | last act
	dup 'fnvideo !
	>>0 4+ >? ( r @ $100 + )( r @ $ff and ) nip
	r> !
	prevideo
	;
:m3 | placas
	drop ;

#modoinic 0 m1 m2 m3

:eligeclip
	rerehere 'here !
	grilla> @+ $f and 2 << 'modoinic + @ exec
	grilla> 16 +
	dup @ 0? ( 2drop 'grilla )( drop )
	'grilla> ! ;

|------------------------------------
:m1	| adr -- adr
	"cartel: " print
	dup @ print cr ;

:m2	| adr -- adr
	"videos: " print cr
	dup 4+ @+ 1- swap @
	( over <? )( "*" print
		dup print cr
		>>0 ) 2drop
	cr ;

:m3
	"placas: " print cr
	dup 4+ @+ 1- swap @
	( over <? )( "*" print
		dup print cr
		>>0 ) 2drop
	cr ;

#modoelige 0 m1 m2 m3

:dumpobj | adr
	'grilla ( @+ 1? )(
		$f and 2 << 'modoelige + @ exec
		12 + ) 2drop ;

:reboot
	cargagrilla
	show clrscr
		fonti2 verde
		"AbelTV" print cr
		fonti blanco
		dumpobj
		'exit >esc<
		;


|------------------------------------
:proximaplaca
	0 'finclip !
	eligeclip
	;


:addturno
	;

:showturno
	0 system drop
	0 'checkstr !
|	resetplaca
|	"atv/urgente.txt" loadparse
	preplaca
	show xfb>scr
		timeev exec

		blanco checkstr 1? ( print )( drop )

		eventocheck 1? ( addturno ) drop
		finclip 1? ( exit proximaplaca ) drop

        'atencion <f1>
		'exit >esc<

		cminiflecha ;

:main
	33
	cargagrilla |	reboot
	eligeclip

	show30 xfb>scr
|		fonti azul dup "%d" print

		timeev exec
		eventocheck 1? ( showturno ) drop
		finclip 1? ( proximaplaca ) drop

		[ 0 system drop ; ] <f2>
        'atencion <f1>
		'exit >esc<

		cminiflecha ;

:memoria
	mark
	here 'rehere !
	;

: memoria main ;
