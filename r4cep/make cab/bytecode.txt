| Interprete de bytecodes
^diccionario.txt

#hola "" #msgerror 'hola

#dato )( 8192 | 8k de datos
#dato> 'dato
#prog )( 8192 | 8k de programa
#prog> 'prog

|--- Pilas
#PSP )( 1024 
#RSP )( 1024
#IP 0	#TOS 0	#NOS 'PSP  #RTOS 'RSP
		
|--Pila
:iDUP	4 'NOS +! TOS NOS ! ;
:iDROP	NOS @ 'TOS !
:iNIP	-4 'NOS +! ;
:i2DROP	NOS 4 - @ 'TOS ! -8 'NOS +! ;
:i3DROP	NOS 8 - @ 'TOS ! -12 'NOS +! ;
:i4DROP	NOS 12 - @ 'TOS ! -16 'NOS +! ;
:iSWAP  NOS @ TOS 'NOS ! 'TOS ! ;
:iROT	TOS NOS 4 - @ 'TOS ! NOS @ NOS 4 - ! NOS ! ;
:iOVER	iDUP NOS 4 - @ 'TOS ! ;
:iPICK2	iDUP NOS 8 - @ 'TOS ! ;
:iPICK3	iDUP NOS 12 - @ 'TOS ! ;
:iPICK4	iDUP NOS 16 - @ 'TOS ! ;
:i2DUP	iOVER iOVER ;
:i2OVER	iPICK3 iPICK3 ;
:i2SWAP	TOS NOS 4 - dup @ 'TOS ! ! ;
|-- Internas
:i;		RTOS @ 'IP ! -4 'RTOS ! ;
:iLIT	iDUP IP @ 'TOS ! 4 'IP +! ;
:iADR	iDUP IP @ @ 'TOS ! 4 'IP +! ; | <-?
:iCALL	4 'RTOS +! IP dup 4+ RTOS ! @ 'IP ! ;
:iJMP	IP @ 'IP ! ;
|-- condicionales
:i0?	IP @ 4 'IP +! TOS 1? ( over 'IP ! ) 2drop ;
:i+?	IP @ 4 'IP +! TOS -? ( over 'IP ! ) 2drop ;
:i-?	IP @ 4 'IP +! TOS +? ( over 'IP ! ) 2drop ; 
:i1?	IP @ 4 'IP +! TOS 0? ( over 'IP ! ) 2drop ;
:i=?	IP @ 4 'IP +! NOS @ TOS <>? ( over 'IP ! ) 2drop iDROP ;
:i<?	IP @ 4 'IP +! NOS @ TOS >=? ( over 'IP ! ) 2drop iDROP ;
:i>?	IP @ 4 'IP +! NOS @ TOS <=? ( over 'IP ! ) 2drop iDROP ;
:i<=?	IP @ 4 'IP +! NOS @ TOS >? ( over 'IP ! ) 2drop iDROP ;
:i>=?	IP @ 4 'IP +! NOS @ TOS <? ( over 'IP ! ) 2drop iDROP ;
:i<>?	IP @ 4 'IP +! NOS @ TOS =? ( over 'IP ! ) 2drop iDROP ;
|-- exec
:iEXEC	TOS iDROP 1? ( 4 'RTOS +! IP RTOS ! 'IP ! ) drop ;
:i>R	4 'RTOS +! TOS RTOS ! iDROP ;
:iR>	iDUP RTOS @ 'TOS !
:iRDROP	-4 'RTOS +! ;
:iR		iDUP RTOS @ 'TOS ! ;
:iAND	NOS @ TOS and 'TOS ! iNIP ;
:iOR	NOS @ TOS or 'TOS ! iNIP ;
:iXOR	NOS @ TOS xor 'TOS ! iNIP ;
:iNOT	TOS not 'TOS ! ;
:i+		NOS @ TOS + 'TOS ! iNIP ;
:i-		NOS @ TOS - 'TOS ! iNIP ;
:i*		NOS @ TOS * 'TOS ! iNIP ;
:i%		NOS @ TOS /mod NOS ! 'TOS ! ;
:iNEG	TOS neg 'TOS ! ;
:i<<	NOS @ TOS << 'TOS ! iNIP ;
:i>>	NOS @ TOS >> 'TOS ! iNIP ;
|--- mem
:i@		TOS @ 'TOS ! ;
:i!		NOS @ TOS ! iNIP iDROP ; 
:i+!	NOS @ TOS +! iNIP iDROP ;
:i@+	iDUP 4 NOS @ +! TOS @ ;
:i!+	NOS @ TOS ! iNIP 4 'TOS +! ;
|---sis
:iMSEC		iDUP msec 'TOS ! ; 
:iTIME		iDUP iDUP iDUP TIME NOS 4 - ! NOS ! 'TOS ! ;
:iDATE		iDUP iDUP iDUP DATE NOS 4 - ! NOS ! 'TOS ! ;
:iBPP		iDUP bpp 'TOS ! ;
:iSW		iDUP sw 'TOS ! ;
:iSH		iDUP sh 'TOS ! ; 
:iFRAMEV	iDUP framev 'TOS ! ; 
:iREDRAW	redraw ;
:iEND		0 'IP ! ; 
:iRUN		0 'IP ! ; | falta guardar nombre
:iUPDATE	update ;
:iSTART!	TOS start! iDROP ;
:iMOTION!	TOS motion! iDROP ;
:iEND!		TOS end! iDROP ;
:iKEYMAP	keymap ;
:iUKEYMAP 	ukeymap ;
:iDIR		TOS dir iDROP ;  
:iFILE		TOS file 'TOS ! ; 
:iLOAD		NOS @ TOS load 'TOS ! iNIP ; 
:iSAVE		NOS 4 - @ NOS @ TOS save iDROP iDROP iDROP ;  
:iMEM		iDUP mem 'TOS ! ;

#tablai 'i; 'iLIT 'iADR 'iCALL 'iJMP					| 0..4
	'i0? 'i+? 'i-? 'i1? 								| 5..8
	'i=? 'i<? 'i>? 'i<=? 'i>=? 'i<>?					| 9..14
	'iEXEC 'iDUP 'iDROP 'iOVER 'iSWAP 'iNIP 'iROT		|15..21
	'iPICK2 'iPICK3 'iPICK4 'i2DUP 'i2OVER 'i2SWAP  	|22..27
	'i>R 'iR> 'iR 'iRDROP								|28..31
	'iAND 'iOR 'iXOR 'iNOT 'i+ 'i- 'i* 'i%  			|32..39
	 'iNEG 'i<< 'i>>	 								|40..42
	'i@ 'i! 'i+! 'i@+ 'i!+ 								|43..47
	'iMSEC 'iTIME 'iDATE 'iEND							|48..51
	'iRUN 'iBPP 'iSW 'iSH 'iREDRAW 'iFRAMEV 'iUPDATE	|52..58
	'iSTART! 'iMOTION! 'iEND! 'iKEYMAP 'iUKEYMAP 		|59..63
	'iDIR 'iFILE 'iLOAD 'iSAVE 'iMEM					|64..68

#finprog ( 51 ) | end

::resetvm 
	'RSP 'RTOS ! 'finprog RTOS !	|....END
	'PSP 'NOS ! 0 NOS ! 0 'TOS ! ;

::interpreta | addr -- ok / error
	| resetvm
	'prog dup 'IP !
	( 1? )( c@ 1 'IP +! 2* 2* 'tablai + @ exec IP ) drop ;

|----- pila de compilador
#pilac )( 1024
#pilac> 'pilac

:inipilac 'pilac 'pilac> ! ;
:>pilac pilac> !+ 'pilac> ! ;
:<pilac -4 'pilac> +! pilac> @ ;
:anida pilac> 'pilac - ;

|---- palabras de la memoria
:m8 | nro8 --
	dato> c!+ 'dato> ! ;
:m16 | nro16 --
	dato> w!+ 'dato> ! ;
:m32 | nro32 --
	dato> !+ 'dato> ! ;
:mcnt | nro --
	'dato> +! ;

#salto 0	
#unidad 'm32

|---- palabras del codigo
:g | code --
	prog> c!+ 'prog> ! ;

:c;	0 g ; :cLIT	1 g ; :cADR	2 g ; :cCALL	3 g ; :cJMP	4 g ;
:cDUP	16 g ; :cDROP	17 g ; :cNIP	20 g ;

:32g | nro32 -- 
	prog> !+ 'prog> ! ;
	
:hole		prog> >pilac 4 'prog> +! ;
:holefix	prog> <pilac ! ;

:label		prog> >pilac ;
:labelfix	<pilac 32g ;

:macro;		c; 0 'salto ! ; | anida 0? ( ) drop
:macro(		salto 1? ( hole 1 )( label 2 ) >pilac drop ;
:macro)(	<pilac salto 0? ( drop 
				1 =? ( drop cJMP hole <pilac holefix >pilac 1 >pilac ; )
			)( drop 
				2 =? ( drop <pilac hole >pilac 3 >pilac ; ) ) drop
			")( error" 'msgerror ! ;
:macro)		<pilac salto 0? ( drop 
				1 =? ( drop holefix ; ) 
				2 =? ( drop cJMP labelfix ; ) 
				3 =? ( drop cJMP labelfix holefix ; )
			)( drop	
				2 =? ( drop labelfix ; ) ) drop
			") error" 'msgerror ! ;
:macro[ ;
:macro] ;

#macros 'macro; 'macro(	'macro)( 'macro) 'macro[ 'macro] ;
	
	
::r4ini |---
	";"  0 definep 
	"("  0 definep 
	")(" 0 definep 
	")"  0 definep 
	"["  0 definep 
	"]"  0 definep
	"0?" 0 definep "+?"	0 definep "-?" 0 definep "1?" 0 definep
	"=?" 1 definep "<?"	1 definep ">?" 1 definep "<=?" 1 definep ">=?" 1 definep "<>?" 1 definep
	"EXEC" 1 definep 
	"DUP"  -1 definep 
	"DROP" 1 definep 
	"OVER" -1 definep 
	"SWAP" 0 definep 
	"NIP" 1 definep 
	"ROT" 0 definep 
	"PICK2" -1 definep	
	"PICK3" -1 definep 
	"PICK4" -1 definep 
	"2DUP" -2 definep 
	"2OVER" -2 definep
	"2SWAP" 0 definep
	">R" 1 definep "R>" -1 definep "R" -1 definep "RDROP" 0 definep 
	"AND" 1 definep 
	"OR" 1 definep 
	"XOR" 1 definep 
	"NOT" 0 definep
	"+" 1 definep 
	"-" 1 definep 
	"*" 1 definep 
	"/MOD" 2 definep 
	"NEG" 0 definep 
	"<<"  1 definep 
	">>" 1 definep 
	"@" -1 definep 
	"!" 2 definep 
	"+!" 1 definep 
	"!+" 1 definep 
	"@+" -1 definep 
	"MSEC" -1 definep 
	"TIME" -3 definep 
	"DATE" -3 definep 
	"END" 0 definep 
	"RUN" 1 definep 
	"BPP" -1 definep 
	"SW" -1 definep 
	"SH" -1 definep 
	"REDRAW" 0 definep 
	"FRAMEV" -1 definep 
	"UPDATE" 0 definep 
	"START!" 1 definep 
	"MOTION!" 1 definep 
	"END!" 1 definep 
	"KEYMAP" -1 definep 
	"UKEYMAP" -1 definep 
	"DIR" 1 definep 
	"FILE" 0 definep 
	"LOAD" 1 definep 
	"SAVE" 2 definep 
	"MEM" -1 definep ;
	
#nuevas 69

|------- COMPILADOR de palabras
:nextw | adr --|-- NO guarda en espacio de nombres
	( c@+ 32 >? )( toupp drop |.c 
		) drop ;

:nextw, | adr --|-- convierte nombre y graba
	1+ ( c@+ 32 >? )( toupp ,c ) drop ;

:ccom  	| pasa de largo
	" ;" ,s
	( 1+ dup c@ 1? )( 13 =? ( drop 1+ ,cr ; ) ,c ) drop ;

:cinc | dir "" -- dir 
	"include '" ,s nextw, "'" ,ln ;

|--- modo dato
:scad 
  ( 1+ dup c@ 1? )( 34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 m8 ; ) ) m8 ) m8 ;
  
:sdir 
	|ind>nombre 
	m32 ;
:snum 
	unidad exec ;
	
:sexit 
	drop 
	rdrop rdrop ;
	
:spal 
	0 =? ( drop sexit ; )							| ;
	1 =? ( drop unidad >pilac 'm8 'unidad ! ; ) 	| (
	2 =? ( drop 'mcnt 'unidad ! ; )					| )(
	3 =? ( drop <pilac 'unidad ! ; )				| )
	4 =? ( drop unidad >pilac 'm16 'unidad ! ; )	| [
	5 =? ( drop <pilac 'unidad ! ; )				| ]
	drop "defvar error " 'msgerror ! ;

|--- modo programa
:ccad | dir -- dir //compila direccion de cadena agrega literal
	0 'salto ! 
	dato> cLIT 32g 
	( 1+ dup c@ 1? )( 
		34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 m8 ; ) ) 
		m8 ) drop 0 m8 ;

:cdir | dir num -- dir  //compila direccion
	cLIT 32g 0 'salto ! ;

:cnum | dir num -- dir
	cLIT 32g 0 'salto ! ;
	
:cpal | dir num -- dir
	5 <? ( 1- 2* 2* 'macros + @ exec ; )	| macro
	15 <? ( 1 )( 0 ) 'salto !				| condicionales
	nuevas <? ( 2 - g 						| primitivas
		)( | direccion
		cCALL 32g )
|	ind>nombre label ,cr
	;

:cerr | error del compilador, retroceder memoria
	nextw "?" 'msgerror ! ;

#veccomps 'ccom 'scad 'sexit 'sexit 'cinc 'sdir 'snum 'spal 'cerr

:cvar	| agregar otra variable (adentro de una definicion sale)
	1+ dato> swap definev |	nextw, " " ,s 
	'm32 'unidad !
	( palabra 1? )( 1- 2 << 'veccomps + @ exec ) drop ;	| hasta ; o : o fin

:cdef	| agregar otra definicion
	1+ prog> swap definew |	nextw, " " ,s 
	;

#veccompi 'ccom 'ccad 'cdef 'cvar 'cinc 'cdir 'cnum 'cpal 'cerr

::compila | addr -- addr' / 0 error
	"" 'msgerror ! 
	inipilac 
	'prog 'prog> ! 'dato 'dato> !
	( palabra 1? )( 1- 2 << 'veccompi + @ exec ) 2drop 
	51 g ;

|----------------------------------------------
::printpilac
	'pilac ( pilac> <? )( @+ printn " " prints ) drop ;

::dibujapila
	msgerror "%s|" print
	TOS NOS ( 'PSP >? )( swap "%n " print dup @ swap  4 - ) 2drop	;
	
::dibujadato
	"%/dato:" print 
	'dato ( dato> <? )( c@+ "%n," print ) drop ;
		
::dibujaprog
	"%/prog:" print 
	'prog ( prog> <? )( c@+ "%n," print ) drop ;
