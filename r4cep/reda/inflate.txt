| inflate-deflate
|

#fuente>
#destino> 
#bitn
#bitc 

| get one bit from source stream 
|int tinf_getbit(TINF_DATA *d)
|   unsigned int bit;
|   if (!d->bitcount--)    | check if tag is empty 
|   {
|      d->tag = *d->source++; d->bitcount = 7;      | load next tag 
|   }
|   bit = d->tag & 0x01;  d->tag >>= 1; | shift bit out of tag 
|   return bit;
:zzgetbit | -- bit
	bitc 0? ( fuente> c@+ 'bitn ! 'fuente> ! 7 nip )( 1- ) 'bitc !
	bitn dup 2/ 'bitn !
	%1 and ;

| read a num bit value from a stream and add base 
|unsigned int tinf_read_bits(TINF_DATA *d, int num, int base)
|   unsigned int val = 0;
|   if (num)    | read num bits 
|   {
|      unsigned int limit = 1 << (num);
|      unsigned int mask;
|      for (mask = 1; mask < limit; mask *= 2)
|         if (tinf_getbit(d)) val += mask;
|   }
|   return val + base;
:zzgetbits | base num -- bits
	0? ( drop ; )
	1 swap << | base limit
	0 1 | base lim val mask
	( pick2 <? )(
		zzgetbit 1? ( drop swap over + swap )( drop ) | base lim val mask
		2* ) drop
	nip + ;

#fixtree )( 2048		| 0--16*4 code 16+288 *4 code-sym
#fixdist )( 2048
#temptree )( 2048
#tempdist )( 2048

|---- internal data structures -- *
|typedef struct {
|   unsigned short table[16];  | table of code length counts 
|   unsigned short trans[288]; | code -> symbol translation table 
|} TINF_TREE;
|typedef struct {
|   const unsigned char *source;|   unsigned int tag;|   unsigned int bitcount;
|   unsigned char *dest;|   unsigned int *destLen;
|   TINF_TREE ltree; | dynamic length/symbol tree 
|   TINF_TREE dtree; | dynamic distance tree 
|} TINF_DATA;
|---- uninitialized global data (structures) 
|TINF_TREE sltree; | fixed length/symbol tree 
|TINF_TREE sdtree; | fixed distance tree 

| extra bits and base tables for length codes 
#length_bits ( 0 0 0 0 0 0 0  0  1  1  1  1  2  2  2  2  3  3  3  3  4  4  4   4   5   5   5   5   0 )
#length_base [ 3 4 5 6 7 8 9 10 11 13 15 17 19 23 27 31 35 43 51 59 67 83 99 115 131 163 195 227 258 ]
| extra bits and base tables for distance codes 
#dist_bits ( 0 0 0 0 1 1 2  2  3  3  4  4  5  5   6   6   7   7   8   8    9    9   10   10   11   11   12    12    13    13 )
#dist_base [ 1 2 3 4 5 7 9 13 17 25 33 49 65 97 129 193 257 385 513 769 1025 1537 2049 3073 4097 6145 8193 12289 16385 24577 ]
| special ordering of code length codes 
#clcidx ( 16 17 18 0 8 7 9 6 10 5 11 4 12 3 13 2 14 1 15 ) 

|---- utility functions 
| build the fixed huffman trees 
|void tinf_build_fixed_trees(TINF_TREE *lt, TINF_TREE *dt)
|   int i;
   | build fixed length tree 
|   for (i = 0; i < 7; ++i) lt->table[i] = 0;
|   lt->table[7] = 24;
|   lt->table[8] = 152;
|   lt->table[9] = 112;
|   for (i = 0; i < 24; ++i) lt->trans[i] = 256 + i;
|   for (i = 0; i < 144; ++i) lt->trans[24 + i] = i;
|  for (i = 0; i < 8; ++i) lt->trans[24 + 144 + i] = 280 + i;
|   for (i = 0; i < 112; ++i) lt->trans[24 + 144 + 8 + i] = 144 + i;
   | build fixed distance tree 
|   for (i = 0; i < 5; ++i) dt->table[i] = 0;
|   dt->table[5] = 32;
|   for (i = 0; i < 32; ++i) dt->trans[i] = i;

:buildfix 
	'fixtree >r
	0 ( 7 <? )( 0 r!+ 1+ ) drop
	24 r!+ 152 r!+ 112 r!+ 
	rdrop
	'fixtree 16 2 << + >r
	0 ( 24 <? )( dup 256 + r!+ 1+ ) drop
	0 ( 144 <? )( dup r!+ 1+ ) drop
	0 ( 8 <? )( dup 280 + r!+ 1+ ) drop
	0 ( 112 <? )( dup 144 + r!+ 1+ ) drop
	rdrop
	'fixdist >r
	0 ( 5 <? )( 0 r!+ 1+ ) drop
	32 r!+
	rdrop
	'fixdist 16 2 << + >r
	0 ( 32 <? )( dup r!+ 1+ ) drop
	rdrop ;

| given an array of code lengths, build a tree 
|void tinf_build_tree(TINF_TREE *t, const unsigned char *lengths, unsigned int num)
|   unsigned short offs[16];
|   unsigned int i, sum;
|   for (i = 0; i < 16; ++i) t->table[i] = 0;| clear code length count table 
|   for (i = 0; i < num; ++i) t->table[lengths[i]]++;   | scan symbol lengths, and sum code length counts 
|   t->table[0] = 0;
|   for (sum = 0, i = 0; i < 16; ++i)   | compute offset table for distribution sort 
|	{  offs[i] = sum;     sum += t->table[i];   }
|   for (i = 0; i < num; ++i)   | create code->symbol translation table (symbols sorted by code) 
|	if (lengths[i]) t->trans[offs[lengths[i]]++] = i;
#offs )( 64
:buildtree | tree len num --
	pick2 >r
	0 ( 16 <? )( 0 r!+ 1+ ) drop rdrop
	pick2 >r
	0 ( over <? )(  | tree len num n
		pick2 over 2 << + @ 2 << r + dup @ 1+ swap !
		1+ ) drop
	0 r ! | tree len num 
	0 0 ( 16 <? )( 
		over over 2 << 'offs + !
		swap r@+ + swap
		1+ ) 2drop rdrop
	0 ( over <? )( | tree len num n
		pick2 over 2 << + @ 1? (
			2 << 'offs + dup @ dup 1+ rot !  | tree len num n o
			2 << pick4 16 2 << + + over swap !
			)( drop )
		1+ ) 
	4drop ;
	

|---- decode functions -- *

| given a data stream and a tree, decode a symbol 
|int tinf_decode_symbol(TINF_DATA *d, TINF_TREE *t)
|   int sum = 0, cur = 0, len = 0;
|   do {   | get more bits while code value is above sum 
|      cur = 2*cur + tinf_getbit(d);
|      ++len;
|      sum += t->table[len];
|      cur -= t->table[len];
|   } while (cur >= 0);
|   return t->trans[sum + cur];
:decodesymbol | tree -- value
	0 0 0 (	| tree sum len cur
		2* zzgetbit +
		swap 1+ | tree sum cur len
		pick3 over 2<< + @ dup >r rot + | tree cur len sum
		rot r> - | tree len sum cur
		rot swap | tree sum len cur
		+? ) | tree sum len cur
	nip + 2 << + @ ;


| given a data stream, decode dynamic trees from it 
void tinf_decode_trees(TINF_DATA *d, TINF_TREE *lt, TINF_TREE *dt)
{
   TINF_TREE code_tree;
   unsigned char lengths[288+32];
   unsigned int hlit, hdist, hclen;
   unsigned int i, num, length;
  
   hlit = tinf_read_bits(d, 5, 257);| get 5 bits HLIT (257-286) 
   hdist = tinf_read_bits(d, 5, 1);   | get 5 bits HDIST (1-32) 
   hclen = tinf_read_bits(d, 4, 4);   | get 4 bits HCLEN (4-19) 
   for (i = 0; i < 19; ++i) lengths[i] = 0;
   for (i = 0; i < hclen; ++i)    | read code lengths for code length alphabet 
   {
      unsigned int clen = tinf_read_bits(d, 3, 0);      | get 3 bits code length (0-7) 
      lengths[clcidx[i]] = clen;
   }
   tinf_build_tree(&code_tree, lengths, 19);    | build code length tree 
   for (num = 0; num < hlit + hdist; )   | decode code lengths for the dynamic trees 
   {
      int sym = tinf_decode_symbol(d, &code_tree);
      switch (sym)
      {
      case 16:         | copy previous code length 3-6 times (read 2 bits) 
         {
            unsigned char prev = lengths[num - 1];
            for (length = tinf_read_bits(d, 2, 3); length; --length)
            {
               lengths[num++] = prev;
            }
         }
         break;
      case 17:         | repeat code length 0 for 3-10 times (read 3 bits) 
         for (length = tinf_read_bits(d, 3, 3); length; --length)
		lengths[num++] = 0;
         break;
      case 18:         | repeat code length 0 for 11-138 times (read 7 bits) 
         for (length = tinf_read_bits(d, 7, 11); length; --length)
		lengths[num++] = 0;
         break;
      default:         | values 0-15 represent the actual code lengths 
         lengths[num++] = sym;
         break;
      }
   }
 
   tinf_build_tree(lt, lengths, hlit);| build dynamic trees 
   tinf_build_tree(dt, lengths + hlit, hdist);
}

#code_tree )( 2048
#lengths )( 1024

:decodetree | -- tree
	;

|---- block inflate functions -- *
| given a stream and two trees, inflate a block of data 
|int tinf_inflate_block_data(TINF_DATA *d, TINF_TREE *lt, TINF_TREE *dt)
|   unsigned char *start = d->dest;   | remember current output position 
|   while (1)   {
|      int sym = tinf_decode_symbol(d, lt);
|      if (sym == 256)  {| check for end of block 
|         *d->destLen += d->dest - start;      return 0; }
|      if (sym < 256)  {
|         *d->dest++ = sym;
|      } else {
|         int length, dist, offs; int i;
|         sym -= 257;
|         length = tinf_read_bits(d, length_bits[sym], length_base[sym]);| possibly get more bits from length code 
|         dist = tinf_decode_symbol(d, dt);
|         offs = tinf_read_bits(d, dist_bits[dist], dist_base[dist]);| possibly get more bits from distance code 
|         for (i = 0; i < length; ++i)| copy match 
|		d->dest[i] = d->dest[i - offs];
|         d->dest += length;
:inflate | tree --
	( decodesymbol 256 <>? )( 
		256 <? ( destino> c!+ 'destino> !  )(
			257 - | tree sym
			dup 

			)
		) 2drop ;

|---- public functions -- *
| initialize global (static) data 
|void tinf_init()
|   tinf_build_fixed_trees(&sltree, &sdtree);   | build fixed huffman trees 
|   tinf_build_bits_base(length_bits, length_base, 4, 3);   | build extra bits and base tables 
|   tinf_build_bits_base(dist_bits, dist_base, 2, 1);
|   length_bits[28] = 0;   | fix a special case 
|   length_base[28] = 258;

::zzinit
	'fixtree buildtree

	;


| inflate an uncompressed block of data 
|int tinf_inflate_uncompressed_block(TINF_DATA *d)
|   unsigned int length, invlength;
|   unsigned int i;
|   length = d->source[1]; length = 256*length + d->source[0]; | get length 
|   invlength = d->source[3]; invlength = 256*invlength + d->source[2];| get one's complement of length 
|   if (length != (~invlength & 0x0000ffff)) return -3; | check length 
|   d->source += 4;
|   for (i = length; i; --i) *d->dest++ = *d->source++; | copy block 
|   d->bitcount = 0; *d->destLen += length; | make sure we start next block on a byte boundary 
|   return 0;
:bluncom	| decompress uncompressed block 
	fuente> @+ swap @ 8 << + | src largo
	destino> fuente> 4+ rot ( 1? )( 1- >r c@+ rot c!+ swap r> ) drop 
	'fuente> ! 'destino> ! 0 'bitc ! ;

| inflate a block of data compressed with fixed huffman trees 
|int tinf_inflate_fixed_block(TINF_DATA *d)
|   return tinf_inflate_block_data(d, &sltree, &sdtree);| decode block using fixed trees 
:blfixed		| decompress block with fixed huffman trees 
	'fixtree inflate
	;

| inflate a block of data compressed with dynamic huffman trees 
|int tinf_inflate_dynamic_block(TINF_DATA *d)
|   tinf_decode_trees(d, &d->ltree, &d->dtree); | decode trees from stream 
|   return tinf_inflate_block_data(d, &d->ltree, &d->dtree); | decode block using decoded trees 
:bldinam	| decompress block with dynamic huffman trees 
	decodetree inflate ;

:blerr		| error
	-1 nip ;

| inflate stream from source to dest 
|int tinf_uncompress(void *dest, unsigned int *destLen,const void *source, unsigned int sourceLen)
|   TINF_DATA d;
|   int bfinal;
| d.source = (const unsigned char *)source;   d.bitcount = 0;| initialise data 
|   d.dest = (unsigned char *)dest;   d.destLen = destLen;   *destLen = 0;
|   do {
|      unsigned int btype;
|      int res;
|      bfinal = tinf_getbit(&d);| read final block flag 
|      btype = tinf_read_bits(&d, 2, 0);      | read block type (2 bits) 
|      switch (btype)      {      | decompress block 
|      case 0:  res = tinf_inflate_uncompressed_block(&d);         break;| decompress uncompressed block 
|      case 1:  res = tinf_inflate_fixed_block(&d);         break;| decompress block with fixed huffman trees 
|      case 2:  res = tinf_inflate_dynamic_block(&d);         break;| decompress block with dynamic huffman trees 
|      default:         return -3;
|      }
|      if (res != 0) return -3;
|   } while (!bfinal);
|   return 0;

#tipodex bluncom blfixed bldinam blerr
::uncompress | dest source -- 0/-1
	c@+ 'bitn ! 'fuente> ! 7 'bitc ! 'destino> ! ;
	( zzgetbit 
		0 2 zzgetbits 2 << 'tipodex + @ exec
		0? )
		;
