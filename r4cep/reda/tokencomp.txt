| compilador token code R4
| PHREDA
|---------------------------
^reda4.txt
^gui.txt
^parse.txt
|^trace.txt

|---- macros
| 'string |
#:indicemac )( 1024	#indicemac> 'indicemac	| 256 macros
|---- palabras
| 'string | 'exec | info | stat |    16 bytes por palabra
#:indicepal )( 32768	#:indicepal> 'indicepal	| 2048 palabras	
#:indicepal<

|---- includes
| 'string | 'mem |				8 bytes (128 includes)
| 'string | 'mem | first | last		16 bytes (32 includes)
#:indiceinc )( 1024	#indiceinc> 'indiceinc	
|---- codigo
| byte|dword |
#:prog			#:prog>
|---- dato 
#:dato			#:dato>

#:<<boot
#:<<ip

#salto 0		| es salto el anterior ?
#estado 0	| 0-nada 1-dato 2-accion  3-boot
#dprofundo 0	|pila de datos
#rprofundo 0	| pila de retorno
#largo 0		| largo en palabras
#:msg 0
#:error> 0
#:inisrc 0

#pinc )( 128 #pinc> 'pinc	 | pila de nombres de includes para saber donde esta el error

#macros ";" "(" ")(" ")" "[" "]" 
"0?" "+?" "-?" "1?" "=?" "<?" ">?" "<=?" ">=?" "<>?" "AND?" "NAND?" "EXEC" 
"DUP" "DROP" "OVER" "PICK2" "PICK3" "PICK4" "SWAP" "NIP" "ROT"	|--- pila
"2DUP" "2DROP" "3DROP" "4DROP" "2OVER" "2SWAP" 
">R" "R>" "R" "R+" "R@+" "R!+" "RDROP"				|--- pila direcciones
"AND" "OR" "XOR" "NOT"  								|--- logicas
"+" "-" "*" "/" "*/" "*>>" "/MOD" "MOD" "ABS"  			|--- aritmeticas
"NEG" "1+" "4+" "1-" "2/" "2*" "<<" ">>" 
"@" "C@" "W@" "!" "C!" "W!" "+!" "C+!" "W+!"  			|--- memoria
"@+" "!+" "C@+" "C!+" "W@+" "W!+" 
"MSEC" "TIME" "DATE" "END" "RUN" 						|--- sistema
"BPP" "SW" "SH" "CLS" "REDRAW" "FRAMEV" "UPDATE" 	|--- pantalla
"XYMOUSE" "BMOUSE" "KEY" "CNTJOY" "AJOY" "BJOY"
"IPEN!" "IKEY!" 
"PAPER" "INK" "INK@" "ALPHA"						|--- color
"OP" "CP" "LINE" "CURVE" "PLINE" "PCURVE" "POLI"	|--- dibujo
"MEM" "DIR" "FILE" "FSIZE" "VOL" "LOAD" "SAVE"		|--- memoria bloques
"MOVE" "MOVE>" "CMOVE" "CMOVE>"
"SLOAD" "SPLAY"									|--- Sonido
( 0 )

| formato
| 00000000
|                  D		diferencia en pila de datos (-8..7)
|               R		diferencia en pila direcciones (-8..7)
|            M		
|--------------
#deltaestado
$00 $100 $100 $100 $100 $100 |";" "(" ")(" ")" "[" "]"      ; no graba
$200 $200 $200 $200 $30f $30f $30f $30f $30f $30f $30f $30f $40f |"0?" "+?" "-?" "1?" "=?" "<?" ">?" "<=?" ">=?" "<>?" "AND?" "NAND?" "EXEC" 
$01 $0f $01 $01 $01 $01 $00 $0f $00 |"DUP" "DROP" "OVER" "PICK2" "PICK3" "PICK4" "SWAP" "NIP" "ROT"	|--- pila
$02 $0e $0d $0c $02 $00 |"2DUP" "2DROP" "3DROP" "4DROP" "2OVER" "2SWAP" 
$1f $f1 $21 $3f $31 $3f $f0 |">R" "R>" "R" "R+" "R@+" "R!+" "RDROP"				|--- pila direcciones
$0f $0f $0f $00 |"AND" "OR" "XOR" "NOT"  								|--- logicas
$0f $0f $0f $0f $0e $0e $00 $0f $00 |"+" "-" "*" "/" "*/" "*>>" "/MOD" "MOD" "ABS"  				|--- aritmeticas
$0 $0 $0 $0 $0 $0 $f $f |"NEG" "1+" "4+" "1-" "2/" "2*" "<<" ">>" 
$0 $0 $0 $e $e $e $e $e $e |"@" "C@" "W@" "!" "C!" "W!" "+!" "C+!" "W+!"  			|--- memoria
$1 $f $1 $f $1 $f |"@+" "!+" "C@+" "C!+" "W@+" "W!+" 
$1 $3 $3 $0 $f |"MSEC" "TIME" "DATE" "END" "RUN" 						|--- sistema
$1 $1 $1 $0 $0 $1 $0 |"BPP" "SW" "SH" "CLS" "REDRAW" "FRAMEV" "UPDATE" 			|--- pantalla
$2 $1 $1 $1 $0 $0 |"XYMOUSE" "BMOUSE" "KEY" "CNTJOY" "AJOY" "BJOY"
$f $f |"IPEN!" "IKEY!" 
$f $f $1 $1 |"PAPER" "INK" "INK@" "ALPHA"
$e $e $e $e $e $e $0 |"OP" "CP" "LINE" "CURVE" "PLINE" "PCURVE" "POLI" |--- dibujo
$1 $f $0 $0 $0 $f $d | "MEM" "DIR" "FILE" "FSIZE" "VOL" "LOAD" "SAVE"		|--- memoria bloques
$d $d $d $d
$0 $f |"SLOAD" "SPLAY"									|--- Sonido
0

#auxstr )( 64

:armastr | "a b" -- "a"
	'auxstr swap copynom 'auxstr ;

|----- pila de compilador
#pilac )( 128
#pilac> 'pilac

:c.ini 'pilac 'pilac> ! ;
:c.push pilac> !+ 'pilac> ! ;
:c.pop -4 'pilac> +! pilac> @ ;
:c.cnt pilac> 'pilac - ;

|--- dato
:m8 | nro8 --
	dato> c!+ 'dato> ! ;
:m16 | nro16 --
	dato> w!+ 'dato> ! ;
:m32 | nro32 --
	dato> !+ 'dato> ! ;
:mcnt | nro --
	'dato> +! ;

:d,cad | a -- a' graba cadena  "....."",..." 
	( 1+ dup c@ 1? )( 
		34 =? ( drop 1+ dup c@ 34 <>? ( drop 0 m8 ; ) ) 
		m8 ) m8 ; 

#unidad 'm32

|---- Compila programa
:p, | nro i --
	prog> c!+ !+ 'prog> ! ;

|---- Busca Macros y palabras
::?macro | str -- nro+1/0
	'indicemac ( @+ 1? )( 			| str w pal
		pick2 =word= 1? (			| str maindic dir 1
			drop rot drop swap 		| dir maindic
			'indicemac - 2 >> ; )		| para que 0 sea invalido el primer macro es 1
		drop ) nip nip ;				| str md+4 pal'

::?palabra | str -- str dir / str 0
	'indicepal >r
	( r@+ 1? )( 					| str ind pal
		over =s 1? ( drop r> 4 -	| dirpal
			dup 8 + @			| dirpal info
			%10 and? ( drop ; )( drop indicepal< >=? ( ; ) )
			16 + >r	)( drop 12 r+ )
		) drop rdrop 0 ;

|---  includes
:escom	   ( c@+ 1? )( 14 <? ( drop ; ) drop ) drop 1- ;
:escad	   ( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( drop ; ) ) drop ) drop 1- ;
:esnad	   ( c@+ 1? )( 33 <? ( drop ; ) drop ) drop 1- ;

:include? | s -- adr/0
	'indiceinc ( indiceinc> <? )(
		@+ pick2 =s 1? ( drop nip 4 - ; ) drop 
		12 + ) 2drop 0 ;

:esinc 	| a -- a' incluye codigo
	1+ dup include? 1? ( drop ; ) drop
	'auxstr over copynom 
	here over indiceinc> !+ !+ 0 0 rot !+ !+ 'indiceinc> !
	here 'auxstr load	| carga include
	here =? ( " no existe" 'auxstr strcat 'auxstr 'msg ! 	drop 0 ; )
	0 swap c!+ 'here ! 
	esnad ;
	
:includepal | str -- str'
	( dup c@ 33 <? )( 0? ( ; ) drop 1+ ) | quitar espacios
	$7c =? ( drop escom ; )		| $7c |	 Comentario
	$22 =? ( drop escad ; )		| $22 "	 Cadena		
	$5e =? ( drop esinc ; )		| $5e ^  Include	
	drop esnad ;


|--- Compila saltos
:hole	prog>  4 - c.push ;
:label	prog> c.push ;
:holefix	prog> c.pop  ! ;
:labelfix	c.pop prog> 4 - ! ;

|----------ERROR
::seterror | adr "" -- adr
	over armastr drop 'auxstr strcat 'auxstr 'msg ! ;

|--------------- compilar macro
:c;
	c.cnt 0? ( dup 'estado ! ) drop ; 
:c(	
	salto 1? ( hole 1 )( label 2 ) c.push drop ;
:c)(	
	c.pop salto 0? ( drop	
				1 =? ( drop hole c.pop holefix c.push 1 c.push ; )
			)( drop 		
				2 =? ( drop c.pop hole c.push 3 c.push ; ) ) drop
			")( error" 'msg ! 	0 ;
:c)	
	c.pop salto 0? ( drop 
				1 =? ( drop holefix ; ) 
				2 =? ( drop labelfix ; )
				3 =? ( drop labelfix holefix ; )
			)( drop	
				2 =? ( drop labelfix ; ) ) drop
			") error" 'msg ! 0 ;
:c[	
	hole label 4 c.push ; 
:c]	
	c.pop 4 <>? ( "] error" 'msg ! 0 nip ; ) drop
	c.pop holefix  drop ; | agrega lit direccion

#amacro 'c; 'c( 'c)( 'c) 'c[ 'c]

:d;	0 'estado !  ;
:d(	unidad c.push 'm8 'unidad ! ;
:d)(	'mcnt 'unidad !  ; 
:d)	c.pop 'unidad ! ; 
:d[	unidad c.push 'm16 'unidad ! ;
:d]	c.pop 'unidad ! ;

#dmacro 'd; 'd( 'd)( 'd) 'd[ 'd]

:esmacro | nro --
	1 'largo +!

	| falta apilar y desapilar estado segun se abren y cierran los bloques
	| ej: over <? ( nip )( drop )
	|       1+   1- >b  1- b> 1-  (u) | debe dar -1 no -2
	dup 1- 2 << 'deltaestado + @ 
	dup 28 << 28 >> 'dprofundo +!
	24 << 28 >> 'rprofundo +!

	0 over 1- p,	| resto 1...
	estado 1 =? ( 'dmacro )( 'amacro ) nip
	over | nro 'dir nro
	7 <? ( 1- 2 << + @ exec 0? ( nip ; ) )( 2drop )
	6 >? ( 19 <? ( 1 )( 0 ) )( 0 ) 'salto !
	drop ;

:escomentario | a -- a' saltea comentario
	( c@+ 1? )( 13 =? ( drop 1- ; ) drop ) drop 1- ;

:ultimasindato | --  si la ultima variable no tiene numero poner un 0 (32 bits)
	indicepal> 12 - @	| puntero a dato
	dato> =? ( 0 dato> !+ 'dato> ! )
	drop ;

:sumalargos | pal --
	dup ( drop 8 - dup @ 1 and? ( 2drop ; ) drop 
		4 - dup	| palabra anterior
		@ 5 - c@	| pal ult
		1? ( over 8 - dup @ dup $ffff and largo + swap $ff0000 and or swap ! swap 4 - swap )  | si no es fin sumo el largo
		0? ) 2drop ;

:cerrarpalabra | -- guardar info de ultima definicion
	c.cnt 1? ( "Bloque mal cerrado" 'msg ! 0 rdrop ; ) drop |	testear el c.pila... debe estar en 0
	indicepal> 'indicepal =? ( drop ; )
	| guarda info	0000 0000 00000000     d: r: largo:
	dprofundo 24 << rprofundo 16 <<  or $ff0000 and largo or over 4 - !
	sumalargos | si la palabra anterior es accion y no termina con ; sumo el largo 
	0 dup dup 'largo ! 'dprofundo ! 'rprofundo ! | limpia
	;

:+dic | tipo mem nombre  --
	indicepal> !+ !+ !+ 0 swap !+ | nombre | mem | info | largo+pilad+pilar
	0 over ! 'indicepal> ! 
	; 

:esdefinicion | adr -- adr
	cerrarpalabra
	2 'estado ! 0 'salto !
	1+ dup c@ | adr adr+1 c
	33 <? ( drop prog> '<<boot ! 3 'estado ! 1+ ; ) | boot
	$3A =? ( swap 1+ swap %10 )( 0 ) nip | exporta bit 2
	over 
	dup ?macro 1? ( 2drop " no definible" seterror drop 0 ; ) drop | 4drop 'msg !
	?palabra 1? ( 3drop " ya existe" seterror 0 ; ) drop
	ultimasindato
	swap 0 or prog> rot +dic
	esnad ;

:esvariable | adr -- adr'
	cerrarpalabra
	1 'estado !
	1+ dup c@
	33 <? ( drop "# solo" 'msg ! 0 ; )
	$3A =? ( swap 1+ swap %10 )( 0 ) nip | exporta bit 2
	over 
	dup ?macro 1? ( 4drop "base no definible" 'msg ! 0 ; ) drop
	?palabra 1? ( 3drop " ya existe" seterror 0 ; ) drop
	ultimasindato
	swap 1 or dato> rot +dic
	'm32 'unidad ! 
	esnad ;

:datoaccion?	| adr -- adr f
	dup 8 + @ 1 and? ( 0 )( 1 ) nip ;		

:escadena | a -- 'a
	1 'largo +! 0 'salto ! 1 'dprofundo +!
	estado  | 0-nada 1-dato 2-accion 3-boot
	0? ( 2drop dup " afuera" seterror 0 ; )
	1 >? ( dato> -4 p, )
	drop
	d,cad ;

:esdir | str n -- str
	1 'largo +! 0 'salto ! 1 'dprofundo +!
	estado | 0-nada 1-dato 2-accion 3-boot
	0? ( 2drop dup " afuera" seterror 0 ; )
	1 =? ( drop 4+ @ m32 esnad ; )
	1 >? ( swap -7 p, )
	drop esnad ;

:espalabra | str n -- str
	1 'largo +! 0 'salto ! 
	estado | 0-nada 1-dato 2-accion 3-boot
	0? ( 2drop dup " afuera" seterror 0 ; )
	1 =? ( drop 4+ @ m32 esnad ; )
	1 >? ( swap datoaccion? 
		1? ( -6 | modifica segun palabra
			)( -5 1 'dprofundo +! ) 
		nip p, )
	drop esnad ;

:esnumero | nro --
	1 'largo +! 0 'salto ! 1 'dprofundo +!
	estado | 0-nada 1-dato 2-accion 3-boot
	0? ( 2drop dup " afuera" seterror 0 ; )
	1 =? ( drop unidad exec ; ) | dato
	drop 
	basen 10 =? ( -1 )( 16 =? ( -3 )( -2 ) ) nip
	p, ;

|------------------------------------------------------------
:esinclude | a -- a' b'
	1+ dup ( c@+ 32 >? )( drop ) drop 1-
	swap 
	include? 1? (
		4+ dup @	| inc+4 cod
		1? ( over 4 - dup @ pinc> !+ !+ 'pinc> !	| guarda nombre y dir include 
			0 rot !						| 1 include por programa, borrar mem
			dup  ; ) drop
		) drop ;


|--- busca palabra
:palabra | str -- str' 
	( dup c@ 33 <? )( 0? ( ; ) drop 1+ )		| quitar espacios
	$5e =? ( drop esinclude ; )			| $5e ^  Include
	$7c =? ( drop escomentario ; )		| $7c |	 Comentario
	$22 =? ( drop escadena ; )			| $22 "	 Cadena		
	$3A =? ( drop esdefinicion ; )			| $3a :  Definicion  
	$23 =? ( drop esvariable ; )			| $23 #  Variable
	$27 =? ( drop 1+ dup 				| $27 ' Direccion  
		dup ?macro 1? ( 3drop "base no tiene direccion" 'msg ! 0 ; ) drop 
		?palabra 1? ( nip esdir ; ) 2drop
		" sin direccion" seterror 0 ; )
	drop
	dup ?numero  1? ( drop rot drop esnumero ; ) drop
	dup ?fnumero  1? ( drop rot drop esnumero ; ) drop
	dup ?macro 1? ( rot drop esmacro ; ) drop
	dup	?palabra  1? ( nip espalabra ; ) drop
	" no definido" seterror drop
	0 ;

|---- inicializa
:clearall
	'macros 'indicemac |	haceindice 
	( over c@ 1? )(
		drop over swap !+ swap 
		( c@+ 1? )( drop ) drop swap 
		) drop 'indicemac> ! 
	0 indicemac> ! drop 
	'indicepal 'indicepal> ! 
	'indiceinc 'indiceinc> !
	0 indicepal> ! 
	0  dup 'msg ! 'error> !
	;

:loadincludes | fuente --
	( includepal 0? ) drop	 'error> !
	msg 1? ( drop ; ) drop 
	0 ( drop indiceinc>
		'indiceinc ( indiceinc> <? )( 
			4+ @+ 
			( includepal 0? ) drop 'error> !
			msg 1? ( 4drop ; ) drop
			8 +
			) drop
		indiceinc> =? )
	drop ;

|--------- COMPILA ARCHIVO
::tokencomp | "nombre" -- 
	clearall 
	mem over load 0 swap !+ 'here !
	'indicepal dup 'indicepal< ! 
	swap 'pinc !+ !+ 'pinc> !	| 1er include es el codigo
	mem dup 'inisrc !
	dup loadincludes 
	msg 1? ( 2drop ; ) drop | error en include
	0 'estado !
	here dup 
	dup 'prog ! 'prog> ! $fffff + | 1MB programa
	dup 'dato ! 'dato> !
	c.ini 
	0 swap | 0 corta los includes
	dup  | 0 com act 
	( ( palabra 0? ) drop
		'error> ! 'inisrc !
		msg 1? ( ( 1? )( drop ) drop ; ) drop | corta si hay error
		1? ( indicepal> indicepal< pinc> 4 - @ 8 + !+ !
			indicepal> 'indicepal< ! )	| ignorar locales si es un include
		-8 'pinc> +!					| desapila includes
		0? )  
	drop 
	largo 0 <<boot "" indicepal> !+ !+ !+ !+ 'indicepal> ! | agrega palabra boot
	;

::ubicarerror | -- car lin 
	1 inisrc ( error> <? )( c@+ 13 =? ( rot 1+ rot rot ) drop ) | cuenta lineas
	( dup c@ 13 <>? )( drop 1- ) drop | cuenta caracters a inicio de linea
	error> swap - swap
	;

::fuenteerror | -- ".txt"
	pinc> 8 - @ 0? ( "N/A?" nip ) 
	dup ( c@+ 32 >? )( drop ) drop 0 swap 1- c!
	;

::dumperror
	fuenteerror "%s" verde print 
	ubicarerror "|%d|%d|" blanco print 
	msg print cr
|	indicemac> 'indicemac - 2 >> "macros:%d" print cr
	indicepal> 'indicepal	- 4 >> "pal:%d" print cr
	indiceinc> 'indiceinc - 4 >> "inc:%d" print cr
	 prog> prog - "code: %d bytes" print cr
	dato> dato -  "data: %d bytes" print cr
	'indiceinc ( indiceinc> <? )( @+ "%w " print 12 + ) drop
	;

::dumptoken2
	amarillo
	indiceinc> 'indiceinc - 4 >> "%d includes %." print | 3..4
	rojo
	indicepal> 'indicepal - 4 >> "%d palabras %." print
	blanco
|	'indicepal ( indicepal> <? )( 
|		@+ "%w " print @+ " %h  " print @+ " %b  " print @+ " %h  " print cr ) drop
|	largo "%d%." print
	verde
	prog> prog - 5 /  "%d tokens%." print
	azul
	dato> dato - "%d bytes datos%." print
	<<boot "%h%." print
	;

::saverror
	fuenteerror ,s ubicarerror "|%d|%d|" ,print msg ,s ,eol ;
