| 2d Utilidades 
| PHREDA 2008
|-----------------------------------------------

|db =(b.x*b.x + b.y*b.y)
|dp = (a.x*b.x + a.y*b.y)
|proj.x = ( dp / db ) * b.x;
|proj.y = ( dp / db ) * b.y;
|-----------------------------
::2dproj | bx by ax ay -- cx cy 
	pick2 * >r pick2 * r> + | bx by dp
	pick2 dup * pick2 dup * + | bx by dp db
	0? ( 2drop ; ) >r | bx by dp r:db
	swap over * r / | bx dp py r:db
	rot rot * r> / swap ; 


#OMEGA | 
|:detect
|cDiff = c2.x-c1.x x2.y-c1.y
|c = (cDif.x*cDif.x +cDif.y*cDif.y) - ( c1.radius + c2.radius ) * ( c1.radius + c2.radius );
|if( c <0 ) { t = 0;return true; }
|vDiff = c2.vx-c1.vx c2.vy-c1.vy 
|a = vDiff.x*vDiff.x + vDiff.y*vDiff.y 
|if( a <Collision.OMEGA ) return false; //circles not moving relative each other
|b = vDiff.x*cDif.x + vDiff.y*cDiff.y 
|if( b>= 0 ) return false; //circles moving apart 
|d = b * b - a * c;
|if( d <0 ) return false; //no solution to the quadratic equation- circles don't intersect
|t = ( -b - Math.sqrt( d ) ) / a;
|return t <= 1;
|

#cx #cy #vx #vy #a #b #c #d 
:detect1 | 'b1 'b2 -- 'b1 'b2 t
over >x over >x - 'cx !
over >y over >y - 'cy ! 
cx dup * cy dup * + 
pick2 >radio pick2 >radio + dup * -
0 <? ( 0 nip ; ) 'c !
over >vx over >vx - 'vx !
over >vy over >vy - 'vy !
vx dup * vy dup * + 
OMEGA <? ( -1 nip ; ) 'a !
vx cx * vy cy * + 
0 >=? ( -1 nip ; ) 'b !
b dup * a c * - 
0 <? ( -1 nip ; ) 'd !
b neg d sqrt - a / ;

:detect2 | 'b1 'b2 -- 'b1 'b2 t 
over >x over >x - | b1 b2 x-x
pick2 >y pick2 >y - | b1 b2 cx cy
over dup * over dup * + | b1 b2 cx cy dxy
pick4 >radio pick4 >radio + dup * - | b1 b2 cx cy c
0 <? ( 3drop 0 ; ) >r | b1 b2 cx cy r:c
pick3 >vx pick3 >vx - 
pick4 >vy pick4 >vy - | b1 b2 cx cy vx vy r:c
over dup * over dup * + | b1 b2 cx cy vx vy a r:c
OMEGA <? ( rdrop 4drop -1 nip ; ) >r | b1 b2 cx cy vx vy r: a c
rot * >r * r> + | b1 b2 b r:a c
0 >=? ( -1 nip rdrop rdrop ; ) | b1 b2 b r:a c
dup dup * | b1 b2 b b*b 
r> r> over * swap >r | b1 b2 b b*b c*a r:a
- 
0 <? ( 2drop -1 rdrop ; ) | b1 b2 b d r:a
sqrt neg swap - r> / ; | b1 b2 t

|:react ( g1:CircleParticle, g2:CircleParticle ) : void 
|g1.position = c1.position + c1.velocity * t 
|g2.position = c2.position + c2.velocity * t
|cDiff = g2.position-g1.position
|collisionNormal = cDiff.getUnit();
|relativeVelocity = c1.velocity - c2.velocity 
|restitution = Math.sqrt( c1.elasticity * c2.elasticity );
|impulse = collisionNormal.dot( relativeVelocity.getProduct( -( 1 + restitution ) ) );
|impulse /= collisionNormal.dot( collisionNormal.getProduct( 1 / c1.mass + 1 / c2.mass ) );
|reactionA = collisionNormal.getProduct( impulse / c1.mass );
|reactionB = collisionNormal.getProduct( -impulse / c2.mass );
|g1.velocity = c1.velocity.getSum( reactionA ).getProduct( 1 - t ); 
|g2.velocity = c2.velocity.getSum( reactionB ).getProduct( 1 - t );
| posx posy velx vely elas mass 
|-------------------------------
|:react | 'b1 'b2 t -- 'b1 'b2
|g1.position = c1.position + c1.velocity * t 
|g2.position = c2.position + c2.velocity * t
|cDiff = g2.position-g1.position 
|collisionNormal = cDiff.getUnit();
|relativeVelocity = c1.velocity - c2.velocity
|mpulse = collisionNormal.dot( relativeVelocity.getProduct( -( 1 + Math.sqrt( c1.elasticity * c2.elasticity ) ) ) );
|impulse /= collisionNormal.dot( collisionNormal.getProduct( 1 / c1.mass + 1 / c2.mass ) );
|reactionA = collisionNormal.getProduct( impulse / c1.mass );
|reactionB = collisionNormal.getProduct( -impulse / c2.mass );
|g1.velocity = c1.velocity.getSum( reactionA ).getProduct( 1 - t );
|g2.velocity = c2.velocity.getSum( reactionB ).getProduct( 1 - t );
| vpos vvel rotdim vrotvdim elas mass 
| vectores

:v+ | v1 v2 -- v3
	over 16 >> over 16 >> + 16 << >r + $ffff and r> or ; 
:vdot | v1 v2 -- d
	over 16 >> over 16 >> * >r
	$ffff and swap $ffff and * r> + ;

:vqs | x y x y -- x y x y d
	pick3 pick2 - dup * pick3 pick2 - dup * + ;

:distancia | x y x y -- x^2+y^2
	rot - dup * swap rot - dup * + ;

#xt #yt

:inpolisuma | x y -- 0/1
	'yt ! 'xt ! 0
	'lineas lineas> over  =? (  3drop 0 ; )
	4 - @ d>xy rot  
	( lineas> <? )( | x1 y1 adr
		>r r@+ d>xy | x1 y1 x2 y2
		2swap "%d,%d " print 
		r> ) drop
	"%d,%d " print  ;

:in? |a b c -- 1/0 esta c entre a y b ?
	swap >? ( 2drop 0 ; )	>? ( drop 0 ; ) drop 1	;

:2sort | a b -- min max
	over <? ( swap ) 	;

|---------- punto en poligono
#inside

:entre | x1 y1 x2 y2 -- x1 y1
	pick3 xt pick3 | x1 y1 x2 y2 x1 xt x2
	<=? ( >=? ( 3drop ; ) )( <? ( 3drop ; ) ) | x1 y1 x2 y2 x1 
	pick2 <? ( pick3 2swap )( pick3 ) | x1 y1 x1 y1 x2 y2
	swap pick3 - | x1 y1 'x1 'y1 'y2 a'
	yt pick3 - *  >r | x1 y1 'x1 'y1 'y2	 r: a | a= x2 x1 - yt y1 - *
	rot xt swap - | x1 y1 'y1 'y2 b'
	swap rot - * r> | x1 y1 b a | b = xt x1 - y2 y1 - *
	>?  ( inside 1 xor 'inside ! ) 
	drop ;

:adentro? | x y -- 0/1
	'yt ! 'xt ! 0 'inside !
	'lineas lineas> |over  =? (  2drop 0 ; )
	4 - @ d>xy | 2dup op 
	rot  
	( lineas> <? )( | x1 y1 adr
		>r r@+ d>xy 2swap | x1 y1 x2 y2
		entre	|	2over op 2dup line
		r> ) 3drop inside ;

|--------------------- version2
:entred | p1 p2 -- p1
	over d>x xt pick2 d>x 
	<=? ( >=? ( 2drop ; ) )( <? ( 2drop ; ) ) | v1 v2  x1 
	over d>x <? ( pick2 d>y rot d>xy 2swap )( pick2 d>y rot d>xy )
	swap pick3 - yt pick3 - *  >r | p1 'x1 'y1 'y2	 r: a | a= x2 x1 - yt y1 - *
	rot xt swap - swap rot - * r> | p1 b a | b = xt x1 - y2 y1 - *
	>?  ( inside 1 xor 'inside ! ) |inside 1 xor 'inside ! ) 
	drop ;

:adentrod? | x y adr -- 1/0
	>r 'yt ! 'xt ! 0 'inside !
	r@+ 0? ( rdrop ; ) dup
	( r@+ 1? )( swap entred ) drop
	entred drop rdrop inside ;


