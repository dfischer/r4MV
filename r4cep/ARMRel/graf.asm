	TTL	C:\Documents and Settings\Administrador\Escritorio\r4\r4sources\r4cep\graf.cpp

	AREA	|.drectve|, DRECTVE
	DCB	"-defaultlib:coredll.lib "
	DCB	"-defaultlib:corelibc.lib "

	EXPORT	|?gr_buffer@@3PAKA| [ DATA ]		; gr_buffer
	EXPORT	|?gr_ancho@@3HA| [ DATA ]		; gr_ancho
	EXPORT	|?gr_alto@@3HA| [ DATA ]		; gr_alto
	EXPORT	|?gr_sizescreen@@3HA| [ DATA ]		; gr_sizescreen
	EXPORT	|?gr_color1@@3GA| [ DATA ]		; gr_color1
	EXPORT	|?gr_color2@@3GA| [ DATA ]		; gr_color2
	EXPORT	|?col1@@3GA| [ DATA ]			; col1
	EXPORT	|?col2@@3GA| [ DATA ]			; col2
	EXPORT	|?gr_alphav@@3EA| [ DATA ]		; gr_alphav
	EXPORT	|?MA@@3HA| [ DATA ]			; MA
	EXPORT	|?MB@@3HA| [ DATA ]			; MB
	EXPORT	|?MTX@@3HA| [ DATA ]			; MTX
	EXPORT	|?MTY@@3HA| [ DATA ]			; MTY
	EXPORT	|?mTex@@3PAHA| [ DATA ]			; mTex
	EXPORT	|?gr_redraw@@3P6AXXZA| [ DATA ]		; gr_redraw
	EXPORT	|?gr_drawre@@3P6AXXZA| [ DATA ]		; gr_drawre
	EXPORT	|?gr_pixel@@3P6AXPAG@ZA| [ DATA ]	; gr_pixel
	EXPORT	|?gr_pixela@@3P6AXPAGE@ZA| [ DATA ]	; gr_pixela
	EXPORT	|?fillpoly@@3P6AXHPAUSegm@@0@ZA| [ DATA ] ; fillpoly
	EXPORT	|?tablainc@@3PAHA| [ DATA ]		; tablainc
	EXPORT	|?gr_ypitch@@3HA| [ DATA ]		; gr_ypitch
	EXPORT	|?segmentos@@3PAUSegm@@A| [ DATA ]	; segmentos
	EXPORT	|?pact@@3PAPAUSegm@@A| [ DATA ]		; pact
	EXPORT	|?actual@@3PAPAUSegm@@A| [ DATA ]	; actual
	EXPORT	|?xquisc@@3PAPAUSegm@@A| [ DATA ]	; xquisc
	EXPORT	|?xquis@@3PAPAUSegm@@A| [ DATA ]	; xquis
	EXPORT	|?cntSegm@@3HA| [ DATA ]		; cntSegm
	EXPORT	|?yMin@@3HA| [ DATA ]			; yMin
	EXPORT	|?yMax@@3HA| [ DATA ]			; yMax
	EXPORT	|?colorr@@3GA| [ DATA ]			; colorr
	EXPORT	|?colorg@@3GA| [ DATA ]			; colorg
	EXPORT	|?colorb@@3GA| [ DATA ]			; colorb
	EXPORT	|?RED_MASK@@3GA| [ DATA ]		; RED_MASK
	EXPORT	|?GREEN_MASK@@3GA| [ DATA ]		; GREEN_MASK
	EXPORT	|?BLUE_MASK@@3GA| [ DATA ]		; BLUE_MASK

	AREA	|.bss|, NOINIT
|?gr_buffer@@3PAKA| % 0x4				; gr_buffer
|?gr_ancho@@3HA| % 0x4					; gr_ancho
|?gr_alto@@3HA| % 0x4					; gr_alto
|?gr_sizescreen@@3HA| % 0x4				; gr_sizescreen
|?gr_color1@@3GA| % 0x2					; gr_color1
|?gr_color2@@3GA| % 0x2					; gr_color2
|?col1@@3GA| %	0x2					; col1
|?col2@@3GA| %	0x2					; col2
|?gr_alphav@@3EA| % 0x1					; gr_alphav
|?MA@@3HA| %	0x4					; MA
|?MB@@3HA| %	0x4					; MB
|?MTX@@3HA| %	0x4					; MTX
|?MTY@@3HA| %	0x4					; MTY
|?mTex@@3PAHA| % 0x4					; mTex
|?gr_redraw@@3P6AXXZA| % 0x4				; gr_redraw
|?gr_drawre@@3P6AXXZA| % 0x4				; gr_drawre
|?gr_pixel@@3P6AXPAG@ZA| % 0x4				; gr_pixel
|?gr_pixela@@3P6AXPAGE@ZA| % 0x4			; gr_pixela
|?fillpoly@@3P6AXHPAUSegm@@0@ZA| % 0x4			; fillpoly
|?gr_ypitch@@3HA| % 0x4					; gr_ypitch
|?segmentos@@3PAUSegm@@A| % 0x4000			; segmentos
|?pact@@3PAPAUSegm@@A| % 0x4				; pact
|?actual@@3PAPAUSegm@@A| % 0x400			; actual
|?xquisc@@3PAPAUSegm@@A| % 0x4				; xquisc
|?xquis@@3PAPAUSegm@@A| % 0x400				; xquis
|?cntSegm@@3HA| % 0x4					; cntSegm
|?yMin@@3HA| %	0x4					; yMin
|?yMax@@3HA| %	0x4					; yMax
|?colorr@@3GA| % 0x2					; colorr
|?colorg@@3GA| % 0x2					; colorg
|?colorb@@3GA| % 0x2					; colorb
|?RED_MASK@@3GA| % 0x2					; RED_MASK
|?GREEN_MASK@@3GA| % 0x2				; GREEN_MASK
|?BLUE_MASK@@3GA| % 0x2					; BLUE_MASK

	AREA	|.data|, DATA
|?tablainc@@3PAHA| DCD 0x0				; tablainc
	DCD	0xff00
	DCD	0x7f80
	DCD	0x5500
	DCD	0x3fc0
	DCD	0x3300
	DCD	0x2a80
	DCD	0x246d
	DCD	0x1fe0
	DCD	0x1c55
	DCD	0x1980
	DCD	0x172e
	DCD	0x1540
	DCD	0x139d
	DCD	0x1236
	DCD	0x1100
	DCD	0xff0
	DCD	0xf00
	DCD	0xe2a
	DCD	0xd6b
	DCD	0xcc0
	DCD	0xc24
	DCD	0xb97
	DCD	0xb16
	DCD	0xaa0
	DCD	0xa33
	DCD	0x9ce
	DCD	0x971
	DCD	0x91b
	DCD	0x8cb
	DCD	0x880
	DCD	0x839
	DCD	0x7f8
	DCD	0x7ba
	DCD	0x780
	DCD	0x749
	DCD	0x715
	DCD	0x6e4
	DCD	0x6b5
	DCD	0x689
	DCD	0x660
	DCD	0x638
	DCD	0x612
	DCD	0x5ee
	DCD	0x5cb
	DCD	0x5aa
	DCD	0x58b
	DCD	0x56c
	DCD	0x550
	DCD	0x534
	DCD	0x519
	DCD	0x500
	DCD	0x4e7
	DCD	0x4cf
	DCD	0x4b8
	DCD	0x4a2
	DCD	0x48d
	DCD	0x479
	DCD	0x465
	DCD	0x452
	DCD	0x440
	DCD	0x42e
	DCD	0x41c
	DCD	0x40c
	DCD	0x3fc
	DCD	0x3ec
	DCD	0x3dd
	DCD	0x3ce
	DCD	0x3c0
	DCD	0x3b2
	DCD	0x3a4
	DCD	0x397
	DCD	0x38a
	DCD	0x37e
	DCD	0x372
	DCD	0x366
	DCD	0x35a
	DCD	0x34f
	DCD	0x344
	DCD	0x33a
	DCD	0x330
	DCD	0x325
	DCD	0x31c
	DCD	0x312
	DCD	0x309
	DCD	0x300
	DCD	0x2f7
	DCD	0x2ee
	DCD	0x2e5
	DCD	0x2dd
	DCD	0x2d5
	DCD	0x2cd
	DCD	0x2c5
	DCD	0x2bd
	DCD	0x2b6
	DCD	0x2af
	DCD	0x2a8
	DCD	0x2a0
	DCD	0x29a
	DCD	0x293
	DCD	0x28c
	DCD	0x286
	DCD	0x280
	DCD	0x279
	DCD	0x273
	DCD	0x26d
	DCD	0x267
	DCD	0x262
	DCD	0x25c
	DCD	0x256
	DCD	0x251
	DCD	0x24c
	DCD	0x246
	DCD	0x241
	DCD	0x23c
	DCD	0x237
	DCD	0x232
	DCD	0x22d
	DCD	0x229
	DCD	0x224
	DCD	0x220
	DCD	0x21b
	DCD	0x217
	DCD	0x212
	DCD	0x20e
	DCD	0x20a
	DCD	0x206
	DCD	0x202
	DCD	0x1fe
	DCD	0x1fa
	DCD	0x1f6
	DCD	0x1f2
	DCD	0x1ee
	DCD	0x1ea
	DCD	0x1e7
	DCD	0x1e3
	DCD	0x1e0
	DCD	0x1dc
	DCD	0x1d9
	DCD	0x1d5
	DCD	0x1d2
	DCD	0x1ce
	DCD	0x1cb
	DCD	0x1c8
	DCD	0x1c5
	DCD	0x1c2
	DCD	0x1bf
	DCD	0x1bc
	DCD	0x1b9
	DCD	0x1b6
	DCD	0x1b3
	DCD	0x1b0
	DCD	0x1ad
	DCD	0x1aa
	DCD	0x1a7
	DCD	0x1a5
	DCD	0x1a2
	DCD	0x19f
	DCD	0x19d
	DCD	0x19a
	DCD	0x198
	DCD	0x195
	DCD	0x192
	DCD	0x190
	DCD	0x18e
	DCD	0x18b
	DCD	0x189
	DCD	0x186
	DCD	0x184
	DCD	0x182
	DCD	0x180
	DCD	0x17d
	DCD	0x17b
	DCD	0x179
	DCD	0x177
	DCD	0x175
	DCD	0x172
	DCD	0x170
	DCD	0x16e
	DCD	0x16c
	DCD	0x16a
	DCD	0x168
	DCD	0x166
	DCD	0x164
	DCD	0x162
	DCD	0x160
	DCD	0x15e
	DCD	0x15d
	DCD	0x15b
	DCD	0x159
	DCD	0x157
	DCD	0x155
	DCD	0x154
	DCD	0x152
	DCD	0x150
	DCD	0x14e
	DCD	0x14d
	DCD	0x14b
	DCD	0x149
	DCD	0x148
	DCD	0x146
	DCD	0x144
	DCD	0x143
	DCD	0x141
	DCD	0x140
	DCD	0x13e
	DCD	0x13c
	DCD	0x13b
	DCD	0x139
	DCD	0x138
	DCD	0x136
	DCD	0x135
	DCD	0x133
	DCD	0x132
	DCD	0x131
	DCD	0x12f
	DCD	0x12e
	DCD	0x12c
	DCD	0x12b
	DCD	0x12a
	DCD	0x128
	DCD	0x127
	DCD	0x126
	DCD	0x124
	DCD	0x123
	DCD	0x122
	DCD	0x120
	DCD	0x11f
	DCD	0x11e
	DCD	0x11d
	DCD	0x11b
	DCD	0x11a
	DCD	0x119
	DCD	0x118
	DCD	0x116
	DCD	0x115
	DCD	0x114
	DCD	0x113
	DCD	0x112
	DCD	0x111
	DCD	0x110
	DCD	0x10e
	DCD	0x10d
	DCD	0x10c
	DCD	0x10b
	DCD	0x10a
	DCD	0x109
	DCD	0x108
	DCD	0x107
	DCD	0x106
	DCD	0x105
	DCD	0x104
	DCD	0x103
	DCD	0x102
	DCD	0x101
	DCD	0x100

	AREA	|.rdata|, DATA, READONLY
|fontv12| DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x82
	DCB	0x44
	DCB	0x28
	DCB	0x10
	DCB	0x28
	DCB	0x44
	DCB	0x82
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x0
	DCB	0x10
	DCB	0x10
	DCB	0x38
	DCB	0x38
	DCB	0x7c
	DCB	0x7c
	DCB	0xfe
	DCB	0xfe
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x0
	DCB	0xfe
	DCB	0xfe
	DCB	0x7c
	DCB	0x7c
	DCB	0x38
	DCB	0x38
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x24
	DCB	0x24
	DCB	0x7e
	DCB	0x24
	DCB	0x24
	DCB	0x24
	DCB	0x7e
	DCB	0x24
	DCB	0x24
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x10
	DCB	0x38
	DCB	0x54
	DCB	0x50
	DCB	0x30
	DCB	0x18
	DCB	0x14
	DCB	0x54
	DCB	0x38
	DCB	0x10
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x30
	DCB	0x49
	DCB	0x32
	DCB	0x4
	DCB	0x8
	DCB	0x10
	DCB	0x26
	DCB	0x49
	DCB	0x6
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x20
	DCB	0x50
	DCB	0x50
	DCB	0x20
	DCB	0x20
	DCB	0x54
	DCB	0x48
	DCB	0x48
	DCB	0x34
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x20
	DCB	0x2
	DCB	0x0
	DCB	0x40
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x40
	DCB	0x3
	DCB	0x0
	DCB	0x0
	DCB	0x50
	DCB	0x20
	DCB	0x50
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x10
	DCB	0x10
	DCB	0x7c
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x8
	DCB	0x8
	DCB	0x8
	DCB	0x10
	DCB	0x10
	DCB	0x20
	DCB	0x20
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x0
	DCB	0x10
	DCB	0x70
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x4
	DCB	0x4
	DCB	0x8
	DCB	0x10
	DCB	0x20
	DCB	0x40
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x4
	DCB	0x4
	DCB	0x18
	DCB	0x4
	DCB	0x4
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x8
	DCB	0x18
	DCB	0x18
	DCB	0x28
	DCB	0x28
	DCB	0x48
	DCB	0x7c
	DCB	0x8
	DCB	0x8
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x44
	DCB	0x4
	DCB	0x4
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x7c
	DCB	0x4
	DCB	0x8
	DCB	0x8
	DCB	0x10
	DCB	0x10
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x4
	DCB	0x4
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x8
	DCB	0x10
	DCB	0x20
	DCB	0x40
	DCB	0x20
	DCB	0x10
	DCB	0x8
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x7c
	DCB	0x0
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x20
	DCB	0x10
	DCB	0x8
	DCB	0x10
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x4
	DCB	0x4
	DCB	0x8
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x5c
	DCB	0x5c
	DCB	0x58
	DCB	0x40
	DCB	0x40
	DCB	0x38
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x10
	DCB	0x10
	DCB	0x28
	DCB	0x28
	DCB	0x44
	DCB	0x44
	DCB	0x7c
	DCB	0x82
	DCB	0x82
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x78
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x78
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x78
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x3c
	DCB	0x42
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x78
	DCB	0x44
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x44
	DCB	0x78
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x3c
	DCB	0x42
	DCB	0x40
	DCB	0x40
	DCB	0x4e
	DCB	0x42
	DCB	0x42
	DCB	0x46
	DCB	0x3a
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x7e
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x0
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x90
	DCB	0x90
	DCB	0x60
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x44
	DCB	0x48
	DCB	0x50
	DCB	0x60
	DCB	0x60
	DCB	0x50
	DCB	0x48
	DCB	0x44
	DCB	0x42
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x41
	DCB	0x41
	DCB	0x63
	DCB	0x63
	DCB	0x55
	DCB	0x55
	DCB	0x49
	DCB	0x49
	DCB	0x41
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x42
	DCB	0x62
	DCB	0x62
	DCB	0x52
	DCB	0x52
	DCB	0x4a
	DCB	0x46
	DCB	0x46
	DCB	0x42
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x3c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x7c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x3c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x4a
	DCB	0x46
	DCB	0x3c
	DCB	0x2
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x7c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x7c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x40
	DCB	0x40
	DCB	0x38
	DCB	0x4
	DCB	0x4
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x7c
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x82
	DCB	0x82
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x28
	DCB	0x28
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x41
	DCB	0x41
	DCB	0x41
	DCB	0x41
	DCB	0x22
	DCB	0x2a
	DCB	0x2a
	DCB	0x2a
	DCB	0x14
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x41
	DCB	0x41
	DCB	0x22
	DCB	0x14
	DCB	0x8
	DCB	0x14
	DCB	0x22
	DCB	0x41
	DCB	0x41
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x82
	DCB	0x82
	DCB	0x44
	DCB	0x28
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0xfe
	DCB	0x2
	DCB	0x4
	DCB	0x8
	DCB	0x10
	DCB	0x20
	DCB	0x40
	DCB	0x80
	DCB	0xfe
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x60
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x60
	DCB	0x4
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x20
	DCB	0x20
	DCB	0x10
	DCB	0x10
	DCB	0x8
	DCB	0x8
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x60
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x60
	DCB	0x5
	DCB	0x10
	DCB	0x28
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xfc
	DCB	0x2
	DCB	0x0
	DCB	0x40
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x4
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x78
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x40
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x4
	DCB	0x4
	DCB	0x4
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x7c
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x40
	DCB	0x60
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x4
	DCB	0x78
	DCB	0x5
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x58
	DCB	0x64
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x5
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x48
	DCB	0x50
	DCB	0x60
	DCB	0x50
	DCB	0x48
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x76
	DCB	0x49
	DCB	0x49
	DCB	0x49
	DCB	0x49
	DCB	0x49
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x58
	DCB	0x64
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x78
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x78
	DCB	0x40
	DCB	0x40
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x4
	DCB	0x4
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x30
	DCB	0x48
	DCB	0x20
	DCB	0x10
	DCB	0x48
	DCB	0x30
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x60
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x4c
	DCB	0x34
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x44
	DCB	0x44
	DCB	0x28
	DCB	0x28
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x49
	DCB	0x49
	DCB	0x55
	DCB	0x55
	DCB	0x22
	DCB	0x22
	DCB	0x0
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x48
	DCB	0x48
	DCB	0x30
	DCB	0x30
	DCB	0x48
	DCB	0x48
	DCB	0x0
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x30
	DCB	0x20
	DCB	0x20
	DCB	0xc0
	DCB	0x4
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x78
	DCB	0x8
	DCB	0x10
	DCB	0x20
	DCB	0x40
	DCB	0x78
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x10
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x40
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x10
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x3
	DCB	0x40
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x10
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x0
	DCB	0x32
	DCB	0x4c
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0xf0
	DCB	0x40
	DCB	0xe0
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x0
	DCB	0x10
	DCB	0x10
	DCB	0x38
	DCB	0x38
	DCB	0x7c
	DCB	0x7c
	DCB	0xfe
	DCB	0xfe
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x0
	DCB	0xfe
	DCB	0xfe
	DCB	0x7c
	DCB	0x7c
	DCB	0x38
	DCB	0x38
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x60
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x8
	DCB	0x38
	DCB	0x44
	DCB	0x40
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x20
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x30
	DCB	0x48
	DCB	0x40
	DCB	0x20
	DCB	0x70
	DCB	0x20
	DCB	0x40
	DCB	0x40
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x44
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x28
	DCB	0x7c
	DCB	0x10
	DCB	0x7c
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x5
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x20
	DCB	0x50
	DCB	0x48
	DCB	0x24
	DCB	0x14
	DCB	0x8
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0xa0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x8
	DCB	0x0
	DCB	0x1e
	DCB	0x21
	DCB	0x4c
	DCB	0x50
	DCB	0x4c
	DCB	0x21
	DCB	0x1e
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x0
	DCB	0x60
	DCB	0x30
	DCB	0x50
	DCB	0x70
	DCB	0x0
	DCB	0x70
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x14
	DCB	0x28
	DCB	0x50
	DCB	0x28
	DCB	0x14
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x7c
	DCB	0x4
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x60
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x1c
	DCB	0x22
	DCB	0x5d
	DCB	0x59
	DCB	0x55
	DCB	0x22
	DCB	0x1c
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0xfc
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x0
	DCB	0x20
	DCB	0x50
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x10
	DCB	0x10
	DCB	0x7c
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0xc0
	DCB	0x20
	DCB	0x40
	DCB	0x80
	DCB	0xe0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0xc0
	DCB	0x20
	DCB	0x40
	DCB	0x20
	DCB	0xc0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x20
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x74
	DCB	0x40
	DCB	0x40
	DCB	0x5
	DCB	0x0
	DCB	0x3c
	DCB	0x7c
	DCB	0x7c
	DCB	0x7c
	DCB	0x3c
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x60
	DCB	0x2
	DCB	0x0
	DCB	0x20
	DCB	0x60
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x0
	DCB	0x70
	DCB	0x50
	DCB	0x50
	DCB	0x70
	DCB	0x0
	DCB	0x70
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x50
	DCB	0x28
	DCB	0x14
	DCB	0x28
	DCB	0x50
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x20
	DCB	0x61
	DCB	0x22
	DCB	0x24
	DCB	0x29
	DCB	0x13
	DCB	0x25
	DCB	0x47
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x20
	DCB	0x61
	DCB	0x22
	DCB	0x24
	DCB	0x2e
	DCB	0x11
	DCB	0x22
	DCB	0x44
	DCB	0x7
	DCB	0x0
	DCB	0x0
	DCB	0x7
	DCB	0x0
	DCB	0x60
	DCB	0x11
	DCB	0x22
	DCB	0x14
	DCB	0x69
	DCB	0x13
	DCB	0x25
	DCB	0x47
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x10
	DCB	0x0
	DCB	0x10
	DCB	0x10
	DCB	0x20
	DCB	0x40
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x6
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x28
	DCB	0x28
	DCB	0x44
	DCB	0x44
	DCB	0x7c
	DCB	0x82
	DCB	0x82
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x28
	DCB	0x28
	DCB	0x44
	DCB	0x44
	DCB	0x7c
	DCB	0x82
	DCB	0x82
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x28
	DCB	0x0
	DCB	0x10
	DCB	0x28
	DCB	0x28
	DCB	0x44
	DCB	0x44
	DCB	0x7c
	DCB	0x82
	DCB	0x82
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x58
	DCB	0x10
	DCB	0x10
	DCB	0x28
	DCB	0x28
	DCB	0x44
	DCB	0x44
	DCB	0x7c
	DCB	0x82
	DCB	0x82
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x10
	DCB	0x10
	DCB	0x28
	DCB	0x28
	DCB	0x44
	DCB	0x44
	DCB	0x7c
	DCB	0x82
	DCB	0x82
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x28
	DCB	0x10
	DCB	0x10
	DCB	0x28
	DCB	0x28
	DCB	0x44
	DCB	0x44
	DCB	0x7c
	DCB	0x82
	DCB	0x82
	DCB	0x0
	DCB	0x0
	DCB	0x8
	DCB	0x0
	DCB	0x1f
	DCB	0x18
	DCB	0x28
	DCB	0x28
	DCB	0x4f
	DCB	0x78
	DCB	0x48
	DCB	0x88
	DCB	0x8f
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x3c
	DCB	0x42
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x42
	DCB	0x3c
	DCB	0x8
	DCB	0x18
	DCB	0x5
	DCB	0x10
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x10
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x28
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x40
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x40
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0xa0
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x78
	DCB	0x44
	DCB	0x42
	DCB	0x42
	DCB	0xf2
	DCB	0x42
	DCB	0x42
	DCB	0x44
	DCB	0x78
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x4c
	DCB	0x42
	DCB	0x62
	DCB	0x62
	DCB	0x52
	DCB	0x52
	DCB	0x4a
	DCB	0x46
	DCB	0x46
	DCB	0x42
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x8
	DCB	0x3c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x10
	DCB	0x3c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x24
	DCB	0x3c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x4c
	DCB	0x3c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x3c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x44
	DCB	0x28
	DCB	0x10
	DCB	0x28
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x3e
	DCB	0x46
	DCB	0x4a
	DCB	0x4a
	DCB	0x52
	DCB	0x52
	DCB	0x62
	DCB	0x62
	DCB	0x7c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x8
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x10
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x24
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x10
	DCB	0x82
	DCB	0x82
	DCB	0x44
	DCB	0x28
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x6
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x7c
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x7c
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x30
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x58
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x58
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x20
	DCB	0x10
	DCB	0x0
	DCB	0x38
	DCB	0x4
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x8
	DCB	0x10
	DCB	0x0
	DCB	0x38
	DCB	0x4
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x10
	DCB	0x28
	DCB	0x0
	DCB	0x38
	DCB	0x4
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x34
	DCB	0x58
	DCB	0x0
	DCB	0x38
	DCB	0x4
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x24
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x4
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x10
	DCB	0x28
	DCB	0x10
	DCB	0x0
	DCB	0x38
	DCB	0x4
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x3c
	DCB	0x0
	DCB	0x0
	DCB	0x9
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x3b
	DCB	0x4
	DCB	0x3f
	DCB	0x44
	DCB	0x44
	DCB	0x3b
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x40
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x10
	DCB	0x30
	DCB	0x5
	DCB	0x0
	DCB	0x20
	DCB	0x10
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x7c
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x8
	DCB	0x10
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x7c
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x10
	DCB	0x28
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x7c
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x7c
	DCB	0x40
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x80
	DCB	0x40
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x0
	DCB	0x10
	DCB	0x20
	DCB	0x0
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x0
	DCB	0x20
	DCB	0x50
	DCB	0x0
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x0
	DCB	0x50
	DCB	0x0
	DCB	0x0
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x20
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x28
	DCB	0x10
	DCB	0x28
	DCB	0x8
	DCB	0x3c
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x34
	DCB	0x58
	DCB	0x0
	DCB	0x58
	DCB	0x64
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x20
	DCB	0x10
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x8
	DCB	0x10
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x10
	DCB	0x28
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x34
	DCB	0x58
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x38
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x38
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x10
	DCB	0x0
	DCB	0x7c
	DCB	0x0
	DCB	0x10
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x3c
	DCB	0x4c
	DCB	0x54
	DCB	0x54
	DCB	0x64
	DCB	0x78
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x20
	DCB	0x10
	DCB	0x0
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x4c
	DCB	0x34
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x8
	DCB	0x10
	DCB	0x0
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x4c
	DCB	0x34
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x10
	DCB	0x28
	DCB	0x0
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x4c
	DCB	0x34
	DCB	0x0
	DCB	0x0
	DCB	0x5
	DCB	0x0
	DCB	0x44
	DCB	0x0
	DCB	0x0
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x4c
	DCB	0x34
	DCB	0x0
	DCB	0x0
	DCB	0x4
	DCB	0x0
	DCB	0x10
	DCB	0x20
	DCB	0x0
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x30
	DCB	0x20
	DCB	0x20
	DCB	0xc0
	DCB	0x5
	DCB	0x0
	DCB	0x40
	DCB	0x40
	DCB	0x40
	DCB	0x78
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x44
	DCB	0x78
	DCB	0x40
	DCB	0x40
	DCB	0x4
	DCB	0x0
	DCB	0x48
	DCB	0x0
	DCB	0x0
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x48
	DCB	0x30
	DCB	0x20
	DCB	0x20
	DCB	0xc0
|bit|	DCB	0x80
	DCB	0x40
	DCB	0x20
	DCB	0x10
	DCB	0x8
	DCB	0x4
	DCB	0x2
	DCB	0x1
	EXPORT	|?gr_clrscr@@YAXXZ|			; gr_clrscr
; File C:\Documents and Settings\Administrador\Escritorio\r4\r4sources\r4cep\graf.cpp

	AREA	|.text| { |?gr_clrscr@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_clrscr@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_clrscr@@YAXXZ| } ; comdat associative
|$T25802| DCD	|?gr_clrscr@@YAXXZ|
	DCD	0x40002000

	AREA	|.text| { |?gr_clrscr@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_clrscr@@YAXXZ| PROC				; gr_clrscr

; 51   : {

|$M25800|

; 52   : register DWORD col=(gr_color2<<16)+gr_color2;

	ldr       r0, [pc, #0x74]  ;  pc+8+116 = 0000007C
	mov       r2, #1, 16  ; 0x10000 = 65536
	orr       r2, r2, #1

; 53   : register DWORD *pp=gr_buffer;

	ldr       r1, [pc, #0x64]  ;  pc+8+100 = 00000078
	ldrh      r3, [r0]
	ldr       r1, [r1]
	mul       r0, r3, r2

; 54   : register DWORD *pf=gr_buffer+gr_sizescreen;

	ldr       r2, [pc, #0x50]  ;  pc+8+80 = 00000074
	ldr       r2, [r2]
	add       r2, r1, r2, lsl #2
|$L24791|

; 55   : do {
; 56   : 	*pp=col;pp++;*pp=col;pp++;*pp=col;pp++;*pp=col;pp++;

	str       r0, [r1]
	add       r1, r1, #4
	str       r0, [r1]
	add       r1, r1, #4
	str       r0, [r1]
	add       r1, r1, #4
	str       r0, [r1]
	add       r1, r1, #4

; 57   : 	*pp=col;pp++;*pp=col;pp++;*pp=col;pp++;*pp=col;pp++;

	str       r0, [r1]
	add       r1, r1, #4
	str       r0, [r1]
	add       r1, r1, #4
	str       r0, [r1]
	add       r1, r1, #4
	str       r0, [r1]
	add       r1, r1, #4

; 58   : } while (pp<pf);

	cmp       r1, r2
	bcc       |$L24791|  ; 00000028

; 59   : }

	mov       pc, lr
|$L25803|
	DCD       |?gr_sizescreen@@3HA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_color2@@3GA|
|$M25801|

	ENDP  ; |?gr_clrscr@@YAXXZ|, gr_clrscr

	EXPORT	|?gr_redraw565@@YAXXZ|			; gr_redraw565
	IMPORT	|?update@@YAXXZ|			; update
	IMPORT	|__imp_?GXBeginDraw@@YAPAXXZ|
	IMPORT	|__imp_?GXEndDraw@@YAHXZ|

	AREA	|.text| { |?gr_redraw565@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_redraw565@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_redraw565@@YAXXZ| } ; comdat associative
|$T25811| DCD	|?gr_redraw565@@YAXXZ|
	DCD	0x40003d01

	AREA	|.text| { |?gr_redraw565@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_redraw565@@YAXXZ| PROC				; gr_redraw565

; 62   : {

	stmdb     sp!, {lr}  ; stmfd
|$M25809|

; 63   : register DWORD *pbuffer=(DWORD*)GXBeginDraw();

	ldr       r3, [pc, #0xC]  ;  pc+8+12 = 00000018
	ldr       r3, [r3]
	mov       lr, pc
	mov       pc, r3
	b         |$L25808|  ; 00000030
|$L25812|
	DCD       |__imp_?GXBeginDraw@@YAPAXXZ|
|$L24802|

; 66   : 	update();

	bl        |?update@@YAXXZ|  ; 00000024

; 67   : 	pbuffer=(DWORD*)GXBeginDraw();

	ldr       r3, [pc, #-0x10]  ;  pc+8-16 = 00000018
	ldr       r3, [r3]
	mov       lr, pc
	mov       pc, r3
|$L25808|
	movs      r1, r0

; 64   : register DWORD *punt,*ult;
; 65   : while (pbuffer==NULL) {// se detiene cuando lo interrumpen

	beq       |$L24802|  ; 0000001C

; 68   : 	};
; 69   : punt=gr_buffer;ult=gr_buffer+gr_sizescreen;// -7

	ldr       r0, [pc, #0xB0]  ;  pc+8+176 = 000000F0
	ldr       r2, [pc, #0xA8]  ;  pc+8+168 = 000000EC
	ldr       r0, [r0]
	ldr       r2, [r2]
	add       r2, r0, r2, lsl #2
|$L24805|

; 70   : do {
; 71   : 	*pbuffer++=*punt++;*pbuffer++=*punt++;*pbuffer++=*punt++;*pbuffer++=*punt++;

	ldr       r3, [r0]
	add       r0, r0, #4
	str       r3, [r1]
	add       r1, r1, #4
	ldr       r3, [r0]
	add       r0, r0, #4
	str       r3, [r1]
	add       r1, r1, #4
	ldr       r3, [r0]
	add       r0, r0, #4
	str       r3, [r1]
	add       r1, r1, #4
	ldr       r3, [r0]
	add       r0, r0, #4
	str       r3, [r1]
	add       r1, r1, #4

; 72   : 	*pbuffer++=*punt++;*pbuffer++=*punt++;*pbuffer++=*punt++;*pbuffer++=*punt++;

	ldr       r3, [r0]
	add       r0, r0, #4
	str       r3, [r1]
	add       r1, r1, #4
	ldr       r3, [r0]
	add       r0, r0, #4
	str       r3, [r1]
	add       r1, r1, #4
	ldr       r3, [r0]
	add       r0, r0, #4
	str       r3, [r1]
	add       r1, r1, #4
	ldr       r3, [r0]
	add       r0, r0, #4

; 73   : } while (punt<ult);

	cmp       r0, r2
	str       r3, [r1]
	add       r1, r1, #4
	bcc       |$L24805|  ; 0000004C

; 74   : GXEndDraw();

	ldr       r3, [pc, #0xC]  ;  pc+8+12 = 000000E8
	ldr       r3, [r3]
	mov       lr, pc
	mov       pc, r3

; 75   : }

	ldmia     sp!, {pc}  ; ldmfd
|$L25813|
	DCD       |__imp_?GXEndDraw@@YAHXZ|
	DCD       |?gr_sizescreen@@3HA|
	DCD       |?gr_buffer@@3PAKA|
|$M25810|

	ENDP  ; |?gr_redraw565@@YAXXZ|, gr_redraw565

	EXPORT	|?gr_redraw888@@YAXXZ|			; gr_redraw888

	AREA	|.text| { |?gr_redraw888@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_redraw888@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_redraw888@@YAXXZ| } ; comdat associative
|$T25817| DCD	|?gr_redraw888@@YAXXZ|
	DCD	0x40000100

	AREA	|.text| { |?gr_redraw888@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_redraw888@@YAXXZ| PROC				; gr_redraw888

; 78   : {

|$M25815|

; 79   : }

	mov       pc, lr
|$M25816|

	ENDP  ; |?gr_redraw888@@YAXXZ|, gr_redraw888

	EXPORT	|?_gr_pixels@@YAXPAG@Z|			; _gr_pixels
	EXPORT	|?_gr_pixela@@YAXPAGE@Z|		; _gr_pixela
	EXPORT	|?gr_init@@YAHXZ|			; gr_init
	EXPORT	|?_FlineaSolido@@YAXHPAUSegm@@0@Z|	; _FlineaSolido
	IMPORT	|__imp_?GXGetDisplayProperties@@YA?AUGXDisplayProperties@@XZ|
	IMPORT	|??2@YAPAXI@Z|				; operator new

	AREA	|.text| { |?gr_init@@YAHXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_init@@YAHXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_init@@YAHXZ| } ; comdat associative
|$T25833| DCD	|?gr_init@@YAHXZ|
	DCD	0x40007e02

	AREA	|.text| { |?gr_init@@YAHXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_init@@YAHXZ| PROC					; gr_init

; 86   : {

	stmdb     sp!, {lr}  ; stmfd
	sub       sp, sp, #0x18  ; 0x18 = 24
|$M25831|

; 87   : GXDisplayProperties disp=GXGetDisplayProperties();

	ldr       r3, [pc, #0x128]  ;  pc+8+296 = 00000138
	add       r0, sp, #0
	ldr       r3, [r3]
	mov       lr, pc
	mov       pc, r3
	add       r3, sp, #0
	mov       r2, #0x18  ; 0x18 = 24
|$L25828|
	ldrb      r1, [r0], #1
	subs      r2, r2, #1
	strb      r1, [r3], #1
	bgt       |$L25828|  ; 00000024

; 88   : gr_ancho=disp.cxWidth;

	ldr       r1, [sp]
	ldr       r0, [pc, #0xF4]  ;  pc+8+244 = 00000134

; 89   : gr_alto=disp.cyHeight;

	ldr       r2, [pc, #0xEC]  ;  pc+8+236 = 00000130
	str       r1, [r0]
	ldr       r0, [sp, #4]

; 90   : //gr_xpitch=disp.cbxPitch>>1;
; 91   : gr_ypitch=disp.cbyPitch>>1;

	ldr       r3, [sp, #0xC]  ; 0xC = 12
	str       r0, [r2]
	ldr       r2, [pc, #0xD4]  ;  pc+8+212 = 0000012C
	mov       r3, r3, asr #1
	str       r3, [r2]

; 92   : gr_sizescreen=(gr_ancho*gr_alto)>>1;// tamanio en DWORD

	mov       r3, r0
	mul       r1, r3, r1
	ldr       r2, [pc, #0xBC]  ;  pc+8+188 = 00000128

; 93   : //---- poligonos2
; 94   : cntSegm=0;

	mov       r3, #0
	mov       r1, r1, asr #1
	str       r1, [r2]

; 95   : yMin=gr_alto+1;

	add       r0, r0, #1
	ldr       r2, [pc, #0xA4]  ;  pc+8+164 = 00000124
	str       r3, [r2]
	ldr       r2, [pc, #0x98]  ;  pc+8+152 = 00000120
	str       r0, [r2]

; 96   : yMax=-1;

	mvn       r2, #0
	ldr       r0, [pc, #0x88]  ;  pc+8+136 = 0000011C
	str       r2, [r0]

; 97   : fillSol();

	ldr       r0, [pc, #0x7C]  ;  pc+8+124 = 00000118
	ldr       r2, [pc, #0x74]  ;  pc+8+116 = 00000114
	str       r2, [r0]

; 98   : 
; 99   : gr_buffer=new DWORD[gr_sizescreen];//gr_buffer=(DWORD*)LocalAlloc(LMEM_FIXED,gr_sizescreen);

	mov       r0, r1, lsl #2
	bl        |??2@YAPAXI@Z|  ; 000000AC
	ldr       r1, [pc, #0x60]  ;  pc+8+96 = 00000110
	cmp       r0, #0
	str       r0, [r1]

; 100  : if (gr_buffer==NULL) return -1;// no hay memoria

	mvneq     r0, #0
	beq       |$L24816|  ; 000001C8

; 101  : //---- colores
; 102  : 
; 103  : if (disp.ffFormat|kfDirect565) {		

	ldr       r0, [sp, #0x14]  ; 0x14 = 20
	orrs      r3, r0, #0x80  ; 0x80 = 128
	beq       |$L24822|  ; 0000013C

; 104  : 	gr_redraw=gr_redraw565;//	gr_drawre=gr_drawre565;

	ldr       r0, [pc, #0x3C]  ;  pc+8+60 = 0000010C
	ldr       r1, [pc, #0x34]  ;  pc+8+52 = 00000108
	str       r1, [r0]

; 105  : 	RED_MASK=0xF800;GREEN_MASK=0x07E0;BLUE_MASK=0x001F;

	mov       r1, #0x3E, 22  ; 0xF800 = 63488
	ldr       r0, [pc, #0x24]  ;  pc+8+36 = 00000104
	strh      r1, [r0]
	mov       r1, #0x7E, 28  ; 0x7E0 = 2016
|$L25830|
	ldr       r0, [pc, #0x14]  ;  pc+8+20 = 00000100
	strh      r1, [r0]
	mov       r1, #0x1F  ; 0x1F = 31
	ldr       r0, [pc, #4]  ;  pc+8+4 = 000000FC
	strh      r1, [r0]

; 106  : } else if (disp.ffFormat|kfDirect555) { 

	b         |$L24826|  ; 00000170
|$L25834|
	DCD       |?BLUE_MASK@@3GA|
	DCD       |?GREEN_MASK@@3GA|
	DCD       |?RED_MASK@@3GA|
	DCD       |?gr_redraw565@@YAXXZ|
	DCD       |?gr_redraw@@3P6AXXZA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?_FlineaSolido@@YAXHPAUSegm@@0@Z|
	DCD       |?fillpoly@@3P6AXHPAUSegm@@0@ZA|
	DCD       |?yMax@@3HA|
	DCD       |?yMin@@3HA|
	DCD       |?cntSegm@@3HA|
	DCD       |?gr_sizescreen@@3HA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_alto@@3HA|
	DCD       |?gr_ancho@@3HA|
	DCD       |__imp_?GXGetDisplayProperties@@YA?AUGXDisplayProperties@@XZ|
|$L24822|
	orrs      r3, r0, #0x40  ; 0x40 = 64

; 107  : 	gr_redraw=gr_redraw565;

	ldrne     r0, [pc, #-0x3C]  ;  pc+8-60 = 0000010C
	ldrne     r1, [pc, #-0x44]  ;  pc+8-68 = 00000108
	strne     r1, [r0]

; 108  : 	RED_MASK=0xFC00;GREEN_MASK=0x03E0;BLUE_MASK=0x001F;

	movne     r1, #0x3F, 22  ; 0xFC00 = 64512
	ldrne     r0, [pc, #-0x54]  ;  pc+8-84 = 00000104
	strneh    r1, [r0]
	movne     r1, #0x3E, 28  ; 0x3E0 = 992
	bne       |$L25830|  ; 000000E4

; 109  : } else if (disp.ffFormat|kfDirect888) { 

	orrs      r3, r0, #1, 24  ; 0x100 = 256

; 110  : 	gr_redraw=gr_redraw888;

	ldrne     r0, [pc, #-0x60]  ;  pc+8-96 = 0000010C
	ldrne     r1, [pc, #0x84]  ;  pc+8+132 = 000001F4
	strne     r1, [r0]
|$L24826|

; 111  : }
; 112  : //---- colores
; 113  : gr_alphav=0xff;
; 114  : gr_color2=0;gr_color1=0xffff;

	ldr       r0, [pc, #0x78]  ;  pc+8+120 = 000001F0
	mov       r1, #0

; 115  : col1=0;col2=0xffff;

	mov       r2, #0
	strh      r1, [r0]
	mov       r0, #0xFF, 24  ; 0xFF00 = 65280
	ldr       r1, [pc, #0x60]  ;  pc+8+96 = 000001EC
	orr       r0, r0, #0xFF  ; 0xFF = 255
	strh      r0, [r1]
	ldr       r1, [pc, #0x50]  ;  pc+8+80 = 000001E8
	strh      r2, [r1]
	ldr       r1, [pc, #0x44]  ;  pc+8+68 = 000001E4
	strh      r0, [r1]

; 116  : gr_solid();

	ldr       r0, [pc, #0x38]  ;  pc+8+56 = 000001E0
	ldr       r1, [pc, #0x30]  ;  pc+8+48 = 000001DC
	str       r1, [r0]
	ldr       r0, [pc, #0x24]  ;  pc+8+36 = 000001D8
	ldr       r1, [pc, #0x1C]  ;  pc+8+28 = 000001D4
	str       r1, [r0]
	mov       r1, #0xFF  ; 0xFF = 255
	ldr       r0, [pc, #0xC]  ;  pc+8+12 = 000001D0
	strb      r1, [r0]

; 117  : 
; 118  : return 0;

	mov       r0, #0
|$L24816|

; 119  : }

	add       sp, sp, #0x18  ; 0x18 = 24
	ldmia     sp!, {pc}  ; ldmfd
|$L25835|
	DCD       |?gr_alphav@@3EA|
	DCD       |?_gr_pixela@@YAXPAGE@Z|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?_gr_pixels@@YAXPAG@Z|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
	DCD       |?col2@@3GA|
	DCD       |?col1@@3GA|
	DCD       |?gr_color1@@3GA|
	DCD       |?gr_color2@@3GA|
	DCD       |?gr_redraw888@@YAXXZ|
|$M25832|

	ENDP  ; |?gr_init@@YAHXZ|, gr_init

	EXPORT	|?gr_fin@@YAXXZ|			; gr_fin
	IMPORT	|??3@YAXPAX@Z|				; operator delete

	AREA	|.text| { |?gr_fin@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_fin@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_fin@@YAXXZ| } ; comdat associative
|$T25840| DCD	|?gr_fin@@YAXXZ|
	DCD	0x40000400

	AREA	|.text| { |?gr_fin@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_fin@@YAXXZ| PROC					; gr_fin

; 122  : {

|$M25838|

; 123  : delete gr_buffer;

	ldr       r0, [pc, #4]  ;  pc+8+4 = 0000000C
	ldr       r0, [r0]
	b         |??3@YAXPAX@Z|  ; 00000010
|$L25841|
	DCD       |?gr_buffer@@3PAKA|
|$M25839|

	ENDP  ; |?gr_fin@@YAXXZ|, gr_fin

	EXPORT	|?gr_RGB@@YAGK@Z|			; gr_RGB

	AREA	|.text| { |?gr_RGB@@YAGK@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_RGB@@YAGK@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_RGB@@YAGK@Z| } ; comdat associative
|$T25845| DCD	|?gr_RGB@@YAGK@Z|
	DCD	0x40002301

	AREA	|.text| { |?gr_RGB@@YAGK@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_RGB@@YAGK@Z| PROC					; gr_RGB

; 127  : {

	stmdb     sp!, {r11, lr}  ; stmfd
|$M25843|

; 128  : colorr=(WORD)((c>>8)&RED_MASK);

	ldr       r1, [pc, #0x7C]  ;  pc+8+124 = 00000088
	mov       r3, r0, lsr #8
	mov       r3, r3, lsl #16
	ldr       r2, [pc, #0x6C]  ;  pc+8+108 = 00000084
	ldrh      r1, [r1]
	and       r1, r1, r3, lsr #16
	strh      r1, [r2]

; 129  : colorg=(WORD)((c>>5)&GREEN_MASK);

	mov       r3, r0, lsr #5
	ldr       r2, [pc, #0x54]  ;  pc+8+84 = 00000080
	mov       r11, r3, lsl #16
	ldr       r3, [pc, #0x48]  ;  pc+8+72 = 0000007C
	ldrh      r2, [r2]
	and       r2, r2, r11, lsr #16
	strh      r2, [r3]

; 130  : colorb=(WORD)((c>>3)&BLUE_MASK);

	mov       r3, r0, lsr #3
	ldr       r0, [pc, #0x30]  ;  pc+8+48 = 00000078
	mov       r11, r3, lsl #16
	ldr       r3, [pc, #0x24]  ;  pc+8+36 = 00000074

; 131  : return (colorr|colorg|colorb);

	mov       r2, r2, lsl #16
	ldrh      r0, [r0]
	and       r0, r0, r11, lsr #16
	strh      r0, [r3]
	mov       r3, r0, lsl #16
	mov       r3, r3, lsr #16
	orr       r3, r3, r2, lsr #16
	mov       r2, r1, lsl #16
	orr       r0, r3, r2, lsr #16

; 132  : };

	ldmia     sp!, {r11, pc}  ; ldmfd
|$L25846|
	DCD       |?colorb@@3GA|
	DCD       |?BLUE_MASK@@3GA|
	DCD       |?colorg@@3GA|
	DCD       |?GREEN_MASK@@3GA|
	DCD       |?colorr@@3GA|
	DCD       |?RED_MASK@@3GA|
|$M25844|

	ENDP  ; |?gr_RGB@@YAGK@Z|, gr_RGB

	EXPORT	|?RGB_gr@@YAKG@Z|			; RGB_gr

	AREA	|.text| { |?RGB_gr@@YAKG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?RGB_gr@@YAKG@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?RGB_gr@@YAKG@Z| } ; comdat associative
|$T25850| DCD	|?RGB_gr@@YAKG@Z|
	DCD	0x40002201

	AREA	|.text| { |?RGB_gr@@YAKG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?RGB_gr@@YAKG@Z| PROC					; RGB_gr

; 135  : {

	stmdb     sp!, {r11, lr}  ; stmfd
|$M25848|

; 136  : register DWORD c1=(c&RED_MASK);c1=(c1|(c1>>5))<<8;

	mov       r3, r0, lsl #16
	ldr       r1, [pc, #0x74]  ;  pc+8+116 = 00000084
	mov       r0, r3, lsr #16
	ldrh      r3, [r1]

; 137  : register DWORD a=c1&0xff0000;

	mov       r2, #0x7F, 18  ; 0x1FC000 = 2080768
	orr       r2, r2, #2, 20  ; 0x2000 = 8192
	and       r1, r0, r3
	and       r2, r2, r1
	and       r3, r1, #0xFF, 24  ; 0xFF00 = 65280

; 138  : c1=(c&GREEN_MASK);c1=((c1<<6)|c1)>>1;

	ldr       r1, [pc, #0x50]  ;  pc+8+80 = 00000080
	orr       r3, r2, r3, lsl #5
	mov       r2, r3, lsl #3
	ldrh      r3, [r1]

; 139  : a|=c1&0xff00;

	mov       r11, #0x7F, 28  ; 0x7F0 = 2032
	and       r1, r0, r3
	mov       r3, r1, lsr #1
	orr       r11, r11, #8
	and       r3, r3, #0xFF, 24  ; 0xFF00 = 65280
	and       r1, r11, r1

; 140  : c1=(c&BLUE_MASK);c1=((c1<<5)|c1)>>2;
; 141  : return (a|(c1&0xff));

	orr       r3, r3, r1, lsl #5
	orr       r1, r3, r2
	ldr       r2, [pc, #0x1C]  ;  pc+8+28 = 0000007C
	ldrh      r3, [r2]
	and       r0, r0, r3
	mov       r3, r0, lsr #2
	and       r2, r0, #0x1F  ; 0x1F = 31
	and       r3, r3, #0xFF  ; 0xFF = 255
	orr       r3, r3, r2, lsl #3
	orr       r0, r3, r1

; 142  : }

	ldmia     sp!, {r11, pc}  ; ldmfd
|$L25851|
	DCD       |?BLUE_MASK@@3GA|
	DCD       |?GREEN_MASK@@3GA|
	DCD       |?RED_MASK@@3GA|
|$M25849|

	ENDP  ; |?RGB_gr@@YAKG@Z|, RGB_gr

	EXPORT	|?gr_565@@YAGG@Z|			; gr_565

	AREA	|.text| { |?gr_565@@YAGG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_565@@YAGG@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_565@@YAGG@Z| } ; comdat associative
|$T25855| DCD	|?gr_565@@YAGG@Z|
	DCD	0x40001b00

	AREA	|.text| { |?gr_565@@YAGG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_565@@YAGG@Z| PROC					; gr_565

; 145  : {

|$M25853|

; 146  : colorr=(WORD)(c&RED_MASK);

	mov       r3, r0, lsl #16
	ldr       r2, [pc, #0x5C]  ;  pc+8+92 = 00000068
	mov       r1, r3, lsr #16
	ldrh      r2, [r2]
	mov       r3, r1, lsl #16
	and       r3, r2, r3, lsr #16
	ldr       r2, [pc, #0x44]  ;  pc+8+68 = 00000064
	strh      r3, [r2]

; 147  : colorg=(WORD)(c&GREEN_MASK);

	mov       r3, r1, lsl #16
	ldr       r2, [pc, #0x34]  ;  pc+8+52 = 00000060
	ldrh      r2, [r2]
	and       r3, r2, r3, lsr #16
	ldr       r2, [pc, #0x24]  ;  pc+8+36 = 0000005C
	strh      r3, [r2]

; 148  : colorb=(WORD)(c&BLUE_MASK);

	mov       r3, r1, lsl #16
	ldr       r1, [pc, #0x14]  ;  pc+8+20 = 00000058
	ldrh      r1, [r1]
	and       r2, r1, r3, lsr #16
	ldr       r1, [pc, #4]  ;  pc+8+4 = 00000054
	strh      r2, [r1]

; 149  : return c;//(colorr|colorg|colorb);
; 150  : }

	mov       pc, lr
|$L25856|
	DCD       |?colorb@@3GA|
	DCD       |?BLUE_MASK@@3GA|
	DCD       |?colorg@@3GA|
	DCD       |?GREEN_MASK@@3GA|
	DCD       |?colorr@@3GA|
	DCD       |?RED_MASK@@3GA|
|$M25854|

	ENDP  ; |?gr_565@@YAGG@Z|, gr_565


	AREA	|.text| { |?_gr_pixels@@YAXPAG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_gr_pixels@@YAXPAG@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_gr_pixels@@YAXPAG@Z| } ; comdat associative
|$T25860| DCD	|?_gr_pixels@@YAXPAG@Z|
	DCD	0x40000500

	AREA	|.text| { |?_gr_pixels@@YAXPAG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_gr_pixels@@YAXPAG@Z| PROC				; _gr_pixels

; 193  : void _gr_pixels(WORD *gr_pos) {*gr_pos=gr_color1;}

|$M25858|
	ldr       r1, [pc, #8]  ;  pc+8+8 = 00000010
	ldrh      r1, [r1]
	strh      r1, [r0]
	mov       pc, lr
|$L25861|
	DCD       |?gr_color1@@3GA|
|$M25859|

	ENDP  ; |?_gr_pixels@@YAXPAG@Z|, _gr_pixels

	EXPORT	|?gr_mix@@YAGGE@Z|			; gr_mix

	AREA	|.text| { |?_gr_pixela@@YAXPAGE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_gr_pixela@@YAXPAGE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_gr_pixela@@YAXPAGE@Z| } ; comdat associative
|$T25865| DCD	|?_gr_pixela@@YAXPAGE@Z|
	DCD	0x40000601

	AREA	|.text| { |?_gr_pixela@@YAXPAGE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_gr_pixela@@YAXPAGE@Z| PROC				; _gr_pixela

; 194  : void _gr_pixela(WORD *gr_pos,BYTE a) {*gr_pos=gr_mix(*gr_pos,a);}

	stmdb     sp!, {r4, lr}  ; stmfd
|$M25863|
	mov       r4, r0
	ldrh      r0, [r4]
	bl        |?gr_mix@@YAGGE@Z|  ; 00000014
	strh      r0, [r4]
	ldmia     sp!, {r4, pc}  ; ldmfd
|$M25864|

	ENDP  ; |?_gr_pixela@@YAXPAGE@Z|, _gr_pixela


	AREA	|.text| { |?gr_mix@@YAGGE@Z| }, CODE, SELECTION=2 ; comdat any

	AREA	|.pdata$$?gr_mix@@YAGGE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_mix@@YAGGE@Z| } ; comdat associative
|$T25869| DCD	|?gr_mix@@YAGGE@Z|
	DCD	0x40003801

	AREA	|.text| { |?gr_mix@@YAGGE@Z| }, CODE, SELECTION=2 ; comdat any

|?gr_mix@@YAGGE@Z| PROC					; gr_mix

; 167  : {

	stmdb     sp!, {r4 - r7, r10, r11, lr}  ; stmfd
|$M25867|

; 168  : WORD r=(col&RED_MASK);

	ldr       r2, [pc, #0xD0]  ;  pc+8+208 = 000000DC
	mov       r0, r0, lsl #16
	mov       r3, r0, lsr #16
	ldrh      r2, [r2]
	and       r0, r2, r0, lsr #16
	mov       r0, r0, lsl #16
	mov       r4, r0, lsr #16

; 169  : r=(((colorr-r)*alpha+(r<<8))>>8)&RED_MASK;
; 170  : WORD g=(col&GREEN_MASK);

	ldr       r0, [pc, #0xB0]  ;  pc+8+176 = 000000D8

; 171  : g=(((colorg-g)*alpha+(g<<8))>>8)&GREEN_MASK;
; 172  : WORD b=(col&BLUE_MASK);
; 173  : b=(((colorb-b)*alpha+(b<<8))>>8)&BLUE_MASK;
; 174  : return (WORD)(r|g|b);

	mov       r11, r4, lsl #16
	ldrh      r0, [r0]
	mov       r4, r11, lsr #16
	mov       r5, r0
	and       r0, r3, r0
	mov       r0, r0, lsl #16
	mov       r6, r0, lsr #16
	ldr       r0, [pc, #0x8C]  ;  pc+8+140 = 000000D4
	ldrh      r0, [r0]
	and       r3, r3, r0
	mov       r3, r3, lsl #16
	mov       r7, r0
	mov       r0, r3, lsr #16
	mov       r3, r0, lsl #16
	and       r0, r1, #0xFF  ; 0xFF = 255
	mov       r1, r6, lsl #16
	ldr       r6, [pc, #0x64]  ;  pc+8+100 = 000000D0
	mov       r1, r1, lsr #16
	ldrh      r11, [r6]
	mov       r3, r3, lsr #16
	rsb       r11, r4, r11
	mul       r10, r11, r0
	add       r11, r10, r4, lsl #8
	and       r11, r2, r11, asr #8
	ldr       r2, [pc, #0x40]  ;  pc+8+64 = 000000CC
	ldrh      r2, [r2]
	rsb       r2, r1, r2
	mul       r10, r2, r0
	add       r2, r10, r1, lsl #8
	ldr       r1, [pc, #0x28]  ;  pc+8+40 = 000000C8
	and       r2, r5, r2, asr #8
	ldrh      r1, [r1]
	orr       r2, r11, r2
	rsb       r1, r3, r1
	mul       r0, r1, r0
	add       r3, r0, r3, lsl #8
	and       r3, r7, r3, asr #8
	orr       r3, r2, r3
	mov       r3, r3, lsl #16
	mov       r0, r3, lsr #16

; 175  : }

	ldmia     sp!, {r4 - r7, r10, r11, pc}  ; ldmfd
|$L25870|
	DCD       |?colorb@@3GA|
	DCD       |?colorg@@3GA|
	DCD       |?colorr@@3GA|
	DCD       |?BLUE_MASK@@3GA|
	DCD       |?GREEN_MASK@@3GA|
	DCD       |?RED_MASK@@3GA|
|$M25868|

	ENDP  ; |?gr_mix@@YAGGE@Z|, gr_mix

	EXPORT	|?_gr_pixelsa@@YAXPAG@Z|		; _gr_pixelsa

	AREA	|.text| { |?_gr_pixelsa@@YAXPAG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_gr_pixelsa@@YAXPAG@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_gr_pixelsa@@YAXPAG@Z| } ; comdat associative
|$T25874| DCD	|?_gr_pixelsa@@YAXPAG@Z|
	DCD	0x40000901

	AREA	|.text| { |?_gr_pixelsa@@YAXPAG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_gr_pixelsa@@YAXPAG@Z| PROC				; _gr_pixelsa

; 197  : void _gr_pixelsa(WORD *gr_pos)	{*gr_pos=gr_mix(*gr_pos,gr_alphav);}

	stmdb     sp!, {r4, lr}  ; stmfd
|$M25872|
	mov       r4, r0
	ldr       r0, [pc, #0x10]  ;  pc+8+16 = 00000020
	ldrb      r1, [r0]
	ldrh      r0, [r4]
	bl        |?gr_mix@@YAGGE@Z|  ; 0000001C
	strh      r0, [r4]
	ldmia     sp!, {r4, pc}  ; ldmfd
|$L25875|
	DCD       |?gr_alphav@@3EA|
|$M25873|

	ENDP  ; |?_gr_pixelsa@@YAXPAG@Z|, _gr_pixelsa

	EXPORT	|?_gr_pixelaa@@YAXPAGE@Z|		; _gr_pixelaa

	AREA	|.text| { |?_gr_pixelaa@@YAXPAGE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_gr_pixelaa@@YAXPAGE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_gr_pixelaa@@YAXPAGE@Z| } ; comdat associative
|$T25879| DCD	|?_gr_pixelaa@@YAXPAGE@Z|
	DCD	0x40000f01

	AREA	|.text| { |?_gr_pixelaa@@YAXPAGE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_gr_pixelaa@@YAXPAGE@Z| PROC				; _gr_pixelaa

; 198  : void _gr_pixelaa(WORD *gr_pos,BYTE a) {*gr_pos=gr_mix(*gr_pos,(BYTE)((WORD)(a*gr_alphav)>>8));}

	stmdb     sp!, {r4, lr}  ; stmfd
|$M25877|
	mov       r4, r0
	ldr       r0, [pc, #0x28]  ;  pc+8+40 = 00000038
	and       r2, r1, #0xFF  ; 0xFF = 255
	ldrb      r3, [r0]
	ldrh      r0, [r4]
	mul       r2, r3, r2
	mov       r3, r2, lsl #16
	mov       r3, r3, lsr #16
	mov       r3, r3, lsr #8
	and       r1, r3, #0xFF  ; 0xFF = 255
	bl        |?gr_mix@@YAGGE@Z|  ; 00000034
	strh      r0, [r4]
	ldmia     sp!, {r4, pc}  ; ldmfd
|$L25880|
	DCD       |?gr_alphav@@3EA|
|$M25878|

	ENDP  ; |?_gr_pixelaa@@YAXPAGE@Z|, _gr_pixelaa

	EXPORT	|?_gr_pixelsld@@YAXPAG@Z|		; _gr_pixelsld

	AREA	|.text| { |?_gr_pixelsld@@YAXPAG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_gr_pixelsld@@YAXPAG@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_gr_pixelsld@@YAXPAG@Z| } ; comdat associative
|$T25884| DCD	|?_gr_pixelsld@@YAXPAG@Z|
	DCD	0x40000701

	AREA	|.text| { |?_gr_pixelsld@@YAXPAG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_gr_pixelsld@@YAXPAG@Z| PROC				; _gr_pixelsld

; 201  : void _gr_pixelsld(WORD *gr_pos)	 {BYTE alpha=255;*gr_pos=gr_mix(*gr_pos,alpha);}

	stmdb     sp!, {r4, lr}  ; stmfd
|$M25882|
	mov       r4, r0
	ldrh      r0, [r4]
	mov       r1, #0xFF  ; 0xFF = 255
	bl        |?gr_mix@@YAGGE@Z|  ; 00000018
	strh      r0, [r4]
	ldmia     sp!, {r4, pc}  ; ldmfd
|$M25883|

	ENDP  ; |?_gr_pixelsld@@YAXPAG@Z|, _gr_pixelsld

	EXPORT	|?_gr_pixelald@@YAXPAGE@Z|		; _gr_pixelald

	AREA	|.text| { |?_gr_pixelald@@YAXPAGE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_gr_pixelald@@YAXPAGE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_gr_pixelald@@YAXPAGE@Z| } ; comdat associative
|$T25888| DCD	|?_gr_pixelald@@YAXPAGE@Z|
	DCD	0x40000601

	AREA	|.text| { |?_gr_pixelald@@YAXPAGE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_gr_pixelald@@YAXPAGE@Z| PROC				; _gr_pixelald

; 202  : void _gr_pixelald(WORD *gr_pos,BYTE a) {*gr_pos=gr_mix(*gr_pos,a);}

	stmdb     sp!, {r4, lr}  ; stmfd
|$M25886|
	mov       r4, r0
	ldrh      r0, [r4]
	bl        |?gr_mix@@YAGGE@Z|  ; 00000014
	strh      r0, [r4]
	ldmia     sp!, {r4, pc}  ; ldmfd
|$M25887|

	ENDP  ; |?_gr_pixelald@@YAXPAGE@Z|, _gr_pixelald

	EXPORT	|?_gr_pixelsrd@@YAXPAG@Z|		; _gr_pixelsrd

	AREA	|.text| { |?_gr_pixelsrd@@YAXPAG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_gr_pixelsrd@@YAXPAG@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_gr_pixelsrd@@YAXPAG@Z| } ; comdat associative
|$T25892| DCD	|?_gr_pixelsrd@@YAXPAG@Z|
	DCD	0x40000701

	AREA	|.text| { |?_gr_pixelsrd@@YAXPAG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_gr_pixelsrd@@YAXPAG@Z| PROC				; _gr_pixelsrd

; 205  : void _gr_pixelsrd(WORD *gr_pos)	{BYTE alpha=255;*gr_pos=gr_mix(*gr_pos,alpha);}

	stmdb     sp!, {r4, lr}  ; stmfd
|$M25890|
	mov       r4, r0
	ldrh      r0, [r4]
	mov       r1, #0xFF  ; 0xFF = 255
	bl        |?gr_mix@@YAGGE@Z|  ; 00000018
	strh      r0, [r4]
	ldmia     sp!, {r4, pc}  ; ldmfd
|$M25891|

	ENDP  ; |?_gr_pixelsrd@@YAXPAG@Z|, _gr_pixelsrd

	EXPORT	|?_gr_pixelard@@YAXPAGE@Z|		; _gr_pixelard

	AREA	|.text| { |?_gr_pixelard@@YAXPAGE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_gr_pixelard@@YAXPAGE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_gr_pixelard@@YAXPAGE@Z| } ; comdat associative
|$T25896| DCD	|?_gr_pixelard@@YAXPAGE@Z|
	DCD	0x40000601

	AREA	|.text| { |?_gr_pixelard@@YAXPAGE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_gr_pixelard@@YAXPAGE@Z| PROC				; _gr_pixelard

; 206  : void _gr_pixelard(WORD *gr_pos,BYTE a) {*gr_pos=gr_mix(*gr_pos,a);}

	stmdb     sp!, {r4, lr}  ; stmfd
|$M25894|
	mov       r4, r0
	ldrh      r0, [r4]
	bl        |?gr_mix@@YAGGE@Z|  ; 00000014
	strh      r0, [r4]
	ldmia     sp!, {r4, pc}  ; ldmfd
|$M25895|

	ENDP  ; |?_gr_pixelard@@YAXPAGE@Z|, _gr_pixelard

	EXPORT	|?gr_solid@@YAXXZ|			; gr_solid

	AREA	|.text| { |?gr_solid@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_solid@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_solid@@YAXXZ| } ; comdat associative
|$T25900| DCD	|?gr_solid@@YAXXZ|
	DCD	0x40000f00

	AREA	|.text| { |?gr_solid@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_solid@@YAXXZ| PROC					; gr_solid

; 212  : void gr_solid(void) {gr_pixel=_gr_pixels;gr_pixela=_gr_pixela;gr_alphav=255;}

|$M25898|
	ldr       r0, [pc, #0x30]  ;  pc+8+48 = 00000038
	ldr       r1, [pc, #0x28]  ;  pc+8+40 = 00000034
	str       r1, [r0]
	ldr       r0, [pc, #0x1C]  ;  pc+8+28 = 00000030
	ldr       r1, [pc, #0x14]  ;  pc+8+20 = 0000002C
	str       r1, [r0]
	mov       r1, #0xFF  ; 0xFF = 255
	ldr       r0, [pc, #4]  ;  pc+8+4 = 00000028
	strb      r1, [r0]
	mov       pc, lr
|$L25901|
	DCD       |?gr_alphav@@3EA|
	DCD       |?_gr_pixela@@YAXPAGE@Z|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?_gr_pixels@@YAXPAG@Z|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
|$M25899|

	ENDP  ; |?gr_solid@@YAXXZ|, gr_solid

	EXPORT	|?gr_alpha@@YAXXZ|			; gr_alpha

	AREA	|.text| { |?gr_alpha@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_alpha@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_alpha@@YAXXZ| } ; comdat associative
|$T25905| DCD	|?gr_alpha@@YAXXZ|
	DCD	0x40000b00

	AREA	|.text| { |?gr_alpha@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_alpha@@YAXXZ| PROC					; gr_alpha

; 213  : void gr_alpha(void) {gr_pixel=_gr_pixelsa;gr_pixela=_gr_pixelaa;}

|$M25903|
	ldr       r0, [pc, #0x20]  ;  pc+8+32 = 00000028
	ldr       r1, [pc, #0x18]  ;  pc+8+24 = 00000024
	str       r1, [r0]
	ldr       r0, [pc, #0xC]  ;  pc+8+12 = 00000020
	ldr       r1, [pc, #4]  ;  pc+8+4 = 0000001C
	str       r1, [r0]
	mov       pc, lr
|$L25906|
	DCD       |?_gr_pixelaa@@YAXPAGE@Z|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?_gr_pixelsa@@YAXPAG@Z|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
|$M25904|

	ENDP  ; |?gr_alpha@@YAXXZ|, gr_alpha

	EXPORT	|?fillSol@@YAXXZ|			; fillSol

	AREA	|.text| { |?fillSol@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?fillSol@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?fillSol@@YAXXZ| } ; comdat associative
|$T25910| DCD	|?fillSol@@YAXXZ|
	DCD	0x40000600

	AREA	|.text| { |?fillSol@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?fillSol@@YAXXZ| PROC					; fillSol

; 223  : void fillSol(void) { fillpoly=_FlineaSolido; }

|$M25908|
	ldr       r0, [pc, #0xC]  ;  pc+8+12 = 00000014
	ldr       r1, [pc, #4]  ;  pc+8+4 = 00000010
	str       r1, [r0]
	mov       pc, lr
|$L25911|
	DCD       |?_FlineaSolido@@YAXHPAUSegm@@0@Z|
	DCD       |?fillpoly@@3P6AXHPAUSegm@@0@ZA|
|$M25909|

	ENDP  ; |?fillSol@@YAXXZ|, fillSol

	EXPORT	|?fillLin@@YAXXZ|			; fillLin
	EXPORT	|?_FlineaDL@@YAXHPAUSegm@@0@Z|		; _FlineaDL

	AREA	|.text| { |?fillLin@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?fillLin@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?fillLin@@YAXXZ| } ; comdat associative
|$T25915| DCD	|?fillLin@@YAXXZ|
	DCD	0x40000600

	AREA	|.text| { |?fillLin@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?fillLin@@YAXXZ| PROC					; fillLin

; 224  : void fillLin(void) { fillpoly=_FlineaDL; }

|$M25913|
	ldr       r0, [pc, #0xC]  ;  pc+8+12 = 00000014
	ldr       r1, [pc, #4]  ;  pc+8+4 = 00000010
	str       r1, [r0]
	mov       pc, lr
|$L25916|
	DCD       |?_FlineaDL@@YAXHPAUSegm@@0@Z|
	DCD       |?fillpoly@@3P6AXHPAUSegm@@0@ZA|
|$M25914|

	ENDP  ; |?fillLin@@YAXXZ|, fillLin

	EXPORT	|?fillRad@@YAXXZ|			; fillRad
	EXPORT	|?_FlineaDR@@YAXHPAUSegm@@0@Z|		; _FlineaDR

	AREA	|.text| { |?fillRad@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?fillRad@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?fillRad@@YAXXZ| } ; comdat associative
|$T25920| DCD	|?fillRad@@YAXXZ|
	DCD	0x40000600

	AREA	|.text| { |?fillRad@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?fillRad@@YAXXZ| PROC					; fillRad

; 225  : void fillRad(void) { fillpoly=_FlineaDR; }

|$M25918|
	ldr       r0, [pc, #0xC]  ;  pc+8+12 = 00000014
	ldr       r1, [pc, #4]  ;  pc+8+4 = 00000010
	str       r1, [r0]
	mov       pc, lr
|$L25921|
	DCD       |?_FlineaDR@@YAXHPAUSegm@@0@Z|
	DCD       |?fillpoly@@3P6AXHPAUSegm@@0@ZA|
|$M25919|

	ENDP  ; |?fillRad@@YAXXZ|, fillRad

	EXPORT	|?fillTex@@YAXXZ|			; fillTex
	EXPORT	|?_FlineaTX@@YAXHPAUSegm@@0@Z|		; _FlineaTX

	AREA	|.text| { |?fillTex@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?fillTex@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?fillTex@@YAXXZ| } ; comdat associative
|$T25925| DCD	|?fillTex@@YAXXZ|
	DCD	0x40000600

	AREA	|.text| { |?fillTex@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?fillTex@@YAXXZ| PROC					; fillTex

; 226  : void fillTex(void) { fillpoly=_FlineaTX; }

|$M25923|
	ldr       r0, [pc, #0xC]  ;  pc+8+12 = 00000014
	ldr       r1, [pc, #4]  ;  pc+8+4 = 00000010
	str       r1, [r0]
	mov       pc, lr
|$L25926|
	DCD       |?_FlineaTX@@YAXHPAUSegm@@0@Z|
	DCD       |?fillpoly@@3P6AXHPAUSegm@@0@ZA|
|$M25924|

	ENDP  ; |?fillTex@@YAXXZ|, fillTex

	EXPORT	|?gr_hlined@@YAXHHHEE@Z|		; gr_hlined
	IMPORT	|__imp___rt_sdiv|
	IMPORT	|__rt_sdiv|

	AREA	|.text| { |?gr_hlined@@YAXHHHEE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_hlined@@YAXHHHEE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_hlined@@YAXHHHEE@Z| } ; comdat associative
|$T25933| DCD	|?gr_hlined@@YAXHHHEE@Z|
	DCD	0x40003601

	AREA	|.text| { |?gr_hlined@@YAXHHHEE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_hlined@@YAXHHHEE@Z| PROC				; gr_hlined

; 234  : {

	stmdb     sp!, {r4 - r8, lr}  ; stmfd
|$M25931|
	mov       r4, r0

; 235  : int alpha=a1<<8;

	and       r0, r3, #0xFF  ; 0xFF = 255

; 236  : int da=((a2-a1)<<8)/(x2-x1);

	ldrb      r3, [sp, #0x18]  ; 0x18 = 24
	mov       r5, r1
	sub       r3, r3, r0
	mov       r1, r3, lsl #8
	ldr       r3, [pc, #0xB0]  ;  pc+8+176 = 000000D4
	mov       r6, r2
	mov       r7, r0, lsl #8
	ldr       r3, [r3]
	sub       r0, r6, r4
	mov       lr, pc
	mov       pc, r3

; 237  : if (x1<0) { alpha+=da*(-x1);x1=0; }
; 238  : if (x2>=gr_ancho) { x2=gr_ancho-1;if (x1>=gr_ancho) return; }

	ldr       r1, [pc, #0x90]  ;  pc+8+144 = 000000D0
	cmp       r4, #0
	mov       r8, r0
	ldr       r0, [r1]
	movmi     r3, r8
	mulmi     r2, r3, r4
	movmi     r4, #0
	submi     r7, r7, r2
	cmp       r6, r0
	blt       |$L24942|  ; 0000006C
	sub       r6, r0, #1
	cmp       r4, r0
	bge       |$L24937|  ; 000000C0
|$L24942|

; 239  : register WORD *gr_pos;
; 240  : GR_SET(x1,y1);

	ldr       r0, [pc, #0x58]  ;  pc+8+88 = 000000CC
	ldr       r0, [r0]
	mul       r3, r0, r5
	ldr       r0, [pc, #0x48]  ;  pc+8+72 = 000000C8
	ldr       r0, [r0]
	add       r3, r3, r4
	add       r5, r0, r3, lsl #1

; 241  : WORD *pf=gr_pos+x2-x1+1;

	sub       r3, r6, r4
	ldr       r6, [pc, #0x30]  ;  pc+8+48 = 000000C4
	add       r3, r3, #1
	add       r4, r5, r3, lsl #1
|$L24946|

; 242  : do {
; 243  : 	gr_pixela(gr_pos,alpha>>8);

	mov       r3, r7, asr #8
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r6]
	mov       r0, r5
	mov       lr, pc
	mov       pc, r3

; 244  : 	gr_pos++;alpha+=da;

	add       r5, r5, #2
	add       r7, r8, r7

; 245  : } while (gr_pos<pf);

	cmp       r5, r4
	bcc       |$L24946|  ; 00000098
|$L24937|

; 246  : }

	ldmia     sp!, {r4 - r8, pc}  ; ldmfd
|$L25934|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_ancho@@3HA|
	DCD       |__imp___rt_sdiv|
|$M25932|

	ENDP  ; |?gr_hlined@@YAXHHHEE@Z|, gr_hlined

	EXPORT	|?gr_vlined@@YAXHHHEE@Z|		; gr_vlined

	AREA	|.text| { |?gr_vlined@@YAXHHHEE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_vlined@@YAXHHHEE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_vlined@@YAXHHHEE@Z| } ; comdat associative
|$T25940| DCD	|?gr_vlined@@YAXHHHEE@Z|
	DCD	0x40003b01

	AREA	|.text| { |?gr_vlined@@YAXHHHEE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_vlined@@YAXHHHEE@Z| PROC				; gr_vlined

; 249  : {

	stmdb     sp!, {r4 - r9, lr}  ; stmfd
|$M25938|
	mov       r4, r0

; 250  : int alpha=(a1<<8);

	and       r0, r3, #0xFF  ; 0xFF = 255

; 251  : int da=((a2-a1)<<8)/(y2-y1);

	ldrb      r3, [sp, #0x1C]  ; 0x1C = 28
	mov       r5, r1
	sub       r3, r3, r0
	mov       r1, r3, lsl #8
	ldr       r3, [pc, #0xC4]  ;  pc+8+196 = 000000E8
	mov       r6, r2
	mov       r7, r0, lsl #8
	ldr       r3, [r3]
	sub       r0, r6, r5
	mov       lr, pc
	mov       pc, r3

; 252  : if (y1<0) { alpha+=da*(-y1);y1=0; }
; 253  : if (y2>=gr_alto) { y2=gr_alto-1;if (y1>=gr_alto) return; }

	ldr       r1, [pc, #0xA4]  ;  pc+8+164 = 000000E4
	cmp       r5, #0
	mov       r9, r0
	ldr       r0, [r1]
	movmi     r3, r9
	mulmi     r2, r3, r5
	movmi     r5, #0
	submi     r7, r7, r2
	cmp       r6, r0
	blt       |$L24960|  ; 0000006C
	sub       r6, r0, #1
	cmp       r5, r0
	bge       |$L24955|  ; 000000D0
|$L24960|

; 254  : register WORD *gr_pos;
; 255  : GR_SET(x1,y1);

	ldr       r0, [pc, #0x6C]  ;  pc+8+108 = 000000E0

; 256  : WORD *pf=gr_pos+((y2-y1+1)*gr_ancho);

	ldr       r8, [pc, #0x64]  ;  pc+8+100 = 000000DC
	ldr       r0, [r0]
	mul       r3, r0, r5
	ldr       r0, [pc, #0x54]  ;  pc+8+84 = 000000D8
	ldr       r0, [r0]
	add       r3, r3, r4
	add       r4, r0, r3, lsl #1
	sub       r3, r6, r5
	ldr       r5, [pc, #0x3C]  ;  pc+8+60 = 000000D4
	add       r3, r3, #1
	ldr       r0, [r5]
	mul       r2, r3, r0
	add       r6, r4, r2, lsl #1
|$L24964|

; 257  : do {
; 258  : 	gr_pixela(gr_pos,alpha>>8);

	mov       r3, r7, asr #8
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r8]
	mov       r0, r4
	mov       lr, pc
	mov       pc, r3

; 259  : 	gr_pos+=gr_ancho;alpha+=da;

	ldr       r0, [r5]
	add       r7, r9, r7
	add       r4, r4, r0, lsl #1

; 260  : } while (gr_pos<pf);

	cmp       r4, r6
	bcc       |$L24964|  ; 000000A4
|$L24955|

; 261  : }

	ldmia     sp!, {r4 - r9, pc}  ; ldmfd
|$L25941|
	DCD       |?gr_ancho@@3HA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_alto@@3HA|
	DCD       |__imp___rt_sdiv|
|$M25939|

	ENDP  ; |?gr_vlined@@YAXHHHEE@Z|, gr_vlined

	EXPORT	|?gr_hline@@YAXHHH@Z|			; gr_hline

	AREA	|.text| { |?gr_hline@@YAXHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_hline@@YAXHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_hline@@YAXHHH@Z| } ; comdat associative
|$T25946| DCD	|?gr_hline@@YAXHHH@Z|
	DCD	0x40002101

	AREA	|.text| { |?gr_hline@@YAXHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_hline@@YAXHHH@Z| PROC				; gr_hline

; 265  : {

	stmdb     sp!, {r4 - r6, lr}  ; stmfd
|$M25944|

; 266  : if (x1<0) x1=0;
; 267  : if (x2>=gr_ancho) { x2=gr_ancho-1;if (x1>=gr_ancho) return; }

	ldr       lr, [pc, #0x74]  ;  pc+8+116 = 00000080
	cmp       r0, #0
	movmi     r0, #0
	ldr       r3, [lr]
	cmp       r2, r3
	blt       |$L24974|  ; 00000028
	sub       r2, r3, #1
	cmp       r0, r3
	bge       |$L24971|  ; 00000070
|$L24974|

; 268  : register WORD *gr_pos;
; 269  : GR_SET(x1,y1);

	ldr       r3, [pc, #0x4C]  ;  pc+8+76 = 0000007C

; 270  : WORD *pf=gr_pos+x2-x1+1;

	ldr       r6, [pc, #0x44]  ;  pc+8+68 = 00000078
	ldr       r3, [r3]
	mul       r1, r3, r1
	add       r3, r1, r0
	ldr       r1, [pc, #0x30]  ;  pc+8+48 = 00000074
	ldr       r1, [r1]
	add       r4, r1, r3, lsl #1
	sub       r3, r2, r0
	add       r3, r3, #1
	add       r5, r4, r3, lsl #1
|$L24978|

; 271  : do {
; 272  : 	gr_pixel(gr_pos);gr_pos++;

	ldr       r3, [r6]
	mov       r0, r4
	mov       lr, pc
	mov       pc, r3
	add       r4, r4, #2

; 273  : } while (gr_pos<pf);

	cmp       r4, r5
	bcc       |$L24978|  ; 00000054
|$L24971|

; 274  : }

	ldmia     sp!, {r4 - r6, pc}  ; ldmfd
|$L25947|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_ancho@@3HA|
|$M25945|

	ENDP  ; |?gr_hline@@YAXHHH@Z|, gr_hline

	EXPORT	|?gr_vline@@YAXHHH@Z|			; gr_vline

	AREA	|.text| { |?gr_vline@@YAXHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_vline@@YAXHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_vline@@YAXHHH@Z| } ; comdat associative
|$T25952| DCD	|?gr_vline@@YAXHHH@Z|
	DCD	0x40002601

	AREA	|.text| { |?gr_vline@@YAXHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_vline@@YAXHHH@Z| PROC				; gr_vline

; 277  : {

	stmdb     sp!, {r4 - r7, lr}  ; stmfd
|$M25950|

; 278  : if (y1<0) y1=0;
; 279  : if (y2>=gr_alto) { y2=gr_alto-1;if (y1>=gr_alto) return; }

	ldr       lr, [pc, #0x88]  ;  pc+8+136 = 00000094
	cmp       r1, #0
	movmi     r1, #0
	ldr       r3, [lr]
	cmp       r2, r3
	blt       |$L24988|  ; 00000028
	sub       r2, r3, #1
	cmp       r1, r3
	bge       |$L24985|  ; 00000080
|$L24988|

; 280  : register WORD *gr_pos;
; 281  : GR_SET(x1,y1);

	ldr       r3, [pc, #0x60]  ;  pc+8+96 = 00000090

; 282  : WORD *pf=gr_pos+((y2-y1+1)*gr_ancho);

	ldr       r5, [pc, #0x58]  ;  pc+8+88 = 0000008C
	ldr       r3, [r3]
	ldr       r7, [pc, #0x4C]  ;  pc+8+76 = 00000088
	mul       lr, r3, r1
	add       r3, lr, r0
	ldr       r0, [pc, #0x3C]  ;  pc+8+60 = 00000084
	ldr       r0, [r0]
	add       r4, r0, r3, lsl #1
	ldr       r0, [r5]
	sub       r3, r2, r1
	add       r3, r3, #1
	mul       r2, r3, r0
	add       r6, r4, r2, lsl #1
|$L24992|

; 283  : do {
; 284  : 	gr_pixel(gr_pos);gr_pos+=gr_ancho;

	ldr       r3, [r7]
	mov       r0, r4
	mov       lr, pc
	mov       pc, r3
	ldr       r0, [r5]
	add       r4, r4, r0, lsl #1

; 285  : } while (gr_pos<pf);

	cmp       r4, r6
	bcc       |$L24992|  ; 00000060
|$L24985|

; 286  : }

	ldmia     sp!, {r4 - r7, pc}  ; ldmfd
|$L25953|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
	DCD       |?gr_ancho@@3HA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_alto@@3HA|
|$M25951|

	ENDP  ; |?gr_vline@@YAXHHH@Z|, gr_vline

	EXPORT	|?gr_clipline@@YA_NPAH000@Z|		; gr_clipline

	AREA	|.text| { |?gr_clipline@@YA_NPAH000@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_clipline@@YA_NPAH000@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_clipline@@YA_NPAH000@Z| } ; comdat associative
|$T25969| DCD	|?gr_clipline@@YA_NPAH000@Z|
	DCD	0x40009703

	AREA	|.text| { |?gr_clipline@@YA_NPAH000@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_clipline@@YA_NPAH000@Z| PROC			; gr_clipline

; 289  : {

	mov       r12, sp
	stmdb     sp!, {r3}  ; stmfd
	stmdb     sp!, {r4 - r12, lr}  ; stmfd
|$M25967|
	mov       r11, r0

; 290  : int C1,C2;
; 291  : int V;
; 292  : if (*X1<0) C1=1; else C1=0;
; 293  : if (*X1>=gr_ancho) C1|=0x2;
; 294  : if (*Y1<0) C1|=0x4;
; 295  : if (*Y1>=gr_alto) C1|=0x8;

	ldr       r5, [pc, #0x234]  ;  pc+8+564 = 0000024C
	mov       r9, r1
	ldr       r6, [r11]
	ldr       r1, [pc, #0x224]  ;  pc+8+548 = 00000248
	mov       r10, r2
	cmp       r6, #0

; 296  : if (*X2<0) C2=1; else C2=0;

	ldr       lr, [r10]
	ldr       r2, [r1]
	mov       r8, #1
	movpl     r8, #0
	ldr       r1, [r5]
	mov       r0, r3
	ldr       r3, [r9]
	cmp       r6, r2
	str       r0, [sp, #0x28]  ; 0x28 = 40
	orrge     r8, r8, #2

; 297  : if (*X2>=gr_ancho) C2|=0x2;
; 298  : if (*Y2<0) C2|=0x4;

	ldr       r0, [r0]
	cmp       r3, #0
	orrmi     r8, r8, #4
	cmp       r3, r1
	orrge     r8, r8, #8
	cmp       lr, #0
	mov       r7, #1
	movpl     r7, #0
	cmp       lr, r2
	orrge     r7, r7, #2
	cmp       r0, #0
	orrmi     r7, r7, #4

; 299  : if (*Y2>=gr_alto) C2|=0x8;

	cmp       r0, r1
	orrge     r7, r7, #8

; 300  : if ((C1&C2)==0 && (C1|C2)!=0) 

	ands      r4, r8, r7
	bne       |$L25031|  ; 00000234
	orrs      r4, r7, r8
	beq       |$L25031|  ; 00000234

; 301  : 	{
; 302  : 	if ((C1&12)!=0)

	ands      r4, r8, #0xC  ; 0xC = 12
	beq       |$L25020|  ; 000000FC

; 303  : 		{
; 304  : 		if (C1<8) V=0; else V=gr_alto-1;

	cmp       r8, #8
	mov       r4, #0
	subge     r4, r1, #1

; 305  : 		*X1+=(V-*Y1)*(*X2-*X1)/(*Y2-*Y1);

	sub       r1, r4, r3
	sub       r0, r0, r3
	ldr       r3, [pc, #0x188]  ;  pc+8+392 = 00000244
	sub       r2, lr, r6
	ldr       r3, [r3]
	mul       r1, r2, r1
	mov       lr, pc
	mov       pc, r3
	add       r3, r6, r0

; 306  : 		*Y1=V;
; 307  : 		if (*X1<0) C1=1; else C1=0;
; 308  : 		if (*X1>=gr_ancho) C1|=0x2;

	ldr       r0, [pc, #0x170]  ;  pc+8+368 = 00000248
	str       r3, [r11]
	mov       r8, #1
	str       r4, [r9]
	ldr       r6, [r11]
	ldr       r2, [r0]
	cmp       r6, #0
	ldr       r1, [r5]
	movpl     r8, #0
	cmp       r6, r2
	orrge     r8, r8, #2
|$L25020|

; 309  : 		}
; 310  :     if ((C2&12)!=0)

	ands      r3, r7, #0xC  ; 0xC = 12
	beq       |$L25026|  ; 0000016C

; 311  : 		{
; 312  : 		if (C2<8) V=0; else V=gr_alto-1;

	cmp       r7, #8

; 313  : 		*X2+=(V-*Y2)*(*X2-*X1)/(*Y2-*Y1);

	ldr       r7, [sp, #0x28]  ; 0x28 = 40
	ldr       r4, [r10]
	mov       r5, #0
	ldr       r0, [r7]
	subge     r5, r1, #1
	sub       r3, r4, r6
	sub       r2, r5, r0
	mul       r1, r3, r2
	ldr       r3, [r9]
	sub       r0, r0, r3
	ldr       r3, [pc, #0x10C]  ;  pc+8+268 = 00000244
	ldr       r3, [r3]
	mov       lr, pc
	mov       pc, r3
	add       r3, r4, r0

; 314  : 		*Y2=V;
; 315  : 		if (*X2<0) C2=1; else C2=0;
; 316  : 		if (*X2>=gr_ancho) C2|=0x2;

	ldr       r1, [pc, #0xFC]  ;  pc+8+252 = 00000248
	str       r3, [r10]
	str       r5, [r7]
	mov       r7, #1
	ldr       r0, [r10]
	ldr       r2, [r1]
	cmp       r0, #0
	movpl     r7, #0
	cmp       r0, r2
	orrge     r7, r7, #2
|$L25026|

; 317  : 		}
; 318  :     if ((C1&C2)==0 && (C1|C2)!=0) 

	ands      r3, r8, r7
	bne       |$L25031|  ; 00000234
	orrs      r3, r7, r8
	beq       |$L25966|  ; 0000023C

; 319  : 		{
; 320  : 		if (C1!=0)

	cmp       r8, #0
	beq       |$L25028|  ; 000001DC

; 321  : 			{
; 322  : 			if (C1==1) V=0; else V=gr_ancho-1;
; 323  : 			*Y1+=(V-*X1)*(*Y2-*Y1)/(*X2-*X1);

	ldr       r3, [sp, #0x28]  ; 0x28 = 40
	cmp       r8, #1
	ldr       r0, [r11]
	mov       r5, #0
	ldr       r3, [r3]
	subne     r5, r2, #1
	ldr       r4, [r9]
	sub       r2, r5, r0
	sub       r3, r3, r4
	mul       r1, r3, r2
	ldr       r3, [r10]
	sub       r0, r3, r0
	ldr       r3, [pc, #0x88]  ;  pc+8+136 = 00000244
	ldr       r3, [r3]
	mov       lr, pc
	mov       pc, r3
	add       r3, r4, r0

; 324  : 			*X1=V;C1=0;

	ldr       r0, [pc, #0x78]  ;  pc+8+120 = 00000248
	str       r3, [r9]
	mov       r8, #0
	str       r5, [r11]
	ldr       r2, [r0]
|$L25028|

; 325  : 			}
; 326  : 		if (C2!=0)

	cmp       r7, #0
	beq       |$L25031|  ; 00000234

; 327  : 			{
; 328  : 			if (C2==1) V=0; else V=gr_ancho-1;
; 329  : 			*Y2+=(V-*X2)*(*Y2-*Y1)/(*X2-*X1);

	ldr       r6, [sp, #0x28]  ; 0x28 = 40
	cmp       r7, #1
	ldr       r0, [r10]
	mov       r5, #0
	ldr       r4, [r6]
	subne     r5, r2, #1
	ldr       r3, [r9]
	sub       r2, r5, r0
	sub       r3, r4, r3
	mul       r1, r3, r2
	ldr       r3, [r11]
	sub       r0, r0, r3
	ldr       r3, [pc, #0x28]  ;  pc+8+40 = 00000244
	ldr       r3, [r3]
	mov       lr, pc
	mov       pc, r3
	add       r3, r4, r0
	str       r3, [r6]

; 330  : 			*X2=V;C2=0;

	mov       r7, #0
	str       r5, [r10]
|$L25031|

; 331  : 			}
; 332  : 		}
; 333  : 	}
; 334  : return (C1|C2)==0;

	orrs      r3, r7, r8
	bne       |$L25955|  ; 00000250
|$L25966|
	mov       r0, #1
	b         |$L25956|  ; 00000254
|$L25970|
	DCD       |__imp___rt_sdiv|
	DCD       |?gr_ancho@@3HA|
	DCD       |?gr_alto@@3HA|
|$L25955|
	mov       r0, #0
|$L25956|
	and       r0, r0, #0xFF  ; 0xFF = 255

; 335  : }

	ldmia     sp, {r4 - r11, sp, pc}  ; ldmfd
|$M25968|

	ENDP  ; |?gr_clipline@@YA_NPAH000@Z|, gr_clipline

	EXPORT	|?gr_line@@YAXHHHH@Z|			; gr_line

	AREA	|.text| { |?gr_line@@YAXHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_line@@YAXHHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_line@@YAXHHHH@Z| } ; comdat associative
|$T26003| DCD	|?gr_line@@YAXHHHH@Z|
	DCD	0x4000c104

	AREA	|.text| { |?gr_line@@YAXHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_line@@YAXHHHH@Z| PROC				; gr_line

; 362  : {

	mov       r12, sp
	stmdb     sp!, {r0 - r3}  ; stmfd
	stmdb     sp!, {r4 - r12, lr}  ; stmfd
	sub       sp, sp, #0xC  ; 0xC = 12
|$M26001|

; 363  : if (!gr_clipline(&x1,&y1,&x2,&y2)) return;

	add       r3, sp, #0x40  ; 0x40 = 64
	add       r2, sp, #0x3C  ; 0x3C = 60
	add       r1, sp, #0x38  ; 0x38 = 56
	add       r0, sp, #0x34  ; 0x34 = 52
	bl        |?gr_clipline@@YA_NPAH000@Z|  ; 00000028
	ands      r3, r0, #0xFF  ; 0xFF = 255
	beq       |$L25107|  ; 000002F4

; 364  : int dx,dy,sx,d;
; 365  : if (x1==x2) { 

	ldr       r0, [sp, #0x34]  ; 0x34 = 52
	ldr       r2, [sp, #0x3C]  ; 0x3C = 60

; 366  : 	if (y1>y2) swap(y1,y2);

	ldr       r1, [sp, #0x38]  ; 0x38 = 56
	cmp       r0, r2
	bne       |$L25086|  ; 00000064
	ldr       r2, [sp, #0x40]  ; 0x40 = 64
	cmp       r1, r2
	movgt     r3, r1
	movgt     r1, r2
	movgt     r2, r3
	strgt     r1, [sp, #0x38]  ; 0x38 = 56
	strgt     r2, [sp, #0x40]  ; 0x40 = 64

; 367  : 	gr_vline(x1,y1,y2);return;

	bl        |?gr_vline@@YAXHHH@Z|  ; 00000064
	b         |$L25107|  ; 000002F4
|$L25086|

; 368  : 	}
; 369  : if (y1==y2) { 

	ldr       r3, [sp, #0x40]  ; 0x40 = 64
	cmp       r1, r3
	bne       |$L25999|  ; 00000090

; 370  : 	if (x1>x2) swap(x1,x2);

	cmp       r0, r2
	movgt     r3, r0
	movgt     r0, r2
	movgt     r2, r3
	strgt     r0, [sp, #0x34]  ; 0x34 = 52
	strgt     r2, [sp, #0x3C]  ; 0x3C = 60

; 371  : 	gr_hline(x1,y1,x2);return;

	bl        |?gr_hline@@YAXHHH@Z|  ; 00000090
	b         |$L25107|  ; 000002F4
|$L25999|

; 372  : 	};
; 373  : if (y1>y2) { swap(x1,x2);swap(y1,y2); }            

	ble       |$L25988|  ; 000000BC
	mov       lr, r0
	mov       r0, r2
	mov       r2, lr
	str       r0, [sp, #0x34]  ; 0x34 = 52
	mov       lr, r1
	str       r2, [sp, #0x3C]  ; 0x3C = 60
	mov       r1, r3
	mov       r3, lr
	str       r1, [sp, #0x38]  ; 0x38 = 56
	str       r3, [sp, #0x40]  ; 0x40 = 64
|$L25988|

; 374  : dx=x2-x1;dy=y2-y1;

	sub       r4, r2, r0

; 375  : if (dx>0) sx=1; else { sx=-1;dx=-dx;}
; 376  : //if (dy>0) sy=1; else { sy=-1;dy=-dy;}
; 377  : WORD ea,ec=0;BYTE ci;
; 378  : register WORD *gr_pos;
; 379  : GR_SET(x1,y1);gr_pixel(gr_pos);

	ldr       r10, [pc, #0x134]  ;  pc+8+308 = 000001FC
	cmp       r4, #0
	ldr       r11, [pc, #0x128]  ;  pc+8+296 = 000001F8
	sub       r6, r3, r1
	ldr       r2, [r10]
	movgt     r3, #1
	mvnle     r3, #0
	str       r3, [sp]
	mul       r3, r2, r1
	ldr       r1, [pc, #0x108]  ;  pc+8+264 = 000001F4
	rsble     r4, r4, #0
	add       r3, r3, r0
	ldr       r0, [r11]
	add       r0, r0, r3, lsl #1
	ldr       r3, [r1]
	mov       lr, pc
	mov       pc, r3

; 380  : if (dy>dx) 	{
; 381  : 	ea=(dx<<16)/dy;

	ldr       r3, [pc, #0xE4]  ;  pc+8+228 = 000001F0
	cmp       r6, r4
	ldr       r3, [r3]
	ble       |$L25098|  ; 00000200
	mov       r1, r4, lsl #16
	mov       r0, r6
	mov       lr, pc
	mov       pc, r3
	mov       r3, r0, lsl #16
	mov       r0, r3, lsr #16

; 382  :     while (dy>0) {

	cmp       r6, #0
	ble       |$L25107|  ; 000002F4
	mov       r3, r0, lsl #16
	ldr       r7, [pc, #0xAC]  ;  pc+8+172 = 000001EC
	mov       r3, r3, lsr #16
	str       r3, [sp, #4]
	mov       r9, #0
	ldr       r3, [sp]
	mov       r8, r3, lsl #1
|$L25100|

; 383  :         dy--;d=ec;ec+=ea;if (ec<=d) x1+=sx;

	ldr       r3, [sp, #4]
	mov       r1, r9
	add       r3, r3, r9
	mov       r3, r3, lsl #16
	mov       r0, r3, lsr #16
	mov       r3, r0, lsl #16
	mov       r9, r3, lsr #16
	cmp       r9, r1
	ldrle     r3, [sp, #0x34]  ; 0x34 = 52
	ldrle     r2, [sp]
	addle     r3, r2, r3
	strle     r3, [sp, #0x34]  ; 0x34 = 52

; 384  :         y1++;ci=ec>>8;

	ldr       r3, [sp, #0x38]  ; 0x38 = 56

; 385  : 		GR_SET(x1,y1);gr_pixela(gr_pos,255-ci);GR_X(sx);gr_pixela(gr_pos,ci);

	ldr       r2, [sp, #0x34]  ; 0x34 = 52
	add       r1, r3, #1
	mov       r3, r0, lsl #16
	ldr       r0, [r10]
	mov       r3, r3, lsr #16
	str       r1, [sp, #0x38]  ; 0x38 = 56
	mov       r3, r3, lsr #8
	and       r4, r3, #0xFF  ; 0xFF = 255
	mul       r3, r0, r1
	ldr       r0, [r11]
	rsb       r1, r4, #0xFF  ; 0xFF = 255
	add       r3, r3, r2
	add       r5, r0, r3, lsl #1
	ldr       r3, [r7]
	mov       r0, r5
	mov       lr, pc
	mov       pc, r3
	ldr       r3, [r7]
	mov       r1, r4
	add       r0, r8, r5
	mov       lr, pc
	mov       pc, r3
	sub       r6, r6, #1
	cmp       r6, #0
	bhi       |$L25100|  ; 00000150

; 386  : 		}
; 387  : } else {// DY <= DX

	b         |$L25107|  ; 000002F4
|$L26004|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |__imp___rt_sdiv|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_ypitch@@3HA|
|$L25098|

; 388  :     ea=(dy<<16)/dx;

	mov       r1, r6, lsl #16
	mov       r0, r4
	mov       lr, pc
	mov       pc, r3
	mov       r3, r0, lsl #16
	mov       r0, r3, lsr #16

; 389  :     while (dx>0) {

	cmp       r4, #0
	ble       |$L25107|  ; 000002F4
	mov       r3, r0, lsl #16
	str       r4, [sp, #8]
	mov       r3, r3, lsr #16
	ldr       r4, [pc, #0xCC]  ;  pc+8+204 = 00000300
	ldr       r8, [pc, #0xC4]  ;  pc+8+196 = 000002FC
	mov       r9, #0
	ldr       r7, [pc, #-0x54]  ;  pc+8-84 = 000001EC
	str       r3, [sp, #4]
|$L25106|

; 390  :         dx--;d=ec;ec+=ea;if (ec<=d) y1++;

	ldr       r3, [sp, #4]
	mov       r1, r9

; 391  :         x1+=sx;ci=ec>>8;

	ldr       r2, [sp]
	add       r3, r3, r9
	mov       r3, r3, lsl #16
	mov       r0, r3, lsr #16
	mov       r3, r0, lsl #16
	mov       r9, r3, lsr #16
	cmp       r9, r1
	ldrle     r3, [sp, #0x38]  ; 0x38 = 56
	addle     r3, r3, #1
	strle     r3, [sp, #0x38]  ; 0x38 = 56
	ldr       r3, [sp, #0x34]  ; 0x34 = 52
	add       r1, r2, r3
	mov       r3, r0, lsl #16

; 392  : 		GR_SET(x1,y1);gr_pixela(gr_pos,255-ci);

	ldr       r0, [r10]
	mov       r3, r3, lsr #16
	str       r1, [sp, #0x34]  ; 0x34 = 52
	mov       r3, r3, lsr #8
	and       r5, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [sp, #0x38]  ; 0x38 = 56
	mul       r3, r0, r3
	ldr       r0, [r11]
	add       r3, r3, r1
	add       r6, r0, r3, lsl #1
	ldr       r3, [r7]
	rsb       r1, r5, #0xFF  ; 0xFF = 255
	mov       r0, r6
	mov       lr, pc
	mov       pc, r3

; 393  : 		if (y1<=gr_alto-2) { GR_Y(1);gr_pixela(gr_pos,ci); }

	ldr       r0, [r8]
	ldr       r2, [sp, #0x38]  ; 0x38 = 56
	sub       r3, r0, #2
	cmp       r2, r3
	ldrle     r0, [r4]
	movle     r1, r5
	ldrle     r3, [r7]
	addle     r0, r6, r0, lsl #1
	movle     lr, pc
	movle     pc, r3
	ldr       r3, [sp, #8]
	sub       r0, r3, #1
	str       r0, [sp, #8]
	cmp       r0, #0
	bhi       |$L25106|  ; 00000240
|$L25107|

; 394  : 		}
; 395  : 	}
; 396  : }

	add       sp, sp, #0xC  ; 0xC = 12
	ldmia     sp, {r4 - r11, sp, pc}  ; ldmfd
|$L26005|
	DCD       |?gr_alto@@3HA|
	DCD       |?gr_ancho@@3HA|
|$M26002|

	ENDP  ; |?gr_line@@YAXHHHH@Z|, gr_line

	EXPORT	|?gr_pline@@YAXHHHHG@Z|			; gr_pline

	AREA	|.text| { |?gr_pline@@YAXHHHHG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_pline@@YAXHHHHG@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_pline@@YAXHHHHG@Z| } ; comdat associative
|$T26022| DCD	|?gr_pline@@YAXHHHHG@Z|
	DCD	0x40008a04

	AREA	|.text| { |?gr_pline@@YAXHHHHG@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_pline@@YAXHHHHG@Z| PROC				; gr_pline

; 399  : {

	mov       r12, sp
	stmdb     sp!, {r0 - r3}  ; stmfd
	stmdb     sp!, {r4 - r12, lr}  ; stmfd
	sub       sp, sp, #0xC  ; 0xC = 12
|$M26020|

; 400  : if (!gr_clipline(&x1,&y1,&x2,&y2)) return;

	add       r3, sp, #0x40  ; 0x40 = 64
	add       r2, sp, #0x3C  ; 0x3C = 60
	add       r1, sp, #0x38  ; 0x38 = 56
	add       r0, sp, #0x34  ; 0x34 = 52
	bl        |?gr_clipline@@YA_NPAH000@Z|  ; 00000028
	ands      r3, r0, #0xFF  ; 0xFF = 255
	beq       |$L25152|  ; 00000220

; 401  : int dx,dy,xinc,yinc,s,dx2,dy2,dxy,x,y;
; 402  : if (x1<x2) xinc=1; else xinc=-1;

	ldr       r2, [sp, #0x34]  ; 0x34 = 52
	mvn       r3, #0
	ldr       r0, [sp, #0x3C]  ; 0x3C = 60

; 403  : dx=absi(x1-x2);
; 404  : if (y1<y2) yinc=1; else yinc=-1;
; 405  : dy=absi(y1-y2);
; 406  : dx2=dx+dx;dy2=dy+dy;
; 407  : x=x1;y=y1;
; 408  : WORD mask=0x2;

	mov       r11, #2

; 409  : register WORD *gr_pos;
; 410  : if ((t&1)!=0) { GR_SET(x,y);gr_pixel(gr_pos); }

	ldrh      r8, [sp, #0x44]  ; 0x44 = 68
	mov       r10, r2
	cmp       r2, r0
	ldr       lr, [pc, #0x11C]  ;  pc+8+284 = 0000016C
	movlt     r1, #1
	str       r8, [sp, #8]
	sub       r0, r2, r0
	strlt     r1, [sp]
	add       r1, r0, r0, asr #31
	strge     r3, [sp]
	eor       r5, r1, r0, asr #31
	ldr       r1, [sp, #0x38]  ; 0x38 = 56
	ldr       r0, [sp, #0x40]  ; 0x40 = 64
	mov       r6, r5, lsl #1
	mov       r9, r1
	cmp       r1, r0
	movlt     r3, #1
	sub       r0, r1, r0
	str       r3, [sp, #4]
	add       r3, r0, r0, asr #31
	eor       r4, r3, r0, asr #31
	ldr       r0, [pc, #0xDC]  ;  pc+8+220 = 00000174
	ands      r3, r8, #1
	ldr       r3, [pc, #0xD0]  ;  pc+8+208 = 00000170
	ldrne     r0, [r0]
	mov       r7, r4, lsl #1
	ldrne     r3, [r3]
	mulne     r1, r0, r1
	ldrne     r0, [lr]
	addne     r2, r1, r2
	addne     r0, r0, r2, lsl #1
	movne     lr, pc
	movne     pc, r3

; 411  : if (dx>dy) {

	cmp       r5, r4
	ble       |$L25137|  ; 00000178

; 413  : 	dxy = dy2 - dx2;
; 414  : 	for (int i=1;i<dx+1;i++) {

	add       r0, r5, #1
	sub       r8, r7, r5
	sub       r6, r7, r6
	cmp       r0, #1
	ble       |$L25152|  ; 00000220

; 412  : 	s = dy2 - dx;

	sub       r5, r0, #1
|$L25139|

; 415  : 		if (s>=0) { y+=yinc;s+=dxy; }	else s+=dy2;

	cmp       r8, #0
	ldrpl     r3, [sp, #4]
	addpl     r8, r6, r8
	addmi     r8, r8, r7
	addpl     r9, r9, r3

; 416  : 		x+=xinc;

	ldr       r3, [sp]
	add       r10, r10, r3

; 417  : 		if ((t&mask)!=0) { GR_SET(x,y);gr_pixel(gr_pos); }

	mov       r3, r11, lsl #16
	mov       r4, r3, lsr #16
	ldr       r3, [sp, #8]
	and       r3, r3, r4
	mov       r3, r3, lsl #16
	movs      r3, r3, lsr #16
	beq       |$L25144|  ; 00000144
	ldr       r0, [pc, #0x54]  ;  pc+8+84 = 00000174
	ldr       r1, [pc, #0x4C]  ;  pc+8+76 = 00000170
	ldr       r0, [r0]
	mul       r3, r0, r9
	ldr       r0, [pc, #0x3C]  ;  pc+8+60 = 0000016C
	ldr       r0, [r0]
	add       r3, r3, r10
	add       r0, r0, r3, lsl #1
	ldr       r3, [r1]
	mov       lr, pc
	mov       pc, r3
|$L25144|

; 418  : 		if (mask==0x8000) mask=0x1; else mask<<=1;

	mov       r3, #2, 18  ; 0x8000 = 32768
	cmp       r4, r3
	movne     r3, r4, lsl #1
	movne     r3, r3, lsl #16
	moveq     r11, #1
	sub       r5, r5, #1
	movne     r11, r3, lsr #16
	cmp       r5, #0
	bhi       |$L25139|  ; 000000E0

; 419  : 		}
; 420  : } else {

	b         |$L25152|  ; 00000220
|$L26023|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
	DCD       |?gr_ypitch@@3HA|
|$L25137|

; 421  : 	s = dx2 - dy;
; 422  : 	dxy = dx2 - dy2;
; 423  : 	for (int i=1;i<dy+1;i++) {

	add       r0, r4, #1
	sub       r5, r6, r4
	sub       r7, r6, r7
	cmp       r0, #1
	ble       |$L25152|  ; 00000220
	sub       r3, r0, #1
	str       r3, [sp, #8]
|$L25150|

; 424  : 		if (s>=0) { x+=xinc;s+=dxy; }	else s+=dx2;

	cmp       r5, #0
	ldrpl     r3, [sp]
	addpl     r5, r7, r5
	addmi     r5, r5, r6
	addpl     r10, r10, r3

; 425  : 		y+=yinc;

	ldr       r3, [sp, #4]
	add       r9, r9, r3

; 426  : 		if ((t&mask)!=0) { GR_SET(x,y);gr_pixel(gr_pos); }

	mov       r3, r11, lsl #16
	mov       r4, r3, lsr #16
	and       r3, r8, r4
	mov       r3, r3, lsl #16
	movs      r3, r3, lsr #16
	beq       |$L25155|  ; 000001F4
	ldr       r0, [pc, #-0x5C]  ;  pc+8-92 = 00000174
	ldr       r1, [pc, #-0x64]  ;  pc+8-100 = 00000170
	ldr       r0, [r0]
	mul       r3, r0, r9
	ldr       r0, [pc, #-0x74]  ;  pc+8-116 = 0000016C
	ldr       r0, [r0]
	add       r3, r3, r10
	add       r0, r0, r3, lsl #1
	ldr       r3, [r1]
	mov       lr, pc
	mov       pc, r3
|$L25155|

; 427  : 		if (mask==0x8000) mask=0x1; else mask<<=1;

	mov       r3, #2, 18  ; 0x8000 = 32768
	cmp       r4, r3
	movne     r3, r4, lsl #1
	movne     r3, r3, lsl #16
	moveq     r11, #1
	movne     r11, r3, lsr #16
	ldr       r3, [sp, #8]
	sub       r0, r3, #1
	str       r0, [sp, #8]
	cmp       r0, #0
	bhi       |$L25150|  ; 00000194
|$L25152|

; 428  : 		}
; 429  : 	}
; 430  : }

	add       sp, sp, #0xC  ; 0xC = 12
	ldmia     sp, {r4 - r11, sp, pc}  ; ldmfd
|$M26021|

	ENDP  ; |?gr_pline@@YAXHHHHG@Z|, gr_pline

	EXPORT	|?gr_splineiter@@YAXHHHHHH@Z|		; gr_splineiter

	AREA	|.text| { |?gr_splineiter@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_splineiter@@YAXHHHHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_splineiter@@YAXHHHHHH@Z| } ; comdat associative
|$T26043| DCD	|?gr_splineiter@@YAXHHHHHH@Z|
	DCD	0x40003502

	AREA	|.text| { |?gr_splineiter@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_splineiter@@YAXHHHHHH@Z| PROC			; gr_splineiter

; 433  : {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
	sub       sp, sp, #8
|$M26041|

; 434  : if (recta(x2-x1,y3-y1,x3-x1,y2-y1)<1000)

	ldr       r10, [sp, #0x2C]  ; 0x2C = 44
	sub       r11, r3, r1
	sub       lr, r10, r0
	mul       r9, lr, r11
	ldr       r11, [sp, #0x30]  ; 0x30 = 48
	sub       lr, r2, r0
	sub       r8, r11, r1
	mul       r8, lr, r8
	sub       lr, r8, r9
	mov       r8, #0xFA, 30  ; 0x3E8 = 1000
	b         |$L26040|  ; 000000A4
|$L26034|

; 435  :     { gr_line(x1>>4,y1>>4,x3>>4,y3>>4); return; }
; 436  : int x11=(x1+x2)>>1,y11=(y1+y2)>>1;

	add       lr, r0, r2
	add       r9, r1, r3

; 437  : int x21=(x2+x3)>>1,y21=(y2+y3)>>1;

	add       r2, r2, r10
	add       r3, r3, r11
	mov       lr, lr, asr #1
	mov       r6, r2, asr #1
	mov       r7, r3, asr #1

; 438  : int x22=(x11+x21)>>1,y22=(y11+y21)>>1;

	add       r3, r6, lr
	mov       r9, r9, asr #1
	mov       r4, r3, asr #1
	add       r3, r7, r9

; 439  : gr_splineiter(x1,y1,x11,y11,x22,y22);

	str       r4, [sp]
	mov       r5, r3, asr #1
	mov       r3, r9
	str       r5, [sp, #4]
	mov       r2, lr
	bl        |?gr_splineiter@@YAXHHHHHH@Z|  ; 0000007C
	sub       r9, r10, r4
	sub       lr, r7, r5
	mul       r9, lr, r9

; 440  : gr_splineiter(x22,y22,x21,y21,x3,y3);

	mov       r3, r7
	sub       lr, r6, r4
	sub       r7, r11, r5
	mul       r7, lr, r7
	mov       r2, r6
	mov       r1, r5
	mov       r0, r4
	sub       lr, r7, r9
|$L26040|
	mov       r4, lr, asr #31
	add       lr, r4, lr
	eor       lr, lr, r4
	cmp       lr, r8
	bge       |$L26034|  ; 00000034
	mov       r3, r11, asr #4
	mov       r2, r10, asr #4
	mov       r1, r1, asr #4
	mov       r0, r0, asr #4
	bl        |?gr_line@@YAXHHHH@Z|  ; 000000D0

; 441  : }

	add       sp, sp, #8
	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$M26042|

	ENDP  ; |?gr_splineiter@@YAXHHHHHH@Z|, gr_splineiter

	EXPORT	|?gr_spline@@YAXHHHHHH@Z|		; gr_spline

	AREA	|.text| { |?gr_spline@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_spline@@YAXHHHHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_spline@@YAXHHHHHH@Z| } ; comdat associative
|$T26047| DCD	|?gr_spline@@YAXHHHHHH@Z|
	DCD	0x40000f02

	AREA	|.text| { |?gr_spline@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_spline@@YAXHHHHHH@Z| PROC				; gr_spline

; 444  : {

	stmdb     sp!, {lr}  ; stmfd
	sub       sp, sp, #8
|$M26045|

; 445  : gr_splineiter(x1<<4,y1<<4,x2<<4,y2<<4,x3<<4,y3<<4);

	ldr       lr, [sp, #0x10]  ; 0x10 = 16
	mov       r3, r3, lsl #4
	mov       r2, r2, lsl #4
	mov       lr, lr, lsl #4
	str       lr, [sp, #4]
	mov       r1, r1, lsl #4
	ldr       lr, [sp, #0xC]  ; 0xC = 12
	mov       r0, r0, lsl #4
	mov       lr, lr, lsl #4
	str       lr, [sp]
	bl        |?gr_splineiter@@YAXHHHHHH@Z|  ; 00000038

; 446  : }

	add       sp, sp, #8
	ldmia     sp!, {pc}  ; ldmfd
|$M26046|

	ENDP  ; |?gr_spline@@YAXHHHHHH@Z|, gr_spline

	EXPORT	|?gr_splinec@@YAXHHHHHH@Z|		; gr_splinec

	AREA	|.text| { |?gr_splinec@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_splinec@@YAXHHHHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_splinec@@YAXHHHHHH@Z| } ; comdat associative
|$T26051| DCD	|?gr_splinec@@YAXHHHHHH@Z|
	DCD	0x40001502

	AREA	|.text| { |?gr_splinec@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_splinec@@YAXHHHHHH@Z| PROC				; gr_splinec

; 449  : {

	stmdb     sp!, {r4 - r6, r11, lr}  ; stmfd
	sub       sp, sp, #8
|$M26049|

; 450  : int mx,my;
; 451  : mx=(x1+x3)>>1;my=(y1+y3)>>1;

	ldr       lr, [sp, #0x1C]  ; 0x1C = 28
	ldr       r5, [sp, #0x20]  ; 0x20 = 32
	add       r11, r0, lr
	mov       r4, r11, asr #1
	add       r11, r1, r5
	mov       r6, r11, asr #1

; 452  : x2=mx+((x2-mx)<<1);y2=my+((y2-my)<<1);
; 453  : gr_splineiter(x1<<4,y1<<4,x2<<4,y2<<4,x3<<4,y3<<4);

	rsb       r3, r6, r3, lsl #1
	rsb       r2, r4, r2, lsl #1
	mov       lr, lr, lsl #4
	mov       r11, r5, lsl #4
	str       lr, [sp]
	mov       r3, r3, lsl #4
	str       r11, [sp, #4]
	mov       r2, r2, lsl #4
	mov       r1, r1, lsl #4
	mov       r0, r0, lsl #4
	bl        |?gr_splineiter@@YAXHHHHHH@Z|  ; 00000050

; 454  : }

	add       sp, sp, #8
	ldmia     sp!, {r4 - r6, r11, pc}  ; ldmfd
|$M26050|

	ENDP  ; |?gr_splinec@@YAXHHHHHH@Z|, gr_splinec

	EXPORT	|?gr_iteracionSP@@YAXJJJJJJ@Z|		; gr_iteracionSP
	EXPORT	|?gr_psegmento@@YAXHHHH@Z|		; gr_psegmento
; File C:\Documents and Settings\Administrador\Escritorio\r4\r4sources\r4cep\mat.h

	AREA	|.text| { |?gr_iteracionSP@@YAXJJJJJJ@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_iteracionSP@@YAXJJJJJJ@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_iteracionSP@@YAXJJJJJJ@Z| } ; comdat associative
|$T26069| DCD	|?gr_iteracionSP@@YAXJJJJJJ@Z|
	DCD	0x40003502
; File C:\Documents and Settings\Administrador\Escritorio\r4\r4sources\r4cep\graf.cpp

	AREA	|.text| { |?gr_iteracionSP@@YAXJJJJJJ@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_iteracionSP@@YAXJJJJJJ@Z| PROC			; gr_iteracionSP

; 459  : {//dist(x1,y1,x3,y3)<(4<<4)){//angle(x1,y1,x2,y2,x3,y3)<100) {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
	sub       sp, sp, #8
|$M26067|

; 460  : if (recta(x1,y1,x2,y2,x3,y3)<1000){	gr_psegmento(x1>>4,y1>>4,x3>>4,y3>>4);return;}

	ldr       r10, [sp, #0x2C]  ; 0x2C = 44
	sub       r11, r3, r1
	sub       lr, r10, r0
	mul       r9, lr, r11
	ldr       r11, [sp, #0x30]  ; 0x30 = 48
	sub       lr, r2, r0
	sub       r8, r11, r1
	mul       r8, lr, r8
	sub       lr, r8, r9
	mov       r8, #0xFA, 30  ; 0x3E8 = 1000
	b         |$L26066|  ; 000000A4
|$L26060|

; 461  : long x11=(x1+x2)>>1,y11=(y1+y2)>>1;

	add       lr, r0, r2
	add       r9, r1, r3

; 462  : long x21=(x2+x3)>>1,y21=(y2+y3)>>1;

	add       r2, r2, r10
	add       r3, r3, r11
	mov       lr, lr, asr #1
	mov       r6, r2, asr #1
	mov       r7, r3, asr #1

; 463  : long x22=(x11+x21)>>1,y22=(y11+y21)>>1;

	add       r3, r6, lr
	mov       r9, r9, asr #1
	mov       r4, r3, asr #1
	add       r3, r7, r9

; 464  : gr_iteracionSP(x1,y1,x11,y11,x22,y22);

	str       r4, [sp]
	mov       r5, r3, asr #1
	mov       r3, r9
	str       r5, [sp, #4]
	mov       r2, lr
	bl        |?gr_iteracionSP@@YAXJJJJJJ@Z|  ; 0000007C
	sub       r9, r10, r4
	sub       lr, r7, r5
	mul       r9, lr, r9

; 465  : gr_iteracionSP(x22,y22,x21,y21,x3,y3);

	mov       r3, r7
	sub       lr, r6, r4
	sub       r7, r11, r5
	mul       r7, lr, r7
	mov       r2, r6
	mov       r1, r5
	mov       r0, r4
	sub       lr, r7, r9
|$L26066|
	movs      r9, lr, asr #31
	eor       lr, lr, r9
	rsb       lr, r9, lr
	cmp       lr, r8
	bge       |$L26060|  ; 00000034
	mov       r3, r11, asr #4
	mov       r2, r10, asr #4
	mov       r1, r1, asr #4
	mov       r0, r0, asr #4
	bl        |?gr_psegmento@@YAXHHHH@Z|  ; 000000D0

; 466  : }

	add       sp, sp, #8
	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$M26068|

	ENDP  ; |?gr_iteracionSP@@YAXJJJJJJ@Z|, gr_iteracionSP

	EXPORT	|?gr_pspline@@YAXHHHHHH@Z|		; gr_pspline

	AREA	|.text| { |?gr_pspline@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_pspline@@YAXHHHHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_pspline@@YAXHHHHHH@Z| } ; comdat associative
|$T26073| DCD	|?gr_pspline@@YAXHHHHHH@Z|
	DCD	0x40000f02

	AREA	|.text| { |?gr_pspline@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_pspline@@YAXHHHHHH@Z| PROC				; gr_pspline

; 469  : {

	stmdb     sp!, {lr}  ; stmfd
	sub       sp, sp, #8
|$M26071|

; 470  : gr_iteracionSP(x1<<4,y1<<4,x2<<4,y2<<4,x3<<4,y3<<4);

	ldr       lr, [sp, #0x10]  ; 0x10 = 16
	mov       r3, r3, lsl #4
	mov       r2, r2, lsl #4
	mov       lr, lr, lsl #4
	str       lr, [sp, #4]
	mov       r1, r1, lsl #4
	ldr       lr, [sp, #0xC]  ; 0xC = 12
	mov       r0, r0, lsl #4
	mov       lr, lr, lsl #4
	str       lr, [sp]
	bl        |?gr_iteracionSP@@YAXJJJJJJ@Z|  ; 00000038

; 471  : }

	add       sp, sp, #8
	ldmia     sp!, {pc}  ; ldmfd
|$M26072|

	ENDP  ; |?gr_pspline@@YAXHHHHHH@Z|, gr_pspline

	EXPORT	|?gr_psplinec@@YAXHHHHHH@Z|		; gr_psplinec

	AREA	|.text| { |?gr_psplinec@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_psplinec@@YAXHHHHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_psplinec@@YAXHHHHHH@Z| } ; comdat associative
|$T26077| DCD	|?gr_psplinec@@YAXHHHHHH@Z|
	DCD	0x40001502

	AREA	|.text| { |?gr_psplinec@@YAXHHHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_psplinec@@YAXHHHHHH@Z| PROC			; gr_psplinec

; 474  : {

	stmdb     sp!, {r4 - r6, r11, lr}  ; stmfd
	sub       sp, sp, #8
|$M26075|

; 475  : int mx=(x1+x3)>>1;int my=(y1+y3)>>1;

	ldr       lr, [sp, #0x1C]  ; 0x1C = 28
	ldr       r5, [sp, #0x20]  ; 0x20 = 32
	add       r11, r0, lr
	mov       r4, r11, asr #1
	add       r11, r1, r5
	mov       r6, r11, asr #1

; 476  : x2=mx+((x2-mx)<<1);y2=my+((y2-my)<<1);
; 477  : gr_iteracionSP(x1<<4,y1<<4,x2<<4,y2<<4,x3<<4,y3<<4);

	rsb       r3, r6, r3, lsl #1
	rsb       r2, r4, r2, lsl #1
	mov       lr, lr, lsl #4
	mov       r11, r5, lsl #4
	str       lr, [sp]
	mov       r3, r3, lsl #4
	str       r11, [sp, #4]
	mov       r2, r2, lsl #4
	mov       r1, r1, lsl #4
	mov       r0, r0, lsl #4
	bl        |?gr_iteracionSP@@YAXJJJJJJ@Z|  ; 00000050

; 478  : }

	add       sp, sp, #8
	ldmia     sp!, {r4 - r6, r11, pc}  ; ldmfd
|$M26076|

	ENDP  ; |?gr_psplinec@@YAXHHHHHH@Z|, gr_psplinec


	AREA	|.text| { |?gr_psegmento@@YAXHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_psegmento@@YAXHHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_psegmento@@YAXHHHH@Z| } ; comdat associative
|$T26086| DCD	|?gr_psegmento@@YAXHHHH@Z|
	DCD	0x40004701

	AREA	|.text| { |?gr_psegmento@@YAXHHHH@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_psegmento@@YAXHHHH@Z| PROC				; gr_psegmento

; 486  : {

	stmdb     sp!, {r4 - r6, r9 - r11, lr}  ; stmfd
|$M26084|
	mov       r4, r1
	mov       r5, r3

; 487  : int t;
; 488  : if (y1==y2) return;

	cmp       r4, r5
	beq       |$L25235|  ; 00000118

; 489  : if (y1>y2) { t=x1;x1=x2;x2=t;t=y1;y1=y2;y2=t; }

	movgt     r1, r0
	movgt     r0, r2
	movgt     r2, r1
	movgt     r1, r4
	movgt     r4, r5
	movgt     r5, r1

; 490  : if (y1>=gr_alto || y2<=0) return;

	ldr       r1, [pc, #0x88]  ;  pc+8+136 = 000000BC
	ldr       r1, [r1]
	cmp       r4, r1
	bge       |$L25235|  ; 00000118
	cmp       r5, #0
	ble       |$L25235|  ; 00000118

; 491  : x1=x1<<FBASE;
; 492  : x2=x2<<FBASE;
; 493  : t=(x2-x1)/(y2-y1);

	ldr       r3, [pc, #0x6C]  ;  pc+8+108 = 000000B8
	mov       r6, r0, lsl #8
	rsb       r1, r6, r2, lsl #8
	ldr       r3, [r3]
	sub       r0, r5, r4
	mov       lr, pc
	mov       pc, r3

; 494  : if (y1<0) { x1+=t*(-y1);y1=0; }
; 495  : if (yMin>y1) yMin=y1;

	ldr       r1, [pc, #0x4C]  ;  pc+8+76 = 000000B4
	cmp       r4, #0
	movmi     r3, r0
	mulmi     r2, r3, r4

; 496  : if (yMax<y2) yMax=y2;
; 497  : Segm *ii=&segmentos[cntSegm-1];

	ldr       r3, [pc, #0x38]  ;  pc+8+56 = 000000B0
	movmi     r4, #0
	submi     r6, r6, r2
	ldr       r2, [r1]
	cmp       r2, r4
	strgt     r4, [r1]
	ldr       r1, [pc, #0x1C]  ;  pc+8+28 = 000000AC
	ldr       r2, [r1]
	cmp       r2, r5
	ldr       r2, [pc, #0xC]  ;  pc+8+12 = 000000A8
	strlt     r5, [r1]
	ldr       r1, [r2]
	add       r1, r3, r1, lsl #4
	b         |$L26083|  ; 000000E8
|$L26087|
	DCD       |?cntSegm@@3HA|
	DCD       |?yMax@@3HA|
	DCD       |?segmentos@@3PAUSegm@@A|
	DCD       |?yMin@@3HA|
	DCD       |__imp___rt_sdiv|
	DCD       |?gr_alto@@3HA|
|$L25241|

; 498  : while (ii>=segmentos && ii->y>y1 ) {

	ldr       lr, [r1]
	cmp       lr, r4
	ble       |$L25242|  ; 000000F4

; 499  :   *(ii+1)=*(ii);ii--;

	add       lr, r1, #0x10  ; 0x10 = 16
	mov       r11, r1
	mov       r10, #0x10  ; 0x10 = 16
|$L26082|
	ldrb      r9, [r11], #1
	subs      r10, r10, #1
	strb      r9, [lr], #1
	bgt       |$L26082|  ; 000000D8
|$L26083|
	sub       r1, r1, #0x10  ; 0x10 = 16
	cmp       r1, r3
	bcs       |$L25241|  ; 000000C0
|$L25242|

; 500  :   }
; 501  : ii++;

	add       r1, r1, #0x10  ; 0x10 = 16

; 502  : ii->x=x1+((1<<FBASE)>>1);

	add       r3, r6, #0x80  ; 0x80 = 128

; 503  : ii->y=y1;
; 504  : ii->yfin=y2;
; 505  : ii->deltax=t;

	str       r0, [r1, #0xC]  ; 0xC = 12
	str       r3, [r1, #4]
	str       r4, [r1]
	str       r5, [r1, #8]

; 506  : cntSegm++;

	ldr       r0, [r2]
	add       r0, r0, #1
	str       r0, [r2]
|$L25235|

; 507  : }

	ldmia     sp!, {r4 - r6, r9 - r11, pc}  ; ldmfd
|$M26085|

	ENDP  ; |?gr_psegmento@@YAXHHHH@Z|, gr_psegmento


	AREA	|.text| { |?_FlineaSolido@@YAXHPAUSegm@@0@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_FlineaSolido@@YAXHPAUSegm@@0@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_FlineaSolido@@YAXHPAUSegm@@0@Z| } ; comdat associative
|$T26102| DCD	|?_FlineaSolido@@YAXHPAUSegm@@0@Z|
	DCD	0x4000af02

	AREA	|.text| { |?_FlineaSolido@@YAXHPAUSegm@@0@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_FlineaSolido@@YAXHPAUSegm@@0@Z| PROC			; _FlineaSolido

; 511  : {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
	sub       sp, sp, #0xC  ; 0xC = 12
|$M26100|

; 512  : register WORD *gr_pos;
; 513  : register int cnt,alpha,da;
; 514  : int x1,x2,x3,x4;
; 515  : if (m1->x==m2->x&&m1->deltax>m2->deltax) { Segm *t=m1;m1=m2;m2=t; }

	ldr       r3, [r1, #4]
	ldr       lr, [r2, #4]
	cmp       r3, lr
	bne       |$L25256|  ; 00000030
	ldr       r3, [r1, #0xC]  ; 0xC = 12
	ldr       lr, [r2, #0xC]  ; 0xC = 12
	cmp       r3, lr
	movgt     r3, r1
	movgt     r1, r2
	movgt     r2, r3
|$L25256|

; 516  : 
; 517  : if (m1->deltax<0)

	ldr       r3, [r1, #0xC]  ; 0xC = 12
	cmp       r3, #0

; 518  :    { x1=m1->x+m1->deltax;x2=m1->x; }

	ldrmi     r1, [r1, #4]
	addmi     lr, r3, r1

; 519  : else
; 520  :    { x1=m1->x;x2=m1->x+m1->deltax; }

	ldrpl     lr, [r1, #4]
	movmi     r4, r1

; 521  : if (m2->deltax<0)
; 522  :    { x3=m2->x+m2->deltax;x4=m2->x; }

	ldr       r1, [r2, #4]
	addpl     r4, r3, lr
	ldr       r3, [r2, #0xC]  ; 0xC = 12

; 523  : else
; 524  :    { x3=m2->x;x4=m2->x+m2->deltax; }
; 525  : int ex1=x1>>FBASE,ex2=x2>>FBASE;

	mov       r2, lr, asr #8
	cmp       r3, #0
	add       r3, r3, r1
	strmi     r1, [sp, #4]
	strmi     r3, [sp, #8]
	mov       r8, r4, asr #8
	strpl     r1, [sp, #8]
	strpl     r3, [sp, #4]

; 526  : int ex3=x3>>FBASE,ex4=x4>>FBASE;

	ldr       r3, [sp, #8]
	mov       r10, r3, asr #8
	ldr       r3, [sp, #4]
	mov       r6, r3, asr #8
	str       r6, [sp]

; 527  : if (ex4<=0 || ex1>=gr_ancho ) return;

	cmp       r6, #0
	ble       |$L26096|  ; 000002B4
	ldr       r5, [pc, #0x8C]  ;  pc+8+140 = 00000124
	ldr       r3, [r5]
	cmp       r2, r3
	bge       |$L26096|  ; 000002B4

; 528  : if (ex1>0) GR_SET(ex1,y) else GR_SET(0,y)

	ldr       r1, [pc, #0x78]  ;  pc+8+120 = 00000120
	cmp       r2, #0

; 529  : 
; 530  : //gr_color1=0xff00;
; 531  : if (ex2>0) { // entrada anti

	ldr       r9, [pc, #0x6C]  ;  pc+8+108 = 0000011C
	ldr       r1, [r1]
	mulgt     r0, r1, r0
	addgt     r1, r0, r2
	ldrgt     r0, [pc, #0x58]  ;  pc+8+88 = 00000118
	ldrgt     r0, [r0]
	mulle     r11, r1, r0
	addgt     r7, r0, r1, lsl #1
	ldrle     r0, [pc, #0x48]  ;  pc+8+72 = 00000118
	ldrle     r0, [r0]
	addle     r7, r0, r11, lsl #1
	ldr       r11, [pc, #0x38]  ;  pc+8+56 = 00000114
	cmp       r8, #0
	ble       |$L26092|  ; 000001A8

; 532  :   if (ex1==ex2) { // punto solo

	cmp       r2, r8
	bne       |$L25273|  ; 00000128

; 533  :     gr_pixela(gr_pos,255-(BYTE)((x1+x2)>>1));gr_pos++;

	add       r3, r4, lr
	mov       r3, r3, asr #1
	and       r3, r3, #0xFF  ; 0xFF = 255
	rsb       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r11]
	mov       r0, r7
	mov       lr, pc
	mov       pc, r3

; 534  :   } else { // degrade

	ldr       r3, [r5]
	add       r7, r7, #2
	b         |$L26092|  ; 000001A8
|$L26103|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?tablainc@@3PAHA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_ancho@@3HA|
|$L25273|

; 535  :     alpha=0;//    da=(255<<8)/(ex2-ex1);
; 536  :     da=(ex2-ex1);

	sub       r0, r8, r2

; 537  :     if (da>0xff) da=tablainc[(da>>8)&0xff]>>8; else da=tablainc[da];

	cmp       r0, #0xFF  ; 0xFF = 255
	movgt     r1, r0, asr #8
	andgt     r1, r1, #0xFF  ; 0xFF = 255
	ldrgt     r1, [r9, +r1, lsl #2]
	mov       r5, #0
	movgt     r6, r1, asr #8
	ldrle     r6, [r9, +r0, lsl #2]

; 538  : 
; 539  :     if (ex1<0) { alpha+=da*(-ex1);ex1=0; }

	cmp       r2, #0
	movmi     r1, r6
	mulmi     r2, r1, r2
	rsbmi     r5, r2, #0
	movmi     r2, #0

; 540  :     if (ex2>=gr_ancho) ex2=gr_ancho-1;

	cmp       r8, r3
	subge     r8, r3, #1

; 541  :     cnt=ex2-ex1+1;

	sub       r2, r8, r2
	adds      r4, r2, #1

; 542  :     while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	beq       |$L26098|  ; 000001A4
|$L25281|
	mov       r3, r5, asr #8
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r11]
	mov       r0, r7
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r7, r7, #2
	add       r5, r6, r5
	cmp       r4, #0
	bhi       |$L25281|  ; 00000170
	ldr       r0, [pc, #-0x80]  ;  pc+8-128 = 00000124
	ldr       r3, [r0]
|$L26098|
	ldr       r6, [sp]
|$L26092|

; 543  :     }
; 544  :   }
; 545  : 
; 546  : if (ex3<=ex2) return;

	cmp       r10, r8
	ble       |$L26096|  ; 000002B4

; 547  : //gr_color1=0xff;
; 548  : if (ex3>0) { // lleno

	cmp       r10, #0
	ble       |$L26094|  ; 00000200

; 549  :     if (ex2<0) ex2=0;

	cmp       r8, #0
	movmi     r8, #0

; 550  :     if (ex3>gr_ancho) ex3=gr_ancho;

	cmp       r10, r3
	movgt     r10, r3

; 551  :     cnt=ex3-ex2-1;

	sub       r2, r10, r8
	subs      r4, r2, #1

; 552  :     while (cnt--) { gr_pixel(gr_pos);gr_pos++; }

	beq       |$L26094|  ; 00000200

; 551  :     cnt=ex3-ex2-1;

	ldr       r5, [pc, #0x54]  ;  pc+8+84 = 00000230
|$L25288|

; 552  :     while (cnt--) { gr_pixel(gr_pos);gr_pos++; }

	ldr       r3, [r5]
	mov       r0, r7
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r7, r7, #2
	cmp       r4, #0
	bhi       |$L25288|  ; 000001D8
	ldr       r0, [pc, #-0xDC]  ;  pc+8-220 = 00000124
	ldr       r3, [r0]
|$L26094|

; 553  :     }
; 554  : //gr_color1=0xff0000;
; 555  : 
; 556  : if (ex4==ex3) { // punto solo

	cmp       r6, r10
	bne       |$L25290|  ; 00000234

; 557  :   gr_pixela(gr_pos,(BYTE)((x3+x4)>>1));

	ldr       r3, [sp, #4]
	mov       r0, r7
	ldr       r2, [sp, #8]
	add       r3, r3, r2
	mov       r3, r3, asr #1
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r11]
	mov       lr, pc
	mov       pc, r3

; 558  : } else { // degrade

	b         |$L26096|  ; 000002B4
|$L26104|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
|$L25290|

; 559  :   alpha=255<<8;//da=(-255<<8)/(ex4-ex3);
; 560  : 
; 561  :   da=(ex4-ex3);

	sub       r0, r6, r10

; 562  :   if (da>0xff) da=-tablainc[(da>>8)&0xff]>>8; else da=-tablainc[da];

	cmp       r0, #0xFF  ; 0xFF = 255
	movgt     r2, r0, asr #8
	andgt     r2, r2, #0xFF  ; 0xFF = 255
	ldrgt     r2, [r9, +r2, lsl #2]
	mov       r5, #0xFF, 24  ; 0xFF00 = 65280
	rsbgt     r2, r2, #0
	movgt     r6, r2, asr #8
	ldrle     r2, [r9, +r0, lsl #2]
	rsble     r6, r2, #0

; 563  : 
; 564  :   if (ex3<0) { alpha+=da*(-ex3);ex3=0; }    

	cmp       r10, #0
	movmi     r2, r6
	mulmi     r1, r2, r10

; 565  :   if (ex4>gr_ancho) ex4=gr_ancho;

	ldr       r2, [sp]
	movmi     r10, #0
	rsbmi     r5, r1, #0xFF, 24  ; 0xFF00 = 65280
	cmp       r2, r3
	strgt     r3, [sp]

; 566  :   cnt=ex4-ex3;

	ldr       r3, [sp]
	subs      r4, r3, r10

; 567  :   while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	beq       |$L26096|  ; 000002B4
|$L25298|
	mov       r3, r5, asr #8
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r11]
	mov       r0, r7
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r7, r7, #2
	add       r5, r6, r5
	cmp       r4, #0
	bhi       |$L25298|  ; 00000288
|$L26096|

; 568  :   }
; 569  : }

	add       sp, sp, #0xC  ; 0xC = 12
	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$M26101|

	ENDP  ; |?_FlineaSolido@@YAXHPAUSegm@@0@Z|, _FlineaSolido


	AREA	|.text| { |?_FlineaDL@@YAXHPAUSegm@@0@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_FlineaDL@@YAXHPAUSegm@@0@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_FlineaDL@@YAXHPAUSegm@@0@Z| } ; comdat associative
|$T26138| DCD	|?_FlineaDL@@YAXHPAUSegm@@0@Z|
	DCD	0x4000e202

	AREA	|.text| { |?_FlineaDL@@YAXHPAUSegm@@0@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_FlineaDL@@YAXHPAUSegm@@0@Z| PROC			; _FlineaDL

; 582  : {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
	sub       sp, sp, #0x10  ; 0x10 = 16
|$M26136|
	mov       r5, r0

; 583  : register WORD *gr_pos;
; 584  : register int cnt,alpha,da;
; 585  : int x1,x2,x3,x4;
; 586  : if (m1->deltax<0)

	ldr       r0, [r1, #0xC]  ; 0xC = 12

; 587  :    { x1=m1->x+m1->deltax;x2=m1->x; }

	ldr       r1, [r1, #4]
	cmp       r0, #0
	addmi     r9, r1, r0
	movmi     r6, r1

; 588  : else
; 589  :    { x2=m1->x+m1->deltax;x1=m1->x; }

	addpl     r6, r1, r0

; 590  : if (m2->deltax<0)
; 591  :    { x3=m2->x+m2->deltax;x4=m2->x; }

	ldr       r0, [r2, #4]
	movpl     r9, r1
	ldr       r1, [r2, #0xC]  ; 0xC = 12

; 592  : else
; 593  :    { x4=m2->x+m2->deltax;x3=m2->x; }
; 594  : int ex1=x1>>FBASE,ex2=x2>>FBASE;

	mov       r4, r9, asr #8
	cmp       r1, #0
	add       r3, r0, r1
	strmi     r0, [sp, #4]
	strmi     r3, [sp, #8]
	mov       r7, r6, asr #8
	strpl     r0, [sp, #8]
	strpl     r3, [sp, #4]

; 595  : int ex3=x3>>FBASE,ex4=x4>>FBASE;

	ldr       r3, [sp, #8]
	mov       r3, r3, asr #8
	str       r3, [sp]
	ldr       r3, [sp, #4]
	mov       r0, r3, asr #8
	str       r0, [sp, #0xC]  ; 0xC = 12

; 596  : if (ex4<=0 || ex1>=gr_ancho ) return;

	cmp       r0, #0
	ble       |$L26129|  ; 00000380
	ldr       r8, [pc, #0xFC]  ;  pc+8+252 = 00000174
	ldr       r3, [r8]
	cmp       r4, r3
	bge       |$L26129|  ; 00000380

; 597  : int r=MA*(ex2-MTX)-MB*(y-MTY);

	ldr       r0, [pc, #0xE8]  ;  pc+8+232 = 00000170

; 598  : mixcolor(col1,col2,r>>8);

	ldr       r11, [pc, #0xE0]  ;  pc+8+224 = 0000016C
	ldr       r0, [r0]
	sub       r2, r5, r0
	ldr       r0, [pc, #0xD0]  ;  pc+8+208 = 00000168
	ldr       r0, [r0]
	mul       r1, r2, r0
	ldr       r0, [pc, #0xC0]  ;  pc+8+192 = 00000164
	ldr       r0, [r0]
	sub       r2, r7, r0
	ldr       r0, [pc, #0xB0]  ;  pc+8+176 = 00000160
	ldr       r0, [r0]
	mul       r0, r2, r0
	ldr       r2, [pc, #0xA0]  ;  pc+8+160 = 0000015C
	sub       r10, r0, r1
	ldr       r0, [pc, #0x94]  ;  pc+8+148 = 00000158
	mov       r1, r10, asr #8
	ldrh      r0, [r0]
	cmp       r1, #1
	blt       |$L26133|  ; 000000EC
	ldrh      r2, [r2]
	cmp       r1, #0xFE  ; 0xFE = 254
	strh      r2, [r11]
	bgt       |$L26107|  ; 000000F0
	and       r1, r1, #0xFF  ; 0xFF = 255
	bl        |?gr_mix@@YAGGE@Z|  ; 000000EC
	ldr       r3, [r8]
|$L26133|
	strh      r0, [r11]
|$L26107|

; 599  : if (ex1>0) GR_SET(ex1,y) else GR_SET(0,y)

	ldr       r0, [pc, #0x5C]  ;  pc+8+92 = 00000154
	cmp       r4, #0
	ldr       r0, [r0]
	mul       r2, r0, r5
	ldr       r0, [pc, #0x48]  ;  pc+8+72 = 00000150
	ldr       r0, [r0]
	addgt     r2, r2, r4

; 600  : 
; 601  : if (ex2>0) { // entrada anti

	cmp       r7, #0
	add       r8, r0, r2, lsl #1
	ldr       r2, [pc, #0x30]  ;  pc+8+48 = 0000014C
	ble       |$L26125|  ; 00000200

; 602  :   if (ex1==ex2) { // punto solo

	cmp       r4, r7
	bne       |$L25336|  ; 00000178

; 603  :     gr_pixela(gr_pos,255-(BYTE)((x1+x2)>>1));gr_pos++;

	add       r3, r6, r9
	mov       r3, r3, asr #1
	and       r3, r3, #0xFF  ; 0xFF = 255
	rsb       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       r0, r8
	mov       lr, pc
	mov       pc, r3
	add       r8, r8, #2

; 604  :   } else { // degrade

	b         |$L26134|  ; 000001F8
|$L26139|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?col2@@3GA|
	DCD       |?col1@@3GA|
	DCD       |?MA@@3HA|
	DCD       |?MTX@@3HA|
	DCD       |?MB@@3HA|
	DCD       |?gr_color1@@3GA|
	DCD       |?MTY@@3HA|
	DCD       |?gr_ancho@@3HA|
|$L25336|

; 605  :     alpha=0;//da=(255<<8)/(ex2-ex1);
; 606  :     da=(ex2-ex1);

	sub       r0, r7, r4

; 607  :     if (da>0xff) da=tablainc[(da>>8)&0xff]>>8; else da=tablainc[da];

	cmp       r0, #0xFF  ; 0xFF = 255
	movgt     r2, r0, asr #8
	ldrgt     r0, [pc, #0x160]  ;  pc+8+352 = 000002EC
	andgt     r2, r2, #0xFF  ; 0xFF = 255
	ldrle     r1, [pc, #0x158]  ;  pc+8+344 = 000002EC
	ldrgt     r2, [r0, +r2, lsl #2]
	mov       r5, #0
	movgt     r6, r2, asr #8
	ldrle     r6, [r1, +r0, lsl #2]

; 608  : 
; 609  :     if (ex1<0) { alpha+=da*(-ex1);ex1=0; }

	cmp       r4, #0
	movmi     r2, r6
	mulmi     r1, r2, r4
	movmi     r4, #0
	rsbmi     r5, r1, #0

; 610  :     if (ex2>=gr_ancho) ex2=gr_ancho-1;

	cmp       r7, r3
	subge     r7, r3, #1

; 611  :     cnt=ex2-ex1+1;

	sub       r2, r7, r4
	adds      r4, r2, #1

; 612  :     while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	beq       |$L26125|  ; 00000200
|$L25344|
	mov       r3, r5, asr #8
	ldr       r2, [pc, #-0x88]  ;  pc+8-136 = 0000014C
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       r0, r8
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r8, r8, #2
	add       r5, r6, r5
	cmp       r4, #0
	bhi       |$L25344|  ; 000001C8
|$L26134|
	ldr       r0, [pc, #-0x8C]  ;  pc+8-140 = 00000174
	ldr       r3, [r0]
|$L26125|

; 613  :     }
; 614  :   }
; 615  : 
; 616  : if (ex3<=ex2) return;

	ldr       r9, [sp]
	cmp       r9, r7
	ble       |$L26129|  ; 00000380

; 617  : if (ex3>0) { // lleno

	cmp       r9, #0
	ble       |$L26127|  ; 000002B0

; 618  :     if (ex2<0) { r+=MA*(-ex2);ex2=0; }

	cmp       r7, #0
	ldrmi     r0, [pc, #-0xC0]  ;  pc+8-192 = 00000160
	ldrmi     r2, [r0]
	mulmi     r1, r2, r7
	movmi     r7, #0
	submi     r10, r10, r1

; 619  :     if (ex3>gr_ancho) ex3=gr_ancho;

	cmp       r9, r3
	movgt     r9, r3
	strgt     r3, [sp]

; 620  :     cnt=ex3-ex2-1;

	sub       r2, r9, r7
	subs      r4, r2, #1

; 621  :     while (cnt--) { 

	beq       |$L26127|  ; 000002B0

; 620  :     cnt=ex3-ex2-1;

	ldr       r5, [pc, #0x9C]  ;  pc+8+156 = 000002E8
|$L25351|

; 622  :         mixcolor(col1,col2,r>>8);

	ldr       r0, [pc, #-0xF8]  ;  pc+8-248 = 00000158
	mov       r1, r10, asr #8
	cmp       r1, #1
	ldrh      r0, [r0]
	blt       |$L26135|  ; 00000278
	ldr       r2, [pc, #-0x108]  ;  pc+8-264 = 0000015C
	cmp       r1, #0xFE  ; 0xFE = 254
	ldrh      r2, [r2]
	strh      r2, [r11]
	bgt       |$L26116|  ; 0000027C
	and       r1, r1, #0xFF  ; 0xFF = 255
	bl        |?gr_mix@@YAGGE@Z|  ; 0000027C
|$L26135|
	strh      r0, [r11]
|$L26116|

; 623  :         gr_pixel(gr_pos);gr_pos++; 

	ldr       r3, [r5]
	mov       r0, r8
	mov       lr, pc
	mov       pc, r3

; 624  :         r+=MA;

	ldr       r0, [pc, #-0x134]  ;  pc+8-308 = 00000160
	sub       r4, r4, #1
	ldr       r0, [r0]
	add       r8, r8, #2
	cmp       r4, #0
	add       r10, r0, r10
	bhi       |$L25351|  ; 00000248
	ldr       r0, [pc, #-0x13C]  ;  pc+8-316 = 00000174
	ldr       r3, [r0]
|$L26127|

; 625  :         }
; 626  :   }
; 627  : if (ex4==ex3) { // punto solo

	ldr       r2, [sp, #0xC]  ; 0xC = 12
	cmp       r2, r9
	bne       |$L25353|  ; 000002F0

; 628  :   gr_pixela(gr_pos,(BYTE)((x3+x4)>>1));

	ldr       r2, [sp, #8]
	mov       r0, r8
	ldr       r3, [sp, #4]
	add       r3, r3, r2
	ldr       r2, [pc, #-0x188]  ;  pc+8-392 = 0000014C
	mov       r3, r3, asr #1
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       lr, pc
	mov       pc, r3

; 629  : } else { // degrade

	b         |$L26129|  ; 00000380
|$L26140|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
	DCD       |?tablainc@@3PAHA|
|$L25353|

; 630  :   alpha=255<<8;//da=(-255<<8)/(ex4-ex3);
; 631  :   da=(ex4-ex3);

	sub       r0, r2, r9

; 632  :   if (da>0xff) da=-tablainc[(da>>8)&0xff]>>8; else da=-tablainc[da];

	cmp       r0, #0xFF  ; 0xFF = 255
	movgt     r1, r0, asr #8
	ldrgt     r0, [pc, #-0x18]  ;  pc+8-24 = 000002EC
	andgt     r1, r1, #0xFF  ; 0xFF = 255
	ldrgt     r1, [r0, +r1, lsl #2]
	mov       r5, #0xFF, 24  ; 0xFF00 = 65280
	rsbgt     r1, r1, #0
	movgt     r6, r1, asr #8
	ldrle     r1, [pc, #-0x30]  ;  pc+8-48 = 000002EC
	ldrle     r1, [r1, +r0, lsl #2]
	rsble     r6, r1, #0

; 633  : 
; 634  :   if (ex3<0) { alpha+=da*(-ex3);ex3=0; }    

	cmp       r9, #0
	movmi     r1, r6
	mulmi     r0, r1, r9
	movmi     r1, #0
	rsbmi     r5, r0, #0xFF, 24  ; 0xFF00 = 65280
	strmi     r1, [sp]
	movmi     r9, r1

; 635  :   if (ex4>gr_ancho) ex4=gr_ancho;

	cmp       r2, r3
	movgt     r2, r3
	strgt     r3, [sp, #0xC]  ; 0xC = 12

; 636  :   cnt=ex4-ex3;

	subs      r4, r2, r9

; 637  :   while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	beq       |$L26129|  ; 00000380
|$L25361|
	mov       r3, r5, asr #8
	ldr       r2, [pc, #-0x210]  ;  pc+8-528 = 0000014C
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       r0, r8
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r8, r8, #2
	add       r5, r6, r5
	cmp       r4, #0
	bhi       |$L25361|  ; 00000350
|$L26129|

; 638  :   }
; 639  : }

	add       sp, sp, #0x10  ; 0x10 = 16
	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$M26137|

	ENDP  ; |?_FlineaDL@@YAXHPAUSegm@@0@Z|, _FlineaDL

	EXPORT	|?dist@@YAHHH@Z|			; dist

	AREA	|.text| { |?_FlineaDR@@YAXHPAUSegm@@0@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_FlineaDR@@YAXHPAUSegm@@0@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_FlineaDR@@YAXHPAUSegm@@0@Z| } ; comdat associative
|$T26186| DCD	|?_FlineaDR@@YAXHPAUSegm@@0@Z|
	DCD	0x4000fe02

	AREA	|.text| { |?_FlineaDR@@YAXHPAUSegm@@0@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_FlineaDR@@YAXHPAUSegm@@0@Z| PROC			; _FlineaDR

; 653  : {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
	sub       sp, sp, #0x14  ; 0x14 = 20
|$M26184|
	mov       r4, r0

; 654  : register WORD *gr_pos;
; 655  : register int cnt,alpha,da;
; 656  : int x1,x2,x3,x4;
; 657  : if (m1->deltax<0)

	ldr       r0, [r1, #0xC]  ; 0xC = 12

; 658  :    { x1=m1->x+m1->deltax;x2=m1->x; }

	ldr       r1, [r1, #4]
	cmp       r0, #0
	addmi     r3, r1, r0
	strmi     r3, [sp, #4]
	movmi     r7, r1

; 659  : else
; 660  :    { x2=m1->x+m1->deltax;x1=m1->x; }

	addpl     r7, r1, r0
	strpl     r1, [sp, #4]

; 661  : if (m2->deltax<0)

	ldr       r1, [r2, #0xC]  ; 0xC = 12

; 662  :    { x3=m2->x+m2->deltax;x4=m2->x; }
; 663  : else
; 664  :    { x4=m2->x+m2->deltax;x3=m2->x; }
; 665  : int ex1=x1>>FBASE,ex2=x2>>FBASE;

	mov       r5, r7, asr #8
	ldr       r0, [r2, #4]
	cmp       r1, #0
	add       r3, r0, r1
	strmi     r0, [sp, #8]
	strmi     r3, [sp, #0xC]  ; 0xC = 12
	strpl     r3, [sp, #8]
	ldr       r3, [sp, #4]
	strpl     r0, [sp, #0xC]  ; 0xC = 12
	mov       r9, r3, asr #8

; 666  : int ex3=x3>>FBASE,ex4=x4>>FBASE;

	ldr       r3, [sp, #0xC]  ; 0xC = 12
	mov       r3, r3, asr #8
	str       r3, [sp]
	ldr       r3, [sp, #8]
	mov       r0, r3, asr #8
	str       r0, [sp, #0x10]  ; 0x10 = 16

; 667  : if (ex4<=0 || ex1>=gr_ancho ) return;

	cmp       r0, #0
	ble       |$L26179|  ; 000003F0
	ldr       r6, [pc, #0x1B4]  ;  pc+8+436 = 00000234
	ldr       r0, [r6]
	cmp       r9, r0
	bge       |$L26179|  ; 000003F0

; 668  : int rx = MA*(ex2-MTX)-MB*(y-MTY);

	ldr       r1, [pc, #0x1A0]  ;  pc+8+416 = 00000230
	ldr       r2, [pc, #0x180]  ;  pc+8+384 = 00000214
	ldr       r1, [r1]
	ldr       r2, [r2]
	sub       r1, r5, r1
	ldr       r0, [pc, #0x188]  ;  pc+8+392 = 0000022C
	mov       r3, r1
	mul       lr, r3, r2
	ldr       r0, [r0]
	ldr       r3, [pc, #0x15C]  ;  pc+8+348 = 00000210
	sub       r0, r4, r0
	ldr       r3, [r3]
	mov       r11, r0

; 669  : int ry = MB*(ex2-MTX)+MA*(y-MTY);

	mul       r2, r0, r2
	mul       r10, r11, r3
	mul       r3, r1, r3
	sub       r10, lr, r10
	add       r11, r3, r2

; 670  : mixcolor(col1,col2,dist(rx,ry)>>16);

	mov       r1, r11
	mov       r0, r10
	bl        |?dist@@YAHHH@Z|  ; 000000E0
	ldr       r2, [pc, #0x144]  ;  pc+8+324 = 00000228
	mov       r1, r0, asr #16
	ldr       r0, [pc, #0x11C]  ;  pc+8+284 = 00000208
	cmp       r1, #1
	ldrh      r0, [r0]
	blt       |$L26183|  ; 00000110
	ldrh      r2, [r2]
	cmp       r1, #0xFE  ; 0xFE = 254
	ldr       r3, [pc, #0x100]  ;  pc+8+256 = 00000204
	strh      r2, [r3]
	bgt       |$L26151|  ; 00000118
	and       r1, r1, #0xFF  ; 0xFF = 255
	bl        |?gr_mix@@YAGGE@Z|  ; 00000114
|$L26183|
	ldr       r1, [pc, #0xEC]  ;  pc+8+236 = 00000204
	strh      r0, [r1]
|$L26151|

; 671  : if (ex1>0) GR_SET(ex1,y) else GR_SET(0,y)

	ldr       r0, [pc, #0x104]  ;  pc+8+260 = 00000224
	cmp       r9, #0

; 672  : if (ex2>0) { // entrada anti

	ldr       r1, [pc, #0xF8]  ;  pc+8+248 = 00000220
	ldr       r0, [r0]
	ldr       r2, [pc, #0xEC]  ;  pc+8+236 = 0000021C
	mul       r3, r0, r4
	ldr       r0, [pc, #0xE0]  ;  pc+8+224 = 00000218
	ldr       r0, [r0]
	addgt     r3, r3, r9
	cmp       r5, #0
	add       r8, r0, r3, lsl #1
	ble       |$L26181|  ; 00000178

; 673  :   if (ex1==ex2) { // punto solo

	cmp       r9, r5
	bne       |$L25402|  ; 00000238

; 674  :     gr_pixela(gr_pos,255-(BYTE)((x1+x2)>>1));gr_pos++;

	ldr       r3, [sp, #4]
	mov       r0, r8
	add       r3, r7, r3
	mov       r3, r3, asr #1
	and       r3, r3, #0xFF  ; 0xFF = 255
	rsb       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       lr, pc
	mov       pc, r3
	add       r8, r8, #2
|$L26181|

; 683  :     while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	ldr       r1, [r6]
|$L26175|

; 684  :     }
; 685  :   }
; 686  : if (ex3<=ex2) return;

	ldr       r7, [sp]
	cmp       r7, r5
	ble       |$L26179|  ; 000003F0

; 687  : if (ex3>0) { // lleno

	cmp       r7, #0
	ble       |$L26177|  ; 00000328

; 688  :     if (ex2<0) { rx+=MA*(-ex2);ry+=MB*(-ex2);ex2=0; }

	cmp       r5, #0
	bpl       |$L25414|  ; 000001BC
	ldr       r0, [pc, #0x74]  ;  pc+8+116 = 00000214
	ldr       r0, [r0]
	mul       r3, r0, r5
	ldr       r0, [pc, #0x64]  ;  pc+8+100 = 00000210
	ldr       r0, [r0]
	sub       r10, r10, r3
	mul       r3, r0, r5
	mov       r5, #0
	sub       r11, r11, r3
|$L25414|

; 689  :     if (ex3>gr_ancho) ex3=gr_ancho;

	cmp       r7, r1
	movgt     r7, r1
	strgt     r1, [sp]

; 690  :     cnt=ex3-ex2-1;

	sub       r3, r7, r5
	subs      r4, r3, #1

; 691  :     while (cnt--) {

	beq       |$L26177|  ; 00000328

; 690  :     cnt=ex3-ex2-1;

	ldr       r5, [pc, #0x30]  ;  pc+8+48 = 0000020C
|$L25417|

; 692  :         mixcolor(col1,col2,dist(rx,ry)>>16);

	mov       r1, r11
	mov       r0, r10
	bl        |?dist@@YAHHH@Z|  ; 000001E8
	mov       r1, r0, asr #16
	ldr       r0, [pc, #0x18]  ;  pc+8+24 = 00000208
	cmp       r1, #1
	ldrh      r0, [r0]
	bge       |$L26167|  ; 000002C4
	ldr       r1, [pc, #4]  ;  pc+8+4 = 00000204
	strh      r0, [r1]
	b         |$L26166|  ; 000002E8
|$L26187|
	DCD       |?gr_color1@@3GA|
	DCD       |?col2@@3GA|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
	DCD       |?MB@@3HA|
	DCD       |?MA@@3HA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?tablainc@@3PAHA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?col1@@3GA|
	DCD       |?MTY@@3HA|
	DCD       |?MTX@@3HA|
	DCD       |?gr_ancho@@3HA|
|$L25402|

; 675  :   } else { // degrade
; 676  :     alpha=0;//da=(255<<8)/(ex2-ex1);
; 677  :     da=(ex2-ex1);

	sub       r0, r5, r9

; 678  :     if (da>0xff) da=tablainc[(da>>8)&0xff]>>8; else da=tablainc[da];

	cmp       r0, #0xFF  ; 0xFF = 255
	movgt     r3, r0, asr #8
	andgt     r3, r3, #0xFF  ; 0xFF = 255
	ldrgt     r3, [r1, +r3, lsl #2]
	mov       r6, #0
	movgt     r7, r3, asr #8
	ldrle     r7, [r1, +r0, lsl #2]

; 679  : 
; 680  :     if (ex1<0) { alpha+=da*(-ex1);ex1=0; }

	cmp       r9, #0

; 681  :     if (ex2>=gr_ancho) ex2=gr_ancho-1;

	ldr       r0, [pc, #-0x30]  ;  pc+8-48 = 00000234
	movmi     r3, r7
	mulmi     r2, r3, r9
	ldr       r1, [r0]
	movmi     r9, #0
	rsbmi     r6, r2, #0
	cmp       r5, r1
	subge     r5, r1, #1

; 682  :     cnt=ex2-ex1+1;

	sub       r3, r5, r9
	adds      r4, r3, #1

; 683  :     while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	beq       |$L26175|  ; 0000017C
|$L25410|
	mov       r3, r6, asr #8
	ldr       r2, [pc, #-0x78]  ;  pc+8-120 = 0000021C
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       r0, r8
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r8, r8, #2
	add       r6, r7, r6
	cmp       r4, #0
	bhi       |$L25410|  ; 00000288
	ldr       r0, [pc, #-0x8C]  ;  pc+8-140 = 00000234
	ldr       r1, [r0]
	b         |$L26175|  ; 0000017C

; 692  :         mixcolor(col1,col2,dist(rx,ry)>>16);

|$L26167|
	ldr       r2, [pc, #-0xA4]  ;  pc+8-164 = 00000228
	cmp       r1, #0xFE  ; 0xFE = 254
	ldr       r6, [pc, #-0xD0]  ;  pc+8-208 = 00000204
	ldrh      r2, [r2]
	strh      r2, [r6]
	bgt       |$L26166|  ; 000002E8
	and       r1, r1, #0xFF  ; 0xFF = 255
	bl        |?gr_mix@@YAGGE@Z|  ; 000002E8
	strh      r0, [r6]
|$L26166|

; 693  :         gr_pixel(gr_pos);gr_pos++; 

	ldr       r3, [r5]
	mov       r0, r8
	mov       lr, pc
	mov       pc, r3

; 694  :         rx+=MA;

	ldr       r0, [pc, #-0xEC]  ;  pc+8-236 = 00000214
	sub       r4, r4, #1
	ldr       r0, [r0]
	add       r8, r8, #2
	cmp       r4, #0
	add       r10, r0, r10

; 695  :         ry+=MB;

	ldr       r0, [pc, #-0x108]  ;  pc+8-264 = 00000210
	ldr       r0, [r0]
	add       r11, r0, r11
	bhi       |$L25417|  ; 000001D8
	ldr       r0, [pc, #-0xF4]  ;  pc+8-244 = 00000234
	ldr       r1, [r0]
|$L26177|

; 696  :         }
; 697  :   }
; 698  : if (ex4==ex3) { // punto solo

	ldr       r3, [sp, #0x10]  ; 0x10 = 16
	cmp       r3, r7
	bne       |$L25419|  ; 00000360

; 699  :   gr_pixela(gr_pos,(BYTE)((x3+x4)>>1));

	ldr       r2, [sp, #0xC]  ; 0xC = 12
	mov       r0, r8
	ldr       r3, [sp, #8]
	add       r3, r3, r2
	ldr       r2, [pc, #-0x130]  ;  pc+8-304 = 0000021C
	mov       r3, r3, asr #1
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       lr, pc
	mov       pc, r3

; 700  : } else { // degrade

	b         |$L26179|  ; 000003F0
|$L25419|

; 701  :   alpha=255<<8;//da=(-255<<8)/(ex4-ex3);
; 702  :   da=(ex4-ex3);

	sub       r0, r3, r7

; 703  :   if (da>0xff) da=-tablainc[(da>>8)&0xff]>>8; else da=-tablainc[da];

	cmp       r0, #0xFF  ; 0xFF = 255
	movgt     r2, r0, asr #8
	ldrgt     r0, [pc, #-0x154]  ;  pc+8-340 = 00000220
	andgt     r2, r2, #0xFF  ; 0xFF = 255
	ldrgt     r2, [r0, +r2, lsl #2]
	mov       r5, #0xFF, 24  ; 0xFF00 = 65280
	rsbgt     r2, r2, #0
	movgt     r6, r2, asr #8
	ldrle     r2, [pc, #-0x16C]  ;  pc+8-364 = 00000220
	ldrle     r2, [r2, +r0, lsl #2]
	rsble     r6, r2, #0

; 704  : 
; 705  :   if (ex3<0) { alpha+=da*(-ex3);ex3=0; }    

	cmp       r7, #0
	movmi     r2, r6
	mulmi     r0, r2, r7
	movmi     r2, #0
	rsbmi     r5, r0, #0xFF, 24  ; 0xFF00 = 65280
	strmi     r2, [sp]
	movmi     r7, r2

; 706  :   if (ex4>gr_ancho) ex4=gr_ancho;

	cmp       r3, r1
	movgt     r3, r1
	strgt     r1, [sp, #0x10]  ; 0x10 = 16

; 707  :   cnt=ex4-ex3;

	subs      r4, r3, r7

; 708  :   while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	beq       |$L26179|  ; 000003F0
|$L25427|
	mov       r3, r5, asr #8
	ldr       r2, [pc, #-0x1B0]  ;  pc+8-432 = 0000021C
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       r0, r8
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r8, r8, #2
	add       r5, r6, r5
	cmp       r4, #0
	bhi       |$L25427|  ; 000003C0
|$L26179|

; 709  :   }
; 710  : }

	add       sp, sp, #0x14  ; 0x14 = 20
	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$M26185|

	ENDP  ; |?_FlineaDR@@YAXHPAUSegm@@0@Z|, _FlineaDR


	AREA	|.text| { |?dist@@YAHHH@Z| }, CODE, SELECTION=2 ; comdat any

	AREA	|.pdata$$?dist@@YAHHH@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?dist@@YAHHH@Z| } ; comdat associative
|$T26197| DCD	|?dist@@YAHHH@Z|
	DCD	0x40001100

	AREA	|.text| { |?dist@@YAHHH@Z| }, CODE, SELECTION=2 ; comdat any

|?dist@@YAHHH@Z| PROC					; dist

; 643  : {

|$M26195|

; 644  : //return abs(dx)+abs(dy);
; 645  : register int min,max;
; 646  : dx=absi(dx);dy=absi(dy);

	add       r3, r0, r0, asr #31
	eor       r2, r3, r0, asr #31
	add       r3, r1, r1, asr #31
	eor       r1, r3, r1, asr #31

; 647  : if (dx<dy) { min=dx;max=dy; } else { min=dy;max=dx; }

	cmp       r2, r1
	movlt     r0, r2
	movge     r0, r1
	movge     r1, r2

; 648  : return ((max<<8)+(max<<3)-(max<<4)-(max<<1)+
; 649  :         (min<<7)-(min<<5)+(min<<3)-(min<<1));

	add       r3, r0, r1, lsl #1
	add       r3, r1, r3, lsl #4
	add       r3, r3, r0
	mov       r3, r3, lsl #3
	sub       r3, r3, r1, lsl #4
	sub       r3, r3, r1, lsl #1
	sub       r3, r3, r0, lsl #5
	sub       r0, r3, r0, lsl #1

; 650  : }

	mov       pc, lr
|$M26196|

	ENDP  ; |?dist@@YAHHH@Z|, dist


	AREA	|.text| { |?_FlineaTX@@YAXHPAUSegm@@0@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?_FlineaTX@@YAXHPAUSegm@@0@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?_FlineaTX@@YAXHPAUSegm@@0@Z| } ; comdat associative
|$T26220| DCD	|?_FlineaTX@@YAXHPAUSegm@@0@Z|
	DCD	0x4000e702

	AREA	|.text| { |?_FlineaTX@@YAXHPAUSegm@@0@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?_FlineaTX@@YAXHPAUSegm@@0@Z| PROC			; _FlineaTX

; 719  : {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
	sub       sp, sp, #0x14  ; 0x14 = 20
|$M26218|

; 720  : register WORD *gr_pos;
; 721  : register int cnt,alpha,da;
; 722  : int x1,x2,x3,x4;
; 723  : if (m1->deltax<0)

	ldr       r3, [r1, #0xC]  ; 0xC = 12

; 724  :    { x1=m1->x+m1->deltax;x2=m1->x; }

	ldr       r1, [r1, #4]
	cmp       r3, #0
	addmi     r3, r1, r3
	movmi     r10, r1
	strmi     r3, [sp, #4]

; 725  : else
; 726  :    { x2=m1->x+m1->deltax;x1=m1->x; }

	addpl     r10, r1, r3
	strpl     r1, [sp, #4]

; 727  : if (m2->deltax<0)

	ldr       r3, [r2, #0xC]  ; 0xC = 12

; 728  :    { x3=m2->x+m2->deltax;x4=m2->x; }
; 729  : else
; 730  :    { x4=m2->x+m2->deltax;x3=m2->x; }
; 731  : int ex1=x1>>FBASE,ex2=x2>>FBASE;

	mov       r6, r10, asr #8
	ldr       r1, [r2, #4]
	cmp       r3, #0
	add       r3, r1, r3
	strmi     r1, [sp, #8]
	strmi     r3, [sp, #0xC]  ; 0xC = 12
	strpl     r3, [sp, #8]
	ldr       r3, [sp, #4]
	strpl     r1, [sp, #0xC]  ; 0xC = 12
	mov       r4, r3, asr #8

; 732  : int ex3=x3>>FBASE,ex4=x4>>FBASE;

	ldr       r3, [sp, #0xC]  ; 0xC = 12
	mov       r3, r3, asr #8
	str       r3, [sp]
	ldr       r3, [sp, #8]
	mov       r1, r3, asr #8
	str       r1, [sp, #0x10]  ; 0x10 = 16

; 733  : if (ex4<=0 || ex1>=gr_ancho ) return;

	cmp       r1, #0
	ble       |$L26212|  ; 00000394
	ldr       r1, [pc, #0x10C]  ;  pc+8+268 = 00000188
	ldr       r1, [r1]
	cmp       r4, r1
	bge       |$L26212|  ; 00000394

; 734  : int rx = MA*(ex2-MTX)-MB*(y-MTY);

	ldr       r2, [pc, #0xF8]  ;  pc+8+248 = 00000184

; 735  : int ry = MB*(ex2-MTX)+MA*(y-MTY);
; 736  : texture(rx,ry);
; 737  : if (ex1>0) GR_SET(ex1,y) else GR_SET(0,y)

	cmp       r4, #0
	ldr       r11, [pc, #0xEC]  ;  pc+8+236 = 00000180
	ldr       r2, [r2]
	ldr       r1, [pc, #0xE0]  ;  pc+8+224 = 0000017C
	sub       r2, r6, r2
	ldr       r3, [r11]
	ldr       r1, [r1]
	mov       lr, r2
	ldr       r7, [pc, #0xC8]  ;  pc+8+200 = 00000178
	mul       r9, lr, r3
	sub       r1, r0, r1
	ldr       lr, [r7]
	mov       r8, r1
	mul       r5, r8, lr
	sub       r8, r9, r5
	mul       r9, r2, lr
	mul       r2, r1, r3
	add       r9, r9, r2
	mov       r2, r8, asr #8
	and       r2, r2, #0xFF  ; 0xFF = 255
	and       r1, r9, #0xFF, 24  ; 0xFF00 = 65280
	orr       r2, r2, r1
	ldr       r1, [pc, #0x8C]  ;  pc+8+140 = 00000174
	ldr       r1, [r1]
	ldr       r2, [r1, +r2, lsl #2]
	mov       r1, r2, lsl #16
	ldr       r2, [pc, #0x78]  ;  pc+8+120 = 00000170
	mov       r1, r1, lsr #16
	strh      r1, [r2]
	ldr       r1, [pc, #0x68]  ;  pc+8+104 = 0000016C
	ldr       r1, [r1]
	mul       r2, r1, r0
	ldr       r0, [pc, #0x58]  ;  pc+8+88 = 00000168

; 738  : if (ex2>0) { // entrada anti

	ldr       r1, [pc, #0x50]  ;  pc+8+80 = 00000164
	ldr       r0, [r0]
	addgt     r2, r2, r4
	cmp       r6, #0
	add       r5, r0, r2, lsl #1
	ldr       r2, [pc, #0x38]  ;  pc+8+56 = 00000160
	ble       |$L26208|  ; 00000218

; 739  :   if (ex1==ex2) { // punto solo

	cmp       r4, r6
	bne       |$L25464|  ; 0000018C

; 740  :     gr_pixela(gr_pos,255-(BYTE)((x1+x2)>>1));gr_pos++;

	ldr       r3, [sp, #4]
	mov       r0, r5
	add       r3, r10, r3
	mov       r3, r3, asr #1
	and       r3, r3, #0xFF  ; 0xFF = 255
	rsb       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       lr, pc
	mov       pc, r3

; 741  :   } else { // degrade

	ldr       lr, [r7]
	add       r5, r5, #2
	b         |$L26217|  ; 00000214
|$L26221|
	DCD       |?gr_pixela@@3P6AXPAGE@ZA|
	DCD       |?tablainc@@3PAHA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_color1@@3GA|
	DCD       |?mTex@@3PAHA|
	DCD       |?MB@@3HA|
	DCD       |?MTY@@3HA|
	DCD       |?MA@@3HA|
	DCD       |?MTX@@3HA|
	DCD       |?gr_ancho@@3HA|
|$L25464|

; 742  :     alpha=0;//da=(255<<8)/(ex2-ex1);
; 743  :     da=(ex2-ex1);

	sub       r0, r6, r4

; 744  :     if (da>0xff) da=tablainc[(da>>8)&0xff]>>8; else da=tablainc[da];

	cmp       r0, #0xFF  ; 0xFF = 255
	movgt     r2, r0, asr #8
	andgt     r2, r2, #0xFF  ; 0xFF = 255
	ldrgt     r2, [r1, +r2, lsl #2]
	mov       r7, #0
	movgt     r10, r2, asr #8
	ldrle     r10, [r1, +r0, lsl #2]

; 745  : 
; 746  :     if (ex1<0) { alpha+=da*(-ex1);ex1=0; }

	cmp       r4, #0

; 747  :     if (ex2>=gr_ancho) ex2=gr_ancho-1;

	ldr       r0, [pc, #-0x30]  ;  pc+8-48 = 00000188
	movmi     r2, r10
	mulmi     r1, r2, r4
	ldr       r0, [r0]
	movmi     r4, #0
	rsbmi     r7, r1, #0
	cmp       r6, r0
	subge     r6, r0, #1

; 748  :     cnt=ex2-ex1+1;

	sub       r2, r6, r4
	adds      r4, r2, #1

; 749  :     while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	beq       |$L26208|  ; 00000218
|$L25472|
	mov       r3, r7, asr #8
	ldr       r2, [pc, #-0x88]  ;  pc+8-136 = 00000160
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       r0, r5
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r5, r5, #2
	add       r7, r10, r7
	cmp       r4, #0
	bhi       |$L25472|  ; 000001DC
	ldr       r0, [pc, #-0x9C]  ;  pc+8-156 = 00000178
	ldr       lr, [r0]
|$L26217|
	ldr       r3, [r11]
|$L26208|

; 750  :     }
; 751  :   }
; 752  : if (ex3<=ex2) return;

	ldr       r10, [sp]
	cmp       r10, r6
	ble       |$L26212|  ; 00000394

; 753  : if (ex3>0) { // lleno

	cmp       r10, #0
	ble       |$L26210|  ; 000002C0

; 754  :     if (ex2<0) { rx+=MA*(-ex2);ry+=MB*(-ex2);ex2=0; }

	cmp       r6, #0

; 755  :     if (ex3>gr_ancho) ex3=gr_ancho;

	ldr       r0, [pc, #-0xB0]  ;  pc+8-176 = 00000188
	mulmi     r2, r3, r6
	mulmi     r3, lr, r6
	ldr       r0, [r0]
	movmi     r6, #0
	submi     r9, r9, r3
	submi     r8, r8, r2
	cmp       r10, r0
	movgt     r10, r0
	strgt     r0, [sp]

; 756  :     cnt=ex3-ex2-1;

	sub       r3, r10, r6
	subs      r4, r3, #1

; 757  :     while (cnt--) {

	beq       |$L26210|  ; 000002C0

; 756  :     cnt=ex3-ex2-1;

	ldr       r6, [pc, #0x8C]  ;  pc+8+140 = 000002F8
|$L25479|

; 758  :         texture(rx,ry);

	mov       r3, r8, asr #8
	ldr       r0, [pc, #-0x100]  ;  pc+8-256 = 00000174
	and       r3, r3, #0xFF  ; 0xFF = 255
	ldr       r1, [pc, #-0x10C]  ;  pc+8-268 = 00000170
	and       r2, r9, #0xFF, 24  ; 0xFF00 = 65280
	orr       r3, r3, r2
	ldr       r2, [r0]
	ldr       r0, [r2, +r3, lsl #2]

; 759  :         gr_pixel(gr_pos);gr_pos++; 

	ldr       r3, [r6]
	strh      r0, [r1]
	mov       r0, r5
	mov       lr, pc
	mov       pc, r3

; 760  :         rx+=MA;

	ldr       r0, [r11]
	sub       r4, r4, #1
	add       r8, r0, r8

; 761  :         ry+=MB;

	ldr       r0, [pc, #-0x138]  ;  pc+8-312 = 00000178
	add       r5, r5, #2
	ldr       r0, [r0]
	cmp       r4, #0
	add       r9, r0, r9
	bhi       |$L25479|  ; 00000268
|$L26210|

; 762  :         }
; 763  :   }
; 764  : if (ex4==ex3) { // punto solo

	ldr       r2, [sp, #0x10]  ; 0x10 = 16
	cmp       r2, r10
	bne       |$L25481|  ; 000002FC

; 765  :   gr_pixela(gr_pos,(BYTE)((x3+x4)>>1));

	ldr       r2, [sp, #0xC]  ; 0xC = 12
	mov       r0, r5
	ldr       r3, [sp, #8]
	add       r3, r3, r2
	ldr       r2, [pc, #-0x184]  ;  pc+8-388 = 00000160
	mov       r3, r3, asr #1
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       lr, pc
	mov       pc, r3

; 766  : } else { // degrade

	b         |$L26212|  ; 00000394
|$L26222|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
|$L25481|

; 767  :   alpha=255<<8;//da=(-255<<8)/(ex4-ex3);
; 768  :   da=(ex4-ex3);

	sub       r0, r2, r10

; 769  :   if (da>0xff) da=-tablainc[(da>>8)&0xff]>>8; else da=-tablainc[da];

	cmp       r0, #0xFF  ; 0xFF = 255
	movgt     r3, r0, asr #8
	ldrgt     r0, [pc, #-0x1AC]  ;  pc+8-428 = 00000164
	andgt     r3, r3, #0xFF  ; 0xFF = 255
	ldrle     r1, [pc, #-0x1B4]  ;  pc+8-436 = 00000164
	ldrgt     r3, [r0, +r3, lsl #2]
	mov       r6, #0xFF, 24  ; 0xFF00 = 65280
	rsbgt     r3, r3, #0
	movgt     r7, r3, asr #8
	ldrle     r3, [r1, +r0, lsl #2]

; 770  : 
; 771  :   if (ex3<0) { alpha+=da*(-ex3);ex3=0; }    
; 772  :   if (ex4>gr_ancho) ex4=gr_ancho;

	ldr       r0, [pc, #-0x1A8]  ;  pc+8-424 = 00000188
	rsble     r7, r3, #0
	cmp       r10, #0
	ldr       r0, [r0]
	movmi     r3, r7
	mulmi     r1, r3, r10
	movmi     r3, #0
	rsbmi     r6, r1, #0xFF, 24  ; 0xFF00 = 65280
	strmi     r3, [sp]
	movmi     r10, r3
	cmp       r2, r0
	movgt     r2, r0
	strgt     r0, [sp, #0x10]  ; 0x10 = 16

; 773  :   cnt=ex4-ex3;

	subs      r4, r2, r10

; 774  :   while (cnt--) { gr_pixela(gr_pos,alpha>>8);gr_pos++;alpha+=da; }

	beq       |$L26212|  ; 00000394
|$L25489|
	mov       r3, r6, asr #8
	ldr       r2, [pc, #-0x210]  ;  pc+8-528 = 00000160
	and       r1, r3, #0xFF  ; 0xFF = 255
	ldr       r3, [r2]
	mov       r0, r5
	mov       lr, pc
	mov       pc, r3
	sub       r4, r4, #1
	add       r5, r5, #2
	add       r6, r7, r6
	cmp       r4, #0
	bhi       |$L25489|  ; 00000364
|$L26212|

; 775  :   }
; 776  : }

	add       sp, sp, #0x14  ; 0x14 = 20
	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$M26219|

	ENDP  ; |?_FlineaTX@@YAXHPAUSegm@@0@Z|, _FlineaTX

	EXPORT	|?addlin@@YAXPAUSegm@@@Z|		; addlin

	AREA	|.text| { |?addlin@@YAXPAUSegm@@@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?addlin@@YAXPAUSegm@@@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?addlin@@YAXPAUSegm@@@Z| } ; comdat associative
|$T26228| DCD	|?addlin@@YAXPAUSegm@@@Z|
	DCD	0x40002301

	AREA	|.text| { |?addlin@@YAXPAUSegm@@@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?addlin@@YAXPAUSegm@@@Z| PROC				; addlin

; 780  : {

	stmdb     sp!, {r4, r5, r10, r11, lr}  ; stmfd
|$M26226|

; 781  : register int xr=ii->x;
; 782  : Segm **cursor=(xquisc-1);

	ldr       r4, [pc, #0x7C]  ;  pc+8+124 = 00000088

; 783  : while (cursor>=xquis && (*cursor)->x>xr) {

	ldr       r2, [pc, #0x74]  ;  pc+8+116 = 00000084
	ldr       r1, [r4]
	ldr       r5, [r0, #4]
	sub       r1, r1, #4
	cmp       r1, r2
	bcc       |$L25499|  ; 00000070
|$L25497|
	ldr       r3, [r1]
	ldr       r11, [r3, #4]
	cmp       r11, r5
	ble       |$L25498|  ; 00000040

; 784  :       *(cursor+1)=*cursor;cursor--;

	str       r3, [r1, #4]
	sub       r1, r1, #4
	cmp       r1, r2
	bcs       |$L25497|  ; 00000020
|$L25498|

; 785  :       }
; 786  : if (cursor>=xquis && (*cursor)->x+(*cursor)->deltax > ii->x+ii->deltax) {

	cmp       r1, r2
	bcc       |$L25499|  ; 00000070
	ldr       r2, [r1]
	ldr       r10, [r0, #4]
	ldr       r11, [r2, #4]
	ldr       r3, [r2, #0xC]  ; 0xC = 12
	add       r3, r3, r11
	ldr       r11, [r0, #0xC]  ; 0xC = 12
	add       r11, r11, r10
	cmp       r3, r11

; 787  :     *(cursor+1)=*cursor;cursor--; }    

	strgt     r2, [r1, #4]
	subgt     r1, r1, #4
|$L25499|

; 788  : *(cursor+1)=ii;

	str       r0, [r1, #4]

; 789  : xquisc++;

	ldr       r0, [r4]
	add       r0, r0, #4
	str       r0, [r4]

; 790  : }

	ldmia     sp!, {r4, r5, r10, r11, pc}  ; ldmfd
|$L26229|
	DCD       |?xquis@@3PAPAUSegm@@A|
	DCD       |?xquisc@@3PAPAUSegm@@A|
|$M26227|

	ENDP  ; |?addlin@@YAXPAUSegm@@@Z|, addlin

	EXPORT	|?gr_drawPoli@@YAXXZ|			; gr_drawPoli

	AREA	|.text| { |?gr_drawPoli@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_drawPoli@@YAXXZ|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_drawPoli@@YAXXZ| } ; comdat associative
|$T26244| DCD	|?gr_drawPoli@@YAXXZ|
	DCD	0x40006801

	AREA	|.text| { |?gr_drawPoli@@YAXXZ| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_drawPoli@@YAXXZ| PROC				; gr_drawPoli

; 793  : {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
|$M26242|

; 794  : Segm **jj;
; 795  : Segm *scopia=segmentos;
; 796  : pact=actual;
; 797  : segmentos[cntSegm].y=-1;

	ldr       r0, [pc, #0x70]  ;  pc+8+112 = 0000007C
	mvn       r11, #0
	ldr       r7, [pc, #0x64]  ;  pc+8+100 = 00000078
	ldr       r0, [r0]

; 798  : if (yMax>gr_alto) { yMax=gr_alto; }

	ldr       r10, [pc, #0x58]  ;  pc+8+88 = 00000074
	str       r11, [r7, +r0, lsl #4]
	ldr       r0, [pc, #0x4C]  ;  pc+8+76 = 00000070
	ldr       r3, [r10]
	ldr       r2, [r0]

; 799  : for (;yMin<yMax;) {

	ldr       r5, [pc, #0x3C]  ;  pc+8+60 = 0000006C
	cmp       r3, r2
	ldr       r9, [pc, #0x30]  ;  pc+8+48 = 00000068
	movgt     r3, r2
	ldr       r6, [pc, #0x24]  ;  pc+8+36 = 00000064
	strgt     r3, [r10]
	mov       r1, r9
	ldr       r0, [r5]
	ldr       r3, [r10]
	str       r1, [r6]
	cmp       r0, r3
	bge       |$L25508|  ; 0000017C
	ldr       r8, [pc]  ;  pc+8+0 = 00000060

; 800  :     while (scopia->y==yMin) {

	b         |$L25507|  ; 00000098
|$L26245|
	DCD       |?xquisc@@3PAPAUSegm@@A|
	DCD       |?pact@@3PAPAUSegm@@A|
	DCD       |?actual@@3PAPAUSegm@@A|
	DCD       |?yMin@@3HA|
	DCD       |?gr_alto@@3HA|
	DCD       |?yMax@@3HA|
	DCD       |?segmentos@@3PAUSegm@@A|
	DCD       |?cntSegm@@3HA|
|$L25510|

; 801  :           *pact=scopia;pact++;scopia++;

	str       r7, [r1]
	add       r7, r7, #0x10  ; 0x10 = 16
	ldr       r0, [r6]
	add       r1, r0, #4
	ldr       r0, [r5]
	str       r1, [r6]
|$L25507|
	ldr       r3, [r7]
	cmp       r3, r0
	beq       |$L25510|  ; 00000080

; 802  :           }
; 803  :     xquisc=xquis;

	ldr       r2, [pc, #0x84]  ;  pc+8+132 = 00000130

; 804  :     jj=actual;

	mov       r4, r9

; 805  :     while (jj<pact) {

	cmp       r4, r1
	str       r2, [r8]
	bcs       |$L25514|  ; 000000D8
|$L25513|

; 806  :           addlin(*jj);

	ldr       r0, [r4]
	bl        |?addlin@@YAXPAUSegm@@@Z|  ; 000000C4
	ldr       r1, [r6]

; 807  :           jj++;

	add       r4, r4, #4
	cmp       r4, r1
	bcc       |$L25513|  ; 000000B8
	ldr       r0, [r5]
	ldr       r2, [r8]
|$L25514|

; 808  :           }
; 809  :     for (jj=xquis;jj+1<xquisc;jj+=2) {

	ldr       r4, [pc, #0x50]  ;  pc+8+80 = 00000130
	add       r3, r4, #4
	cmp       r3, r2
	bcs       |$L25517|  ; 0000011C
|$L25515|

; 810  : /*
; 811  :         gr_color1=0xff00;
; 812  :         gr_hline(((*jj)->x+(*jj)->deltax)>>FBASE,yMin,((*(jj+1))->x+(*(jj+1))->deltax)>>FBASE);
; 813  :         gr_color1=0xff;
; 814  :         gr_hline((*jj)->x>>FBASE,yMin,(*(jj+1))->x>>FBASE);
; 815  : */
; 816  :           fillpoly(yMin,*jj,*(jj+1));

	ldr       r3, [pc, #0x3C]  ;  pc+8+60 = 0000012C
	ldr       r2, [r4, #4]
	ldr       r1, [r4]
	ldr       r3, [r3]
	mov       lr, pc
	mov       pc, r3
	add       r4, r4, #8
	ldr       r0, [r8]
	add       r3, r4, #4
	cmp       r3, r0
	ldr       r0, [r5]
	bcc       |$L25515|  ; 000000E8

; 808  :           }
; 809  :     for (jj=xquis;jj+1<xquisc;jj+=2) {

	ldr       r1, [r6]
|$L25517|

; 817  :           }
; 818  :     jj=actual;
; 819  :     yMin++;

	add       r0, r0, #1
	mov       r2, r9
	str       r0, [r5]
	b         |$L26241|  ; 00000168
|$L26246|
	DCD       |?fillpoly@@3P6AXHPAUSegm@@0@ZA|
	DCD       |?xquis@@3PAPAUSegm@@A|
|$L25519|

; 821  :           if (yMin<(*jj)->yfin) {

	ldr       r3, [r2]
	ldr       lr, [r3, #8]
	cmp       r0, lr

; 822  :              (*jj)->x+=(*jj)->deltax;

	ldrlt     r0, [r3, #4]

; 823  :              jj++;

	addlt     r2, r2, #4
	ldrlt     r1, [r3, #0xC]  ; 0xC = 12
	addlt     r1, r1, r0
	strlt     r1, [r3, #4]

; 824  :           } else {

	ldrlt     r1, [r6]
	ldrlt     r0, [r5]

; 825  :             *jj=*(pact-1);

	ldrge     r3, [r1, #-4]!
	strge     r3, [r2]

; 826  :              pact--;

	strge     r1, [r6]
|$L26241|

; 820  :     while (jj<pact) {

	cmp       r2, r1
	bcc       |$L25519|  ; 00000134
	ldr       r3, [r10]
	cmp       r0, r3
	blt       |$L25507|  ; 00000098
|$L25508|

; 827  :              }
; 828  :           }
; 829  :     }
; 830  : yMin=gr_alto+1;

	ldr       r0, [pc, #-0x114]  ;  pc+8-276 = 00000070

; 831  : yMax=-1;
; 832  : cntSegm=0;

	ldr       r1, [pc, #-0x10C]  ;  pc+8-268 = 0000007C
	ldr       r3, [r0]
	str       r11, [r10]
	add       r0, r3, #1
	str       r0, [r5]
	mov       r0, #0
	str       r0, [r1]

; 833  : }

	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$M26243|

	ENDP  ; |?gr_drawPoli@@YAXXZ|, gr_drawPoli

	EXPORT	|?gr_char@@YADHHE@Z|			; gr_char

	AREA	|.text| { |?gr_char@@YADHHE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_char@@YADHHE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_char@@YADHHE@Z| } ; comdat associative
|$T26262| DCD	|?gr_char@@YADHHE@Z|
	DCD	0x40004702

	AREA	|.text| { |?gr_char@@YADHHE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_char@@YADHHE@Z| PROC				; gr_char

; 1099 : {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
	sub       sp, sp, #0xC  ; 0xC = 12
|$M26260|

; 1100 : const BYTE *car=&fontv12[c*13];

	and       r3, r2, #0xFF  ; 0xFF = 255
	ldr       r9, [pc, #0x104]  ;  pc+8+260 = 00000118
	mov       r2, #0xD  ; 0xD = 13
	ldr       r10, [pc, #0xF8]  ;  pc+8+248 = 00000114
	mov       r8, r0
	ldr       r0, [pc, #0xEC]  ;  pc+8+236 = 00000110
	mul       r2, r3, r2
	ldr       r11, [pc, #0xE0]  ;  pc+8+224 = 0000010C
	mov       r5, r1
	add       r0, r2, r0

; 1101 : register int i,j,cnt=(*car)+1;

	ldrb      r1, [r0]

; 1102 : car++;

	add       r3, r0, #1
	str       r3, [sp]
	mov       r3, #0xC  ; 0xC = 12
	add       r1, r1, #1
	str       r3, [sp, #4]
	str       r1, [sp, #8]
|$L25534|

; 1104 :   for (j=0;j<cnt;j++)

	cmp       r1, #0
	ble       |$L25535|  ; 000000CC
	ldr       r0, [pc, #0xAC]  ;  pc+8+172 = 00000108
	mov       r4, r8
	mov       r6, r1
	sub       r7, r0, r8
|$L25537|

; 1105 :     if (*car&bit[j]) gr_setpixel(x+j,y);

	ldr       r2, [sp]
	ldrb      r3, [r7, +r4]
	ldrb      r2, [r2]
	ands      r3, r2, r3
	beq       |$L25538|  ; 000000BC
	ldr       r0, [pc, #0x84]  ;  pc+8+132 = 00000104
	ldr       r3, [r0]
	cmp       r4, r3
	bcs       |$L25538|  ; 000000BC
	ldr       r0, [pc, #0x70]  ;  pc+8+112 = 00000100
	ldr       r3, [r0]
	cmp       r5, r3
	bcs       |$L25538|  ; 000000BC
	ldr       r0, [r10]
	mul       r3, r0, r5
	ldr       r0, [r11]
	add       r3, r3, r4
	add       r0, r0, r3, lsl #1
	ldr       r3, [r9]
	mov       lr, pc
	mov       pc, r3
	ldr       r1, [sp, #8]
|$L25538|
	sub       r6, r6, #1
	add       r4, r4, #1
	cmp       r6, #0
	bhi       |$L25537|  ; 00000064
|$L25535|

; 1103 : for (i=0;i<12;i++,car++,y++)

	ldr       r3, [sp]
	add       r5, r5, #1
	add       r3, r3, #1
	str       r3, [sp]
	ldr       r3, [sp, #4]
	sub       r0, r3, #1
	str       r0, [sp, #4]
	cmp       r0, #0
	bhi       |$L25534|  ; 0000004C

; 1106 : return cnt;

	mov       r3, r1, lsl #24
	mov       r0, r3, asr #24

; 1107 : }

	add       sp, sp, #0xC  ; 0xC = 12
	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$L26263|
	DCD       |?gr_alto@@3HA|
	DCD       |?gr_ancho@@3HA|
	DCD       |bit|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |fontv12|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
|$M26261|

	ENDP  ; |?gr_char@@YADHHE@Z|, gr_char

	EXPORT	|?gr_chari@@YADHHE@Z|			; gr_chari

	AREA	|.text| { |?gr_chari@@YADHHE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_chari@@YADHHE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_chari@@YADHHE@Z| } ; comdat associative
|$T26279| DCD	|?gr_chari@@YADHHE@Z|
	DCD	0x40004702

	AREA	|.text| { |?gr_chari@@YADHHE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_chari@@YADHHE@Z| PROC				; gr_chari

; 1110 : {

	stmdb     sp!, {r4 - r11, lr}  ; stmfd
	sub       sp, sp, #0xC  ; 0xC = 12
|$M26277|

; 1111 : const BYTE *car=&fontv12[c*13];

	and       r3, r2, #0xFF  ; 0xFF = 255
	ldr       r9, [pc, #0x104]  ;  pc+8+260 = 00000118
	mov       r2, #0xD  ; 0xD = 13
	ldr       r10, [pc, #0xF8]  ;  pc+8+248 = 00000114
	mov       r8, r0
	ldr       r0, [pc, #0xEC]  ;  pc+8+236 = 00000110
	mul       r2, r3, r2
	ldr       r11, [pc, #0xE0]  ;  pc+8+224 = 0000010C
	mov       r5, r1
	add       r0, r2, r0

; 1112 : register int i,j,cnt=(*car)+1;

	ldrb      r1, [r0]

; 1113 : car++;

	add       r3, r0, #1
	str       r3, [sp]
	mov       r3, #0xC  ; 0xC = 12
	add       r1, r1, #1
	str       r3, [sp, #4]
	str       r1, [sp, #8]
|$L25550|

; 1115 :   for (j=0;j<cnt;j++)

	cmp       r1, #0
	ble       |$L25551|  ; 000000CC
	ldr       r0, [pc, #0xAC]  ;  pc+8+172 = 00000108
	mov       r4, r8
	mov       r6, r1
	sub       r7, r0, r8
|$L25553|

; 1116 :     if (!(*car&bit[j])) gr_setpixel(x+j,y);

	ldr       r2, [sp]
	ldrb      r3, [r7, +r4]
	ldrb      r2, [r2]
	ands      r3, r2, r3
	bne       |$L25554|  ; 000000BC
	ldr       r0, [pc, #0x84]  ;  pc+8+132 = 00000104
	ldr       r3, [r0]
	cmp       r4, r3
	bcs       |$L25554|  ; 000000BC
	ldr       r0, [pc, #0x70]  ;  pc+8+112 = 00000100
	ldr       r3, [r0]
	cmp       r5, r3
	bcs       |$L25554|  ; 000000BC
	ldr       r0, [r10]
	mul       r3, r0, r5
	ldr       r0, [r11]
	add       r3, r3, r4
	add       r0, r0, r3, lsl #1
	ldr       r3, [r9]
	mov       lr, pc
	mov       pc, r3
	ldr       r1, [sp, #8]
|$L25554|
	sub       r6, r6, #1
	add       r4, r4, #1
	cmp       r6, #0
	bhi       |$L25553|  ; 00000064
|$L25551|

; 1114 : for (i=0;i<12;i++,car++,y++)

	ldr       r3, [sp]
	add       r5, r5, #1
	add       r3, r3, #1
	str       r3, [sp]
	ldr       r3, [sp, #4]
	sub       r0, r3, #1
	str       r0, [sp, #4]
	cmp       r0, #0
	bhi       |$L25550|  ; 0000004C

; 1117 : return cnt;

	mov       r3, r1, lsl #24
	mov       r0, r3, asr #24

; 1118 : }

	add       sp, sp, #0xC  ; 0xC = 12
	ldmia     sp!, {r4 - r11, pc}  ; ldmfd
|$L26280|
	DCD       |?gr_alto@@3HA|
	DCD       |?gr_ancho@@3HA|
	DCD       |bit|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |fontv12|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
|$M26278|

	ENDP  ; |?gr_chari@@YADHHE@Z|, gr_chari

	EXPORT	|?gr_chard@@YADHHE@Z|			; gr_chard

	AREA	|.text| { |?gr_chard@@YADHHE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_chard@@YADHHE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_chard@@YADHHE@Z| } ; comdat associative
|$T26303| DCD	|?gr_chard@@YADHHE@Z|
	DCD	0x40005604

	AREA	|.text| { |?gr_chard@@YADHHE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_chard@@YADHHE@Z| PROC				; gr_chard

; 1121 : {

	mov       r12, sp
	stmdb     sp!, {r0}  ; stmfd
	stmdb     sp!, {r4 - r12, lr}  ; stmfd
	sub       sp, sp, #8
|$M26301|

; 1122 : const BYTE *car=&fontv12[c*13];

	and       r3, r2, #0xFF  ; 0xFF = 255
	str       r0, [sp, #0x30]  ; 0x30 = 48
	mov       r2, #0xD  ; 0xD = 13
	ldr       r0, [pc, #0x130]  ;  pc+8+304 = 00000154
	mul       r2, r3, r2
	ldr       r6, [pc, #0x124]  ;  pc+8+292 = 00000150
	mov       r4, r1
	ldr       r7, [pc, #0x118]  ;  pc+8+280 = 0000014C
	add       r0, r2, r0
	ldr       r8, [pc, #0x10C]  ;  pc+8+268 = 00000148

; 1123 : register int i,j,cnt=(*car)+1;

	ldrb      r1, [r0]
	mov       r3, #0xC  ; 0xC = 12
	ldr       r11, [pc, #0xFC]  ;  pc+8+252 = 00000144

; 1124 : car++;

	add       r10, r0, #1
	add       r2, r1, #1
	str       r3, [sp, #4]
	str       r2, [sp]
|$L25566|

; 1126 :   for (j=0;j<cnt;j++)

	mov       r9, #0
	cmp       r2, #0
	ble       |$L25567|  ; 0000010C
	ldr       r5, [sp, #0x30]  ; 0x30 = 48
|$L25569|

; 1127 : 	  if (!(*car&bit[j])) { gr_setpixel(x+2*j,y);gr_setpixel(x+2*j+1,y);}

	ldr       r0, [pc, #0xD4]  ;  pc+8+212 = 00000140
	ldrb      r1, [r10]
	ldrb      r3, [r9, +r0]
	ands      r3, r1, r3
	bne       |$L25570|  ; 000000FC
	ldr       r3, [r11]
	cmp       r5, r3
	bcs       |$L26286|  ; 000000B8
	ldr       r0, [pc, #0xB0]  ;  pc+8+176 = 0000013C
	ldr       r3, [r0]
	cmp       r4, r3
	bcs       |$L26286|  ; 000000B8
	ldr       r0, [r7]
	mul       r3, r0, r4
	ldr       r0, [r8]
	add       r3, r3, r5
	add       r0, r0, r3, lsl #1
	ldr       r3, [r6]
	mov       lr, pc
	mov       pc, r3
	ldr       r2, [sp]
|$L26286|
	ldr       r3, [r11]
	add       r1, r5, #1
	cmp       r1, r3
	bcs       |$L25570|  ; 000000FC
	ldr       r0, [pc, #0x6C]  ;  pc+8+108 = 0000013C
	ldr       r3, [r0]
	cmp       r4, r3
	bcs       |$L25570|  ; 000000FC
	ldr       r0, [r7]
	mul       r3, r0, r4
	ldr       r0, [r8]
	add       r3, r3, r1
	add       r0, r0, r3, lsl #1
	ldr       r3, [r6]
	mov       lr, pc
	mov       pc, r3
	ldr       r2, [sp]
|$L25570|
	add       r9, r9, #1
	add       r5, r5, #2
	cmp       r9, r2
	blt       |$L25569|  ; 00000064
|$L25567|

; 1125 : for (i=0;i<12;i++,car++,y++)

	ldr       r3, [sp, #4]
	add       r10, r10, #1
	add       r4, r4, #1
	sub       r0, r3, #1
	str       r0, [sp, #4]
	cmp       r0, #0
	bhi       |$L25566|  ; 00000054

; 1128 : return cnt*2;

	mov       r3, r2, lsl #24
	mov       r3, r3, asr #24
	mov       r0, r3, lsl #1

; 1129 : }

	add       sp, sp, #8
	ldmia     sp, {r4 - r11, sp, pc}  ; ldmfd
|$L26304|
	DCD       |?gr_alto@@3HA|
	DCD       |bit|
	DCD       |?gr_ancho@@3HA|
	DCD       |?gr_buffer@@3PAKA|
	DCD       |?gr_ypitch@@3HA|
	DCD       |?gr_pixel@@3P6AXPAG@ZA|
	DCD       |fontv12|
|$M26302|

	ENDP  ; |?gr_chard@@YADHHE@Z|, gr_chard

	EXPORT	|?gr_charc@@YADHHE@Z|			; gr_charc

	AREA	|.text| { |?gr_charc@@YADHHE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_charc@@YADHHE@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_charc@@YADHHE@Z| } ; comdat associative
|$T26316| DCD	|?gr_charc@@YADHHE@Z|
	DCD	0x40000d01

	AREA	|.text| { |?gr_charc@@YADHHE@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_charc@@YADHHE@Z| PROC				; gr_charc

; 1132 : {

	stmdb     sp!, {lr}  ; stmfd
|$M26314|

; 1133 : const BYTE *car=&fontv12[c*13];
; 1134 : char cnt=(*car)+1;

	and       r3, r2, #0xFF  ; 0xFF = 255
	mov       lr, #0xD  ; 0xD = 13
	mul       lr, r3, lr
	ldr       r3, [pc, #0x18]  ;  pc+8+24 = 00000030

; 1135 : return gr_char(x-(cnt>>1),y-6,c);

	sub       r1, r1, #6
	ldrsb     r3, [lr, +r3]
	add       r3, r3, #1
	mov       r3, r3, lsl #24
	sub       r0, r0, r3, asr #25
	ldmia     sp!, {lr}  ; ldmfd
	b         |?gr_char@@YADHHE@Z|  ; 00000034
|$L26317|
	DCD       |fontv12|
|$M26315|

	ENDP  ; |?gr_charc@@YADHHE@Z|, gr_charc

	EXPORT	|?gr_textsize@@YAXPADPAH1@Z|		; gr_textsize

	AREA	|.text| { |?gr_textsize@@YAXPADPAH1@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_textsize@@YAXPADPAH1@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_textsize@@YAXPADPAH1@Z| } ; comdat associative
|$T26323| DCD	|?gr_textsize@@YAXPADPAH1@Z|
	DCD	0x40001801

	AREA	|.text| { |?gr_textsize@@YAXPADPAH1@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_textsize@@YAXPADPAH1@Z| PROC			; gr_textsize

; 1139 : {

	stmdb     sp!, {r11, lr}  ; stmfd
|$M26321|

; 1140 : char cnt;
; 1141 : *x=0;*y=12;

	mov       r3, #0
	str       r3, [r1]
	mov       r3, #0xC  ; 0xC = 12
	str       r3, [r2]

; 1142 : for (;*t!=0;t++) {

	ldrsb     r2, [r0]
	movs      r3, r2
	beq       |$L25588|  ; 00000058
	ldr       r3, [pc, #0x34]  ;  pc+8+52 = 0000005C
|$L25586|

; 1143 : 	cnt=fontv12[((BYTE)*t)*13]+1;	
; 1144 : 	*x+=cnt;

	and       r2, r2, #0xFF  ; 0xFF = 255
	mov       r11, #0xD  ; 0xD = 13
	mul       r11, r2, r11
	add       r0, r0, #1
	ldrsb     r2, [r11, +r3]
	ldr       r11, [r1]
	add       r2, r2, #1
	mov       r2, r2, lsl #24
	add       r2, r11, r2, asr #24
	str       r2, [r1]
	ldrsb     r2, [r0]
	movs      r11, r2
	bne       |$L25586|  ; 00000024
|$L25588|

; 1145 : 	}
; 1146 : }

	ldmia     sp!, {r11, pc}  ; ldmfd
|$L26324|
	DCD       |fontv12|
|$M26322|

	ENDP  ; |?gr_textsize@@YAXPADPAH1@Z|, gr_textsize

	EXPORT	|?gr_text@@YAXHHPAD@Z|			; gr_text

	AREA	|.text| { |?gr_text@@YAXHHPAD@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_text@@YAXHHPAD@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_text@@YAXHHPAD@Z| } ; comdat associative
|$T26339| DCD	|?gr_text@@YAXHHPAD@Z|
	DCD	0x40000f01

	AREA	|.text| { |?gr_text@@YAXHHPAD@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_text@@YAXHHPAD@Z| PROC				; gr_text

; 1149 : {

	stmdb     sp!, {r4 - r6, lr}  ; stmfd
|$M26337|
	mov       r5, r0
	mov       r6, r1
	mov       r4, r2
	b         |$L26336|  ; 0000002C
|$L25596|

; 1150 : char cnt;
; 1151 : for (;*t!=0;t++) {
; 1152 : 	cnt=gr_char(x,y,(BYTE)*t);

	mov       r1, r6
	mov       r0, r5
	bl        |?gr_char@@YADHHE@Z|  ; 00000024
	add       r4, r4, #1

; 1153 : 	x+=cnt;

	mov       r3, r0, lsl #24
	add       r5, r5, r3, asr #24
|$L26336|
	ldrsb     r2, [r4]
	movs      r3, r2
	bne       |$L25596|  ; 00000014

; 1154 : 	}
; 1155 : }

	ldmia     sp!, {r4 - r6, pc}  ; ldmfd
|$M26338|

	ENDP  ; |?gr_text@@YAXHHPAD@Z|, gr_text

	EXPORT	|?gr_textc@@YAXHHPAD@Z|			; gr_textc

	AREA	|.text| { |?gr_textc@@YAXHHPAD@Z| }, CODE, SELECTION=1 ; comdat noduplicate

	AREA	|.pdata$$?gr_textc@@YAXHHPAD@Z|, PDATA, SELECTION=5, ASSOC=|.text| { |?gr_textc@@YAXHHPAD@Z| } ; comdat associative
|$T26363| DCD	|?gr_textc@@YAXHHPAD@Z|
	DCD	0x40001c02

	AREA	|.text| { |?gr_textc@@YAXHHPAD@Z| }, CODE, SELECTION=1 ; comdat noduplicate

|?gr_textc@@YAXHHPAD@Z| PROC				; gr_textc

; 1158 : {

	stmdb     sp!, {r4 - r6, lr}  ; stmfd
	sub       sp, sp, #8
|$M26361|
	mov       r4, r2
	mov       r5, r0
	mov       r6, r1

; 1159 : int xs,ys;
; 1160 : gr_textsize(t,&xs,&ys);

	add       r2, sp, #4
	add       r1, sp, #0
	mov       r0, r4
	bl        |?gr_textsize@@YAXPADPAH1@Z|  ; 00000028

; 1161 : gr_text(x-(xs>>1)+1,y-5,t);

	ldr       r3, [sp]
	sub       r0, r5, r3, asr #1
	add       r5, r0, #1
	ldrsb     r0, [r4]
	movs      r3, r0
	beq       |$L26356|  ; 00000068
	sub       r6, r6, #5
|$L26354|
	mov       r2, r0
	mov       r1, r6
	mov       r0, r5
	bl        |?gr_char@@YADHHE@Z|  ; 00000054
	add       r4, r4, #1
	mov       r3, r0, lsl #24
	ldrsb     r0, [r4]
	add       r5, r5, r3, asr #24
	movs      r3, r0
	bne       |$L26354|  ; 00000040
|$L26356|

; 1162 : }

	add       sp, sp, #8
	ldmia     sp!, {r4 - r6, pc}  ; ldmfd
|$M26362|

	ENDP  ; |?gr_textc@@YAXHHPAD@Z|, gr_textc

	END
